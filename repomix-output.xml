This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
.storybook/main.ts
.storybook/preview.ts
.vs/VSWorkspaceState.json
certs/create-ca.pem
certs/create-cert.pem
components.json
Dockerfile
Documentation.md
eslint.config.js
index.html
microservice/main.py
OxygenBackend/.dockerignore
OxygenBackend/.vs/OxygenBackend/v17/DocumentLayout.json
OxygenBackend/.vs/VSWorkspaceState.json
OxygenBackend/Dockerfile
OxygenBackend/QuizAPI/appsettings.Development.json
OxygenBackend/QuizAPI/Backup/QuizAPI.sln
OxygenBackend/QuizAPI/Controllers/Authentication/Authentication.cs
OxygenBackend/QuizAPI/Controllers/Image/ImageUploadController.cs
OxygenBackend/QuizAPI/Controllers/Image/Services/IImageService.cs
OxygenBackend/QuizAPI/Controllers/Image/Services/ImageCleanUpService.cs
OxygenBackend/QuizAPI/Controllers/Image/Services/ImageService.cs
OxygenBackend/QuizAPI/Controllers/Questions/AnswerOptionsController.cs
OxygenBackend/QuizAPI/Controllers/Questions/QuestionCategoriesController.cs
OxygenBackend/QuizAPI/Controllers/Questions/QuestionDifficultiesController.cs
OxygenBackend/QuizAPI/Controllers/Questions/QuestionLanguagesController.cs
OxygenBackend/QuizAPI/Controllers/Questions/QuestionsController.cs
OxygenBackend/QuizAPI/Controllers/Questions/Services/AnswerOptions/AnswerOptionService.cs
OxygenBackend/QuizAPI/Controllers/Questions/Services/AnswerOptions/IAnswerOptionService.cs
OxygenBackend/QuizAPI/Controllers/Questions/Services/IQuestionService.cs
OxygenBackend/QuizAPI/Controllers/Questions/Services/QuestionService.cs
OxygenBackend/QuizAPI/Controllers/Quizzes/QuizSessionsController.cs
OxygenBackend/QuizAPI/Controllers/Quizzes/QuizzesController.cs
OxygenBackend/QuizAPI/Controllers/Quizzes/Services/QuizServices/IQuizService.cs
OxygenBackend/QuizAPI/Controllers/Quizzes/Services/QuizServices/QuizService.cs
OxygenBackend/QuizAPI/Controllers/Quizzes/Services/QuizSessionServices/IQuizSessionService.cs
OxygenBackend/QuizAPI/Controllers/Quizzes/Services/QuizSessionServices/QuizSessionService.cs
OxygenBackend/QuizAPI/Controllers/Roles/RolesController.cs
OxygenBackend/QuizAPI/Controllers/Totals/TotalsController.cs
OxygenBackend/QuizAPI/Controllers/Users/UsersController.cs
OxygenBackend/QuizAPI/Controllers/Usht/DrejtimiController.cs
OxygenBackend/QuizAPI/Controllers/Usht/UniversityController.cs
OxygenBackend/QuizAPI/Data/ApplicationDbContext.cs
OxygenBackend/QuizAPI/Data/Migrations/20240815200832_FirstMigration.cs
OxygenBackend/QuizAPI/Data/Migrations/20240815200832_FirstMigration.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20240822211149_User-Role-Permission-UpdatedAt-RoleUpdatedAt-TablesAdded.cs
OxygenBackend/QuizAPI/Data/Migrations/20240822211149_User-Role-Permission-UpdatedAt-RoleUpdatedAt-TablesAdded.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20240822212353_PermsissionUpdatedAt-TableCreated-andTheNEccessaryConfiguration.cs
OxygenBackend/QuizAPI/Data/Migrations/20240822212353_PermsissionUpdatedAt-TableCreated-andTheNEccessaryConfiguration.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20240827193557_UserModelUpdatedAtConnection.cs
OxygenBackend/QuizAPI/Data/Migrations/20240827193557_UserModelUpdatedAtConnection.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20240902011205_UserRoleConnection.cs
OxygenBackend/QuizAPI/Data/Migrations/20240902011205_UserRoleConnection.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20240902011958_UserRoleFix3.cs
OxygenBackend/QuizAPI/Data/Migrations/20240902011958_UserRoleFix3.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20240904020057_roleUser.cs
OxygenBackend/QuizAPI/Data/Migrations/20240904020057_roleUser.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20240920170736_ProfileImageNull.cs
OxygenBackend/QuizAPI/Data/Migrations/20240920170736_ProfileImageNull.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20241121054235_answerandquestionupdate.cs
OxygenBackend/QuizAPI/Data/Migrations/20241121054235_answerandquestionupdate.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20241121065201_newQuestionAnswerUpdate.cs
OxygenBackend/QuizAPI/Data/Migrations/20241121065201_newQuestionAnswerUpdate.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20241121085243_QuestionUpdate.cs
OxygenBackend/QuizAPI/Data/Migrations/20241121085243_QuestionUpdate.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20241128174709_CategoryUpdate.cs
OxygenBackend/QuizAPI/Data/Migrations/20241128174709_CategoryUpdate.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20241203200446_QuestionCategoryMistake.cs
OxygenBackend/QuizAPI/Data/Migrations/20241203200446_QuestionCategoryMistake.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20241212201934_NoActionFixes.cs
OxygenBackend/QuizAPI/Data/Migrations/20241212201934_NoActionFixes.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20241229213636_QuestionNavigationPropertyInQuestionCategories.cs
OxygenBackend/QuizAPI/Data/Migrations/20241229213636_QuestionNavigationPropertyInQuestionCategories.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250102015424_QuestionCategoriesAndUsersEntityConnection.cs
OxygenBackend/QuizAPI/Data/Migrations/20250102015424_QuestionCategoriesAndUsersEntityConnection.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250102021450_AddedCreatedAtForQuestionCategory.cs
OxygenBackend/QuizAPI/Data/Migrations/20250102021450_AddedCreatedAtForQuestionCategory.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250111054825_QuestionDifficultyEntity.cs
OxygenBackend/QuizAPI/Data/Migrations/20250111054825_QuestionDifficultyEntity.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250120101859_QuizStatistics.cs
OxygenBackend/QuizAPI/Data/Migrations/20250120101859_QuizStatistics.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250131212240_QuestionTableRemovedDifficultyLevelAttribute.cs
OxygenBackend/QuizAPI/Data/Migrations/20250131212240_QuestionTableRemovedDifficultyLevelAttribute.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250208015859_UserTableAndDifficultyFix.cs
OxygenBackend/QuizAPI/Data/Migrations/20250208015859_UserTableAndDifficultyFix.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250208191615_QuestionLanguageAddedd.cs
OxygenBackend/QuizAPI/Data/Migrations/20250208191615_QuestionLanguageAddedd.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250219020333_QuizModelUpdateWithJointTable.cs
OxygenBackend/QuizAPI/Data/Migrations/20250219020333_QuizModelUpdateWithJointTable.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250219043540_VisibilityAttributeInQuestion.cs
OxygenBackend/QuizAPI/Data/Migrations/20250219043540_VisibilityAttributeInQuestion.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250221223318_NewVisibilityProperty.cs
OxygenBackend/QuizAPI/Data/Migrations/20250221223318_NewVisibilityProperty.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250222232647_removedPrimaryKeyFromJointTable.cs
OxygenBackend/QuizAPI/Data/Migrations/20250222232647_removedPrimaryKeyFromJointTable.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250222233239_DatabaseGeneratedKeyForQuiz.cs
OxygenBackend/QuizAPI/Data/Migrations/20250222233239_DatabaseGeneratedKeyForQuiz.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250223020909_ScoreToQuizQuestion.cs
OxygenBackend/QuizAPI/Data/Migrations/20250223020909_ScoreToQuizQuestion.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250305052655_QuizSessionAndUserAnswerModelIntegration.cs
OxygenBackend/QuizAPI/Data/Migrations/20250305052655_QuizSessionAndUserAnswerModelIntegration.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250306032554_UserAnswererror.cs
OxygenBackend/QuizAPI/Data/Migrations/20250306032554_UserAnswererror.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250306091418_ush.cs
OxygenBackend/QuizAPI/Data/Migrations/20250306091418_ush.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250319175348_EmojiAttributeInCategory.cs
OxygenBackend/QuizAPI/Data/Migrations/20250319175348_EmojiAttributeInCategory.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250319201806_emoji.cs
OxygenBackend/QuizAPI/Data/Migrations/20250319201806_emoji.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250327194938_PrivateQuestionModel.cs
OxygenBackend/QuizAPI/Data/Migrations/20250327194938_PrivateQuestionModel.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250331220610_QuizModelUpdate.cs
OxygenBackend/QuizAPI/Data/Migrations/20250331220610_QuizModelUpdate.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250408223844_newQuestionConfiguration.cs
OxygenBackend/QuizAPI/Data/Migrations/20250408223844_newQuestionConfiguration.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250410121139_QuizQuestionUpdate.cs
OxygenBackend/QuizAPI/Data/Migrations/20250410121139_QuizQuestionUpdate.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250413223747_TypeAnswerToTypeTheAnswerChange.cs
OxygenBackend/QuizAPI/Data/Migrations/20250413223747_TypeAnswerToTypeTheAnswerChange.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250427111456_QuizModelUpdate2.cs
OxygenBackend/QuizAPI/Data/Migrations/20250427111456_QuizModelUpdate2.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250506134649_QuestionImageImplementation.cs
OxygenBackend/QuizAPI/Data/Migrations/20250506134649_QuestionImageImplementation.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250516220817_NewImageAssetEntity.cs
OxygenBackend/QuizAPI/Data/Migrations/20250516220817_NewImageAssetEntity.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250516222730_ImageAssetEntityChange.cs
OxygenBackend/QuizAPI/Data/Migrations/20250516222730_ImageAssetEntityChange.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250519233530_removedPrivateQuestionEntity.cs
OxygenBackend/QuizAPI/Data/Migrations/20250519233530_removedPrivateQuestionEntity.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250521101912_QuizQuestionModification.cs
OxygenBackend/QuizAPI/Data/Migrations/20250521101912_QuizQuestionModification.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250524144204_QuizVisibilityAttribute.cs
OxygenBackend/QuizAPI/Data/Migrations/20250524144204_QuizVisibilityAttribute.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/20250604210904_TimeLimit.cs
OxygenBackend/QuizAPI/Data/Migrations/20250604210904_TimeLimit.Designer.cs
OxygenBackend/QuizAPI/Data/Migrations/ApplicationDbContextModelSnapshot.cs
OxygenBackend/QuizAPI/DTOs/Question/QuestionCategoryDTO.cs
OxygenBackend/QuizAPI/DTOs/Question/QuestionDifficultyDTO.cs
OxygenBackend/QuizAPI/DTOs/Question/QuestionDTOs.cs
OxygenBackend/QuizAPI/DTOs/Question/QuestionLanguageDTO.cs
OxygenBackend/QuizAPI/DTOs/Quiz/QuizDTO.cs
OxygenBackend/QuizAPI/DTOs/Quiz/QuizQuestionDTO.cs
OxygenBackend/QuizAPI/DTOs/Shared/PaginatedResponse.cs
OxygenBackend/QuizAPI/DTOs/User/FullUserDTO.cs
OxygenBackend/QuizAPI/DTOs/User/TemporaryUserCR.cs
OxygenBackend/QuizAPI/DTOs/User/UserDTO.cs
OxygenBackend/QuizAPI/Helpers/QuestionHelpers.cs
OxygenBackend/QuizAPI/ManyToManyTables/PermissionUpdatedAt.cs
OxygenBackend/QuizAPI/ManyToManyTables/QuizQuestion.cs
OxygenBackend/QuizAPI/ManyToManyTables/RoleUpdatedAt.cs
OxygenBackend/QuizAPI/ManyToManyTables/UserUpdatedAt.cs
OxygenBackend/QuizAPI/Mapping/QuestionMappingProfile.cs
OxygenBackend/QuizAPI/Mapping/QuizMappingProfile.cs
OxygenBackend/QuizAPI/Models/ApplicationUser/Permission.cs
OxygenBackend/QuizAPI/Models/ApplicationUser/Role.cs
OxygenBackend/QuizAPI/Models/ApplicationUser/User.cs
OxygenBackend/QuizAPI/Models/Drejtimi.cs
OxygenBackend/QuizAPI/Models/ImageAsset.cs
OxygenBackend/QuizAPI/Models/Pagination.cs
OxygenBackend/QuizAPI/Models/Questions/AnswerOption.cs
OxygenBackend/QuizAPI/Models/Questions/Question-Category.cs
OxygenBackend/QuizAPI/Models/Questions/Question-Difficulty.cs
OxygenBackend/QuizAPI/Models/Questions/Question-Language.cs
OxygenBackend/QuizAPI/Models/Questions/Question.cs
OxygenBackend/QuizAPI/Models/Quiz/Quiz.cs
OxygenBackend/QuizAPI/Models/Quiz/QuizSession.cs
OxygenBackend/QuizAPI/Models/Quiz/UserAnswer.cs
OxygenBackend/QuizAPI/Models/Statistics/Questions/QuestionStatistics.cs
OxygenBackend/QuizAPI/Models/Universiteti.cs
OxygenBackend/QuizAPI/Models/UpdatedAt.cs
OxygenBackend/QuizAPI/Properties/launchSettings.json
OxygenBackend/QuizAPI/QuizAPI.csproj
OxygenBackend/QuizAPI/QuizAPI.csproj.user
OxygenBackend/QuizAPI/QuizAPI.sln
OxygenBackend/QuizAPI/Repositories/Question/IQuestionRepository.cs
OxygenBackend/QuizAPI/Repositories/Question/QuestionRepository.cs
OxygenBackend/QuizAPI/Services/AuthenticationService.cs
OxygenBackend/QuizAPI/Services/DashboardService.cs
OxygenBackend/QuizAPI/Services/DataSeeder.cs
package.json
postcss.config.js
public/vite.svg
README.md
src/common/background-path.tsx
src/common/BesimCard.tsx
src/common/Card.tsx
src/common/custom-checkbox.tsx
src/common/Custom-Drawer/drawer-header.tsx
src/common/Custom-Drawer/drawer.links.tsx
src/common/Custom-Drawer/DrawerFilled.tsx
src/common/Custom-Drawer/profile-button.tsx
src/common/Divider.tsx
src/common/Effect-Related/background-squares.tsx
src/common/Effect-Related/word-switching.tsx
src/common/Go-Back-Button.tsx
src/common/Header.tsx
src/common/HeaderComponent.tsx
src/common/HoverEffect.tsx
src/common/InputField.tsx
src/common/LiftedButton.tsx
src/common/Notifications/__tests__/notifications.test.ts
src/common/Notifications/index.ts
src/common/Notifications/notification.stories.tsx
src/common/Notifications/Notification.tsx
src/common/Notifications/Notifications-store.ts
src/common/Notifications/Notifications.tsx
src/common/O2Button.tsx
src/common/Steps.tsx
src/components/ui/accordion.tsx
src/components/ui/avatar.tsx
src/components/ui/badge.tsx
src/components/ui/Button.stories.tsx
src/components/ui/button.tsx
src/components/ui/card.tsx
src/components/ui/checkbox.tsx
src/components/ui/collapsible.tsx
src/components/ui/data-table.tsx
src/components/ui/dialog/__tests__/dialog.test.tsx
src/components/ui/dialog/confirmation-dialog/__tests__/confirmation-dialog.test.tsx
src/components/ui/dialog/confirmation-dialog/confirmation-dialog.stories.tsx
src/components/ui/dialog/confirmation-dialog/confirmation-dialog.tsx
src/components/ui/dialog/confirmation-dialog/index.ts
src/components/ui/dialog/dialog.stories.tsx
src/components/ui/dialog/dialog.tsx
src/components/ui/dialog/index.ts
src/components/ui/drawer.tsx
src/components/ui/dropdown-menu.tsx
src/components/ui/form/error.tsx
src/components/ui/form/field-wrapper.tsx
src/components/ui/form/form-drawer.tsx
src/components/ui/form/form.tsx
src/components/ui/form/index.ts
src/components/ui/form/input.tsx
src/components/ui/form/label.tsx
src/components/ui/form/textarea.tsx
src/components/ui/index.ts
src/components/ui/LoginForm.tsx
src/components/ui/mode-toggle.tsx
src/components/ui/popover.tsx
src/components/ui/radio-group.tsx
src/components/ui/scroll-area.tsx
src/components/ui/select.tsx
src/components/ui/separator.tsx
src/components/ui/Spinner.tsx
src/components/ui/switch.tsx
src/components/ui/table.tsx
src/components/ui/tabs.tsx
src/components/ui/theme-provider.tsx
src/components/ui/tooltip.tsx
src/global.css
src/hooks/__tests__/use-disclosure.test.ts
src/hooks/use-debounce.ts
src/hooks/use-disclosure.ts
src/index.tsx
src/layouts/dashboard-layout.tsx
src/layouts/individual-content-layout.tsx
src/layouts/layout.tsx
src/lib/Api-client.ts
src/lib/Auth.tsx
src/lib/authHelpers.ts
src/lib/authorization.tsx
src/lib/date-format.ts
src/lib/pagination-query.ts
src/lib/React-query.ts
src/lib/Redirect.tsx
src/lib/SocialButtons/SocialButtons.tsx
src/main.tsx
src/pages/AboutUs/AboutUs.tsx
src/pages/AppRoot.tsx
src/pages/Dashboard/Components/DashboardHeader.tsx
src/pages/Dashboard/Components/DashboardNav.tsx
src/pages/Dashboard/Components/dashboardNavConfig.ts
src/pages/Dashboard/Dashboard.tsx
src/pages/Dashboard/Pages/Application/Application.tsx
src/pages/Dashboard/Pages/Permissions/Permissions.tsx
src/pages/Dashboard/Pages/Question/api/delete-question.ts
src/pages/Dashboard/Pages/Question/api/Normal-Question/create-multiple-choice-question.ts
src/pages/Dashboard/Pages/Question/api/Normal-Question/get-individual-question.ts
src/pages/Dashboard/Pages/Question/api/Normal-Question/get-multiple-choice-questions.ts
src/pages/Dashboard/Pages/Question/api/Normal-Question/update-multiple-choice-question.ts
src/pages/Dashboard/Pages/Question/api/True_False-Question/create-true_false-question.ts
src/pages/Dashboard/Pages/Question/api/True_False-Question/get-true_false-questions.ts
src/pages/Dashboard/Pages/Question/api/True_False-Question/update-true_false-question.ts
src/pages/Dashboard/Pages/Question/api/Type_The_Answer-Question/create-type-the-answer-question.ts
src/pages/Dashboard/Pages/Question/api/Type_The_Answer-Question/get-type-the-answer-questions.ts
src/pages/Dashboard/Pages/Question/api/Type_The_Answer-Question/update-type_the_answer-question.ts
src/pages/Dashboard/Pages/Question/Components/Multiple_Choice_Question/Create-Multiple-Choice-Question-Components/answer-option.tsx
src/pages/Dashboard/Pages/Question/Components/Multiple_Choice_Question/Create-Multiple-Choice-Question-Components/create-multiple-choice-question.tsx
src/pages/Dashboard/Pages/Question/Components/Multiple_Choice_Question/multiple-choice-question-card.tsx
src/pages/Dashboard/Pages/Question/Components/Multiple_Choice_Question/multiple-choice-question-list.tsx
src/pages/Dashboard/Pages/Question/Components/Multiple_Choice_Question/update-multiple-choice-question.tsx
src/pages/Dashboard/Pages/Question/Components/QuestionsTabContent.tsx
src/pages/Dashboard/Pages/Question/Components/Re-Usable-Components/constants.ts
src/pages/Dashboard/Pages/Question/Components/Re-Usable-Components/delete-question.tsx
src/pages/Dashboard/Pages/Question/Components/Re-Usable-Components/pagination-control.tsx
src/pages/Dashboard/Pages/Question/Components/Re-Usable-Components/question-filters.tsx
src/pages/Dashboard/Pages/Question/Components/True_Flase-Question/create-true_false-questions.tsx
src/pages/Dashboard/Pages/Question/Components/True_Flase-Question/true-false-question-card.tsx
src/pages/Dashboard/Pages/Question/Components/True_Flase-Question/true-false-question-list.tsx
src/pages/Dashboard/Pages/Question/Components/True_Flase-Question/update-true_false-questions.tsx
src/pages/Dashboard/Pages/Question/Components/Type_The_Answer-Question/create-type-the-answer-question.tsx
src/pages/Dashboard/Pages/Question/Components/Type_The_Answer-Question/type-the-asnwer-list.tsx
src/pages/Dashboard/Pages/Question/Components/Type_The_Answer-Question/type-the-asnwer-question-card.tsx
src/pages/Dashboard/Pages/Question/Components/Type_The_Answer-Question/update-type_the_asnwer-question.tsx
src/pages/Dashboard/Pages/Question/Entities/Categories/api/create-question-categories.ts
src/pages/Dashboard/Pages/Question/Entities/Categories/api/delete-question-categories.ts
src/pages/Dashboard/Pages/Question/Entities/Categories/api/get-question-categories.ts
src/pages/Dashboard/Pages/Question/Entities/Categories/Components/category-view.tsx
src/pages/Dashboard/Pages/Question/Entities/Categories/Components/columns.tsx
src/pages/Dashboard/Pages/Question/Entities/Categories/Components/create-question-category.tsx
src/pages/Dashboard/Pages/Question/Entities/Categories/Components/delete-question-category.tsx
src/pages/Dashboard/Pages/Question/Entities/Categories/Components/select-question-category.tsx
src/pages/Dashboard/Pages/Question/Entities/Difficulty/api/create-question-difficulty.ts
src/pages/Dashboard/Pages/Question/Entities/Difficulty/api/delete-question-difficulty.ts
src/pages/Dashboard/Pages/Question/Entities/Difficulty/api/get-question-difficulties.ts
src/pages/Dashboard/Pages/Question/Entities/Difficulty/Components/columns.tsx
src/pages/Dashboard/Pages/Question/Entities/Difficulty/Components/create-question-difficulty.tsx
src/pages/Dashboard/Pages/Question/Entities/Difficulty/Components/delete-question-difficulty.tsx
src/pages/Dashboard/Pages/Question/Entities/Difficulty/Components/difficulty-view.tsx
src/pages/Dashboard/Pages/Question/Entities/Difficulty/Components/select-question-difficulty.tsx
src/pages/Dashboard/Pages/Question/Entities/Language/api/create-question-language.ts
src/pages/Dashboard/Pages/Question/Entities/Language/api/delete-question-language.ts
src/pages/Dashboard/Pages/Question/Entities/Language/api/get-question-language.ts
src/pages/Dashboard/Pages/Question/Entities/Language/components/columns.tsx
src/pages/Dashboard/Pages/Question/Entities/Language/components/create-question-language.tsx
src/pages/Dashboard/Pages/Question/Entities/Language/components/delete-question-language.tsx
src/pages/Dashboard/Pages/Question/Entities/Language/components/language-view.tsx
src/pages/Dashboard/Pages/Question/Entities/Language/components/select-question-language.tsx
src/pages/Dashboard/Pages/Question/Entities/select-visibility.tsx
src/pages/Dashboard/Pages/Question/Questions.tsx
src/pages/Dashboard/Pages/Quiz/api/create-quiz.ts
src/pages/Dashboard/Pages/Quiz/api/delete-quiz.ts
src/pages/Dashboard/Pages/Quiz/api/get-all-quizzes.ts
src/pages/Dashboard/Pages/Quiz/api/get-quiz-questions.ts
src/pages/Dashboard/Pages/Quiz/api/get-quiz.ts
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/bulk-settings-panel.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/create-question/multiple-choice-question-form.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/create-question/new-quiz-question-card.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/question-select/question-select.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/question-select/select-common-question-card.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/question-select/select-common-question-list.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/questions-panel.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-details.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/existing-quiz-question-card.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/multiple-choice-question-card/multiple-choice-answers.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/multiple-choice-question-card/quiz-muiltiple-choice-question-card.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/quiz-base-question-card.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/quiz-question-card-footer.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/quiz-question-image-preview.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/quiz-question-metadata.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/true-false-question-card/true-false-answer.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/true-false-question-card/true-false-question-card.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/type-the-answer-question-card/type-the-asnwer-display.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/type-the-answer-question-card/type-the-asnwer-question-card.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-settings.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/score-select.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/small-question-card.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/time-limit-select.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/create-quiz.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/Quiz-questions-context.tsx
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/types.ts
src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/use-quiz-form.ts
src/pages/Dashboard/Pages/Quiz/components/Data-Table-Columns/columns.tsx
src/pages/Dashboard/Pages/Quiz/components/Data-Table-Columns/title-description.tsx
src/pages/Dashboard/Pages/Quiz/components/delete-quiz.tsx
src/pages/Dashboard/Pages/Quiz/components/quiz-filters.tsx
src/pages/Dashboard/Pages/Quiz/components/quiz-properties.tsx
src/pages/Dashboard/Pages/Quiz/components/quiz-questions.tsx
src/pages/Dashboard/Pages/Quiz/Quiz.tsx
src/pages/Dashboard/Pages/Quiz/Quizzes.tsx
src/pages/Dashboard/Pages/Quiz/Sessions/api/create-quiz-session.ts
src/pages/Dashboard/Pages/User/api/create-user.ts
src/pages/Dashboard/Pages/User/api/delete-user.ts
src/pages/Dashboard/Pages/User/api/get-total-users.ts
src/pages/Dashboard/Pages/User/api/get-users.ts
src/pages/Dashboard/Pages/User/Components/columns.tsx
src/pages/Dashboard/Pages/User/Components/create-user.tsx
src/pages/Dashboard/Pages/User/Components/delete-user.tsx
src/pages/Dashboard/Pages/User/Components/stats-cards.tsx
src/pages/Dashboard/Pages/User/Components/user-page-button-group.tsx
src/pages/Dashboard/Pages/User/Users.tsx
src/pages/Dashboard/Pages/Ushtrime/api/create-drejtimi.ts
src/pages/Dashboard/Pages/Ushtrime/api/create-university.ts
src/pages/Dashboard/Pages/Ushtrime/api/delete-drejtimi.ts
src/pages/Dashboard/Pages/Ushtrime/api/delete-university.ts
src/pages/Dashboard/Pages/Ushtrime/api/get-drejtimi.ts
src/pages/Dashboard/Pages/Ushtrime/api/get-universities.ts
src/pages/Dashboard/Pages/Ushtrime/api/update-university.ts
src/pages/Dashboard/Pages/Ushtrime/comp/create-drejtimi.tsx
src/pages/Dashboard/Pages/Ushtrime/comp/create-university.tsx
src/pages/Dashboard/Pages/Ushtrime/comp/delete-drejtimi.tsx
src/pages/Dashboard/Pages/Ushtrime/comp/delete-university.tsx
src/pages/Dashboard/Pages/Ushtrime/comp/update-university.tsx
src/pages/Home/components/choose-quiz-dialog.tsx
src/pages/Home/components/quiz-confirmation-dialog.tsx
src/pages/Home/Home.tsx
src/pages/Quiz/api/get-categorized-quizzes.ts
src/pages/Quiz/components/quiz-card.tsx
src/pages/Quiz/components/quiz-filters.tsx
src/pages/Quiz/components/quiz-header.tsx
src/pages/Quiz/Quiz-Selection.tsx
src/pages/UserRelated/Login/Login.tsx
src/pages/UserRelated/Login/LoginForm.tsx
src/pages/UserRelated/Profile/MyProfile.tsx
src/pages/UserRelated/Profile/ProfileWrapper.tsx
src/pages/UserRelated/SettingsPage/Settings.tsx
src/pages/UserRelated/Signup/Signup.tsx
src/pages/UserRelated/Signup/SignupComponents/SignupForm.tsx
src/pages/UserRelated/Signup/SignupComponents/SignupProgressDisplay.tsx
src/pages/UserRelated/Signup/SignupComponents/SignupSteps.tsx
src/pages/UserRelated/Signup/SignupComponents/Step.tsx
src/pages/UtilityPages/Error/Main.tsx
src/pages/UtilityPages/NotFound/Not-Found.tsx
src/Provider.tsx
src/routes/Router.tsx
src/stories/assets/accessibility.svg
src/stories/assets/discord.svg
src/stories/assets/github.svg
src/stories/assets/tutorials.svg
src/stories/assets/youtube.svg
src/stories/button.css
src/stories/Button.stories.ts
src/stories/Button.tsx
src/stories/Configure.mdx
src/stories/header.css
src/stories/Header.stories.ts
src/stories/Header.tsx
src/stories/page.css
src/stories/Page.stories.ts
src/stories/Page.tsx
src/types/ApiTypes.ts
src/utils/cn.tsx
src/utils/Image-Upload.tsx
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".storybook/main.ts">
import type { StorybookConfig } from "@storybook/react-vite";

const config: StorybookConfig = {
  stories: ["../src/**/*.mdx", "../src/**/*.stories.@(js|jsx|mjs|ts|tsx)"],
  addons: [
    "@storybook/addon-onboarding",
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@chromatic-com/storybook",
    "@storybook/addon-interactions",
  ],
  framework: {
    name: "@storybook/react-vite",
    options: {},
  },
};
export default config;
</file>

<file path=".storybook/preview.ts">
import type { Preview } from "@storybook/react";
import '../src/global.css';

const preview: Preview = {
  parameters: {
    controls: {
      matchers: {
        color: /(muted|color)$/i,
        date: /Date$/i,
      },
    },
  },
};

export default preview;
</file>

<file path=".vs/VSWorkspaceState.json">
{
  "ExpandedNodes": [
    ""
  ],
  "PreviewInSolutionExplorer": false
}
</file>

<file path="certs/create-ca.pem">
-----BEGIN CERTIFICATE-----
MIIEQzCCAqugAwIBAgIQH4ptr1OWOHNo6s/4uCtnCjANBgkqhkiG9w0BAQsFADCB
gzEeMBwGA1UEChMVbWtjZXJ0IGRldmVsb3BtZW50IENBMSwwKgYDVQQLDCNLQVNU
UlxrYWxvdEBLYXN0ciAoS2FzdHJpb3QgQXZkaWFqKTEzMDEGA1UEAwwqbWtjZXJ0
IEtBU1RSXGthbG90QEthc3RyIChLYXN0cmlvdCBBdmRpYWopMB4XDTI0MDgyNjE4
MjkyMFoXDTI2MTEyNjE5MjkyMFowVzEnMCUGA1UEChMebWtjZXJ0IGRldmVsb3Bt
ZW50IGNlcnRpZmljYXRlMSwwKgYDVQQLDCNLQVNUUlxrYWxvdEBLYXN0ciAoS2Fz
dHJpb3QgQXZkaWFqKTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANXb
xvwcIKYG45VjlnPKNv1EXgp9z7KKP+hhlEPahYJF5ajiSqrHqN0BZj80gJER1z7H
PZYSksXXB+MbcJgV33yH7MBr8Iw/5nc5FrdFFq/uPyo9rdyoRM9h90Cag2bNPZcH
H2UYLD5yqtDz8m5ZMK9aOQ+gF/Jge3mbE4nXZhnL5SioMM4236bPv2nFCG1CNRBr
vBngjpnYz5VzWJ9A7HJszDcnv3igpIwuFatqJMrim3gMs2K3r4vrayJexZzTSYlL
GeKdzVMG1fl33DYkRNxjHnOLQ7USC5B0Iz/VJ2dRri/4ZRo0eKVdyuIsTdj5QlVh
pWzuJr16RAi303L0mIkCAwEAAaNeMFwwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQM
MAoGCCsGAQUFBwMBMB8GA1UdIwQYMBaAFCu8NANXk9r7N4W7i4//giTzfExsMBQG
A1UdEQQNMAuCCWNyZWF0ZS1jYTANBgkqhkiG9w0BAQsFAAOCAYEAOZzjHrNAvGuy
/ixqihGSlDA7mYxj9e3PKzGzlKA/vo4RWsAN9r5R9RTen/1xIuKUYz2Ix0BziRFT
iTmvikYAWmMnuZ6hIvglhYsHD9nccvq44WzozkI0zaYjM/yRMMZC6BqqvzIl7pMJ
TBdOtLNAdwtL1QnXC/6/c2cfJzUiFqSnSymMp4GT5dcCYM1X2aCwXI/JlPYJ28le
QMRk9jKceypf1R6Z+NQrCfTHPboHmWJcoNOINYUXMwcKTkB+L5pB77Sq+R4DeXl1
X18HDRwiQ26L37q/iGoT6k845Ynl//JAme37aIRf56L1htkvPi5oIH4lbLFT7Ir2
UpXHutLmBcQrx1/A6jSLPl27oDdQodA/tX6TArxycJ4LJa+L+MIB3GeNTybuVfKE
+N6P4uvxJ9EhL1RBQCpRq5r0zZSltRAL0j84Lv+vihHu3espXbr4hpNYyFbjS47a
Whwjn2OQ/jZLdjrUhbYwT2/OKaqkjMjEu7F0g5XQSTAT3xpsGwtQ
-----END CERTIFICATE-----
</file>

<file path="certs/create-cert.pem">
-----BEGIN CERTIFICATE-----
MIIERjCCAq6gAwIBAgIRANHk8jtV/NrzrCb1eA7WdAIwDQYJKoZIhvcNAQELBQAw
gYMxHjAcBgNVBAoTFW1rY2VydCBkZXZlbG9wbWVudCBDQTEsMCoGA1UECwwjS0FT
VFJca2Fsb3RAS2FzdHIgKEthc3RyaW90IEF2ZGlhaikxMzAxBgNVBAMMKm1rY2Vy
dCBLQVNUUlxrYWxvdEBLYXN0ciAoS2FzdHJpb3QgQXZkaWFqKTAeFw0yNDA4MjYx
ODI5NDFaFw0yNjExMjYxOTI5NDFaMFcxJzAlBgNVBAoTHm1rY2VydCBkZXZlbG9w
bWVudCBjZXJ0aWZpY2F0ZTEsMCoGA1UECwwjS0FTVFJca2Fsb3RAS2FzdHIgKEth
c3RyaW90IEF2ZGlhaikwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDf
ixTyICjDCZ8HNq9FNn4EBdCaDmd26axPcOHjj1qeAX0G21vGrWthDH/GsfdpAn1R
PvO5QB2hRO0ks/f8n3E8cOrmMBVKZGPPw08PMuJQqK+PZB+JztS0hUKhEridJ/+w
JSl5agxj+Jh2eoJHhFTz/iuErAvE4xuav712oexX8uFat7xlw0aX5ujZ07Oqx/on
OVZbAF2+301hOD4/kQ7B8Z9SGkFB0C/jYocqlP1KSlAPOauNPFCryHLpIHP/pC/N
uTBZinNdjKp7jVpjjFd/CMkU47jdYKwvyzl86WNFxXn/TcJvKWPPuhPMXkL5k1Qs
qnEcmchmQCznIpNFwNNhAgMBAAGjYDBeMA4GA1UdDwEB/wQEAwIFoDATBgNVHSUE
DDAKBggrBgEFBQcDATAfBgNVHSMEGDAWgBQrvDQDV5Pa+zeFu4uP/4Ik83xMbDAW
BgNVHREEDzANggtjcmVhdGUtY2VydDANBgkqhkiG9w0BAQsFAAOCAYEAKkgXjZR+
TCiOQI2E9Lmd4m8DAm0eI5JZkriVSbvR7bXdeiIM0AQ1qzbO/70vbUOy5sgZCkmo
/prunbOycfww0Uqk/2PM3+Qd86OEBp/vI0bIAehgL04Q+NUO/hungl71jzRAicg3
a0l0GoRan7AxkKzAx0wJtLbZEjGlYN5CeJICZa2B95+yGSvCjSf/lARCj428m6wh
aPaD4WSuEa6bcAKiuscpDuCUoSvdra4GwPYaupySglq+FqbB/50oln+nlZKC+G1h
umlitlwbLaCP6jEQ/pbare0u2ogILOYHhvF3fohTELJSQQqh+No7oY0YcXJAMIc3
R7AbYBoI/KD5wmo4ALNA75NFWxptNUZuqe6knnG/cAAzZx0Y8ySlzmQ4DNv6jKei
BXgya8HTiiitbcfc1ug41Bx/jJKIrqjTxXyQhalcu2++1t6xUfYHCFq3ez9AvO04
6qvParTWUSCDQBP7sQ/tenJGXBcdDoj551ghrFb11DGCCZdXKNbXN+6J
-----END CERTIFICATE-----
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}
</file>

<file path="Documentation.md">
Important files in the application are explained here, why they are used, where they come and some more explanation of their inner functions

Api-client.ts :

This file is concerned with configuring an Axios instance for making API calls, including handling requests and response interceptors. 
 - `authRequestInterceptor`: An interceptor that modifies outgoing requests to ensure they include necessary headers and credentials.
 -- There are two types of interceptors : 
        1. Request Interceptors: These are functions that run before a request is sent to the server. They can be used to modify the request configuration (such as headers, URL, or data) before the request is sent.
        2. Response Interceptors: These are functions that run after the server sends a response but before the response is handed over to your code that called the Axios request. They can be used to modify the respose data or handle errors in a centralized way.
 - `api` instance: A pre-configures Axios instance with a base URL set from the environment configuration, It uses interceptors for handling requests and responses.
 - Repose handling: The response interceptor processes the response data or handles errors. It includes logic for handling authentication errors (e.g., redirecting to the login page on a 401 status).


Auth.tsx : 

This file managed the authentication logic, integrating with the React Query library to manage the authentication state.
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config({
  extends: [js.configs.recommended, ...tseslint.configs.recommended],
  files: ['**/*.{ts,tsx}'],
  ignores: ['dist'],
  languageOptions: {
    ecmaVersion: 2020,
    globals: globals.browser,
  },
  plugins: {
    'react-hooks': reactHooks,
    'react-refresh': reactRefresh,
  },
  rules: {
    ...reactHooks.configs.recommended.rules,
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
})
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="src/assets/02.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Titillium+Web:ital,wght@0,200;0,300;0,400;0,600;0,700;0,900;1,200;1,300;1,400;1,600;1,700&display=swap"
      rel="stylesheet"
    />
    <link href="https://fonts.googleapis.com/css2?family=Barriecito&display=swap" rel="stylesheet">

    <title>Oxygen Quiz</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="microservice/main.py">
from fastapi import FastAPI
from pydantic import BaseModel
import ollama

app = FastAPI()

class ChatRequest(BaseModel):
    prompt: str

@app.post("/chat")
async def chat(request: ChatRequest):
    response = ollama.chat(model="qwen2:7b", messages=[{"role": "user", "content": request.prompt}])
    return {"response": response["message"]["content"]}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
</file>

<file path="OxygenBackend/.vs/OxygenBackend/v17/DocumentLayout.json">
{
  "Version": 1,
  "WorkspaceRootPath": "C:\\Users\\kalot\\Desktop\\SEMESTRI-4\\LAB1\\OxygenQuiz\\OxygenBackend\\",
  "Documents": [],
  "DocumentGroupContainers": [
    {
      "Orientation": 0,
      "VerticalTabListWidth": 256,
      "DocumentGroups": [
        {
          "DockedWidth": 1481,
          "SelectedChildIndex": -1,
          "Children": [
            {
              "$type": "Bookmark",
              "Name": "ST:0:0:{34e76e81-ee4a-11d0-ae2e-00a0c90fffc3}"
            }
          ]
        },
        {
          "DockedWidth": 1049,
          "SelectedChildIndex": -1,
          "Children": [
            {
              "$type": "Bookmark",
              "Name": "ST:0:0:{d78612c7-9962-4b83-95d9-268046dad23a}"
            },
            {
              "$type": "Bookmark",
              "Name": "ST:0:0:{0ad07096-bba9-4900-a651-0598d26f6d24}"
            }
          ]
        }
      ]
    }
  ]
}
</file>

<file path="OxygenBackend/.vs/VSWorkspaceState.json">
{
  "ExpandedNodes": [
    ""
  ],
  "PreviewInSolutionExplorer": false
}
</file>

<file path="OxygenBackend/QuizAPI/appsettings.Development.json">
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Questions/QuestionCategoriesController.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using QuizAPI.Data;
using QuizAPI.DTOs.Question;
using QuizAPI.Models;

namespace QuizAPI.Controllers.Questions
{
    [Route("api/[controller]")]
    [ApiController]
    public class QuestionCategoriesController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public QuestionCategoriesController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: api/QuestionCategories
        [HttpGet]
        public async Task<ActionResult<IEnumerable<QuestionCategoryDTO>>> GetQuestionCategories()
        {
            if (_context.QuestionCategories == null)
            {
                return NotFound();
            }

            var questionCategories = await _context.QuestionCategories
                .Select(qc => new QuestionCategoryDTO
                {
                    Id = qc.Id,
                    Name = qc.Name,
                    Username = qc.User.Username,
                    CreatedAt = qc.CreatedAt
                })
                .ToListAsync();

            return Ok(questionCategories);
        }

        // GET: api/QuestionCategories/5
        [HttpGet("{id}")]
        public async Task<ActionResult<QuestionCategory>> GetQuestionCategory(int id)
        {
            if (_context.QuestionCategories == null)
            {
                return NotFound();
            }
            var questionCategory = await _context.QuestionCategories.FindAsync(id);

            if (questionCategory == null)
            {
                return NotFound();
            }

            return questionCategory;
        }

        // PUT: api/QuestionCategories/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [Authorize(Roles = "SuperAdmin")]
        [HttpPut("{id}")]
        public async Task<IActionResult> PutQuestionCategory(int id, QuestionCategory questionCategory)
        {
            if (id != questionCategory.Id)
            {
                return BadRequest();
            }

            _context.Entry(questionCategory).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!QuestionCategoryExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/QuestionCategories
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754

        [HttpPost]
        public async Task<ActionResult<QuestionCategory>> PostQuestionCategory(QuestionCategoryCM questionCategory)
        {
            if (_context.QuestionCategories == null)
            {
                return Problem("Entity set 'ApplicationDbContext.QuestionCategories'  is null.");
            }

            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized(new { message = "User ID not found in token." });
            }

            var questionCategoryEntity = new QuestionCategory 
            { 
                Name = questionCategory.Name,
                Emoji = questionCategory.Emoji,
                UserId = Guid.Parse(userId),
                CreatedAt = DateTime.UtcNow 
            };

            _context.QuestionCategories.Add(questionCategoryEntity);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetQuestionCategory", new { id = questionCategoryEntity.Id }, questionCategoryEntity);
        }

        // DELETE: api/QuestionCategories/5
        [Authorize(Roles = "SuperAdmin")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteQuestionCategory(int id)
        {
            if (_context.QuestionCategories == null)
            {
                return NotFound();
            }
            var questionCategory = await _context.QuestionCategories.FindAsync(id);
            if (questionCategory == null)
            {
                return NotFound();
            }

            _context.QuestionCategories.Remove(questionCategory);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool QuestionCategoryExists(int id)
        {
            return (_context.QuestionCategories?.Any(e => e.Id == id)).GetValueOrDefault();
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Questions/QuestionDifficultiesController.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using QuizAPI.Data;
using QuizAPI.Models;
using QuizAPI.DTOs.Question;
using System.Security.Claims;
using Microsoft.AspNetCore.Authorization;

namespace QuizAPI.Controllers.Questions
{
    [Route("api/[controller]")]
    [ApiController]
    public class QuestionDifficultiesController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public QuestionDifficultiesController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: api/QuestionDifficulties
        [HttpGet]
        public async Task<ActionResult<IEnumerable<QuestionDifficultyDTO>>> GetQuestionDifficulties()
        {
          if (_context.QuestionDifficulties == null)
          {
              return NotFound();
          }

          var questionDifficulties = await _context.QuestionDifficulties
              .Select(qd => new QuestionDifficultyDTO
              {
                  ID = qd.ID,
                  Level = qd.Level,
                  Weight = qd.Weight,
                  CreatedAt = qd.CreatedAt,
                  Username = qd.User.Username
              })
              .ToListAsync();
            return Ok(questionDifficulties);
        }

        // GET: api/QuestionDifficulties/5
        [HttpGet("{id}")]
        public async Task<ActionResult<QuestionDifficulty>> GetQuestionDifficulty(int id)
        {
          if (_context.QuestionDifficulties == null)
          {
              return NotFound();
          }
            var questionDifficulty = await _context.QuestionDifficulties.FindAsync(id);

            if (questionDifficulty == null)
            {
                return NotFound();
            }

            return questionDifficulty;
        }

        // PUT: api/QuestionDifficulties/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [Authorize(Roles = "SuperAdmin")]
        [HttpPut("{id}")]
        public async Task<IActionResult> PutQuestionDifficulty(int id, QuestionDifficulty questionDifficulty)
        {
            if (id != questionDifficulty.ID)
            {
                return BadRequest();
            }

            _context.Entry(questionDifficulty).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!QuestionDifficultyExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/QuestionDifficulties
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<QuestionDifficulty>> PostQuestionDifficulty(QuestionDifficultyCM questionDifficulty)
        {
            if (_context.QuestionDifficulties == null)
            {
                return Problem("Entity set 'ApplicationDbContext.QuestionDifficulties'  is null.");
            }


            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized(new { message = "User ID not found in token." });
            }

            var qDifficulty = new QuestionDifficulty
            {
                Level = questionDifficulty.Level,
                Weight = questionDifficulty.Weight,
                CreatedAt = DateTime.UtcNow,
                UserId = Guid.Parse(userId)
            };
            _context.QuestionDifficulties.Add(qDifficulty);
            await _context.SaveChangesAsync();

            return Ok(qDifficulty);
        }

        // DELETE: api/QuestionDifficulties/5
        [Authorize(Roles = "SuperAdmin")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteQuestionDifficulty(int id)
        {
            if (_context.QuestionDifficulties == null)
            {
                return NotFound();
            }
            var questionDifficulty = await _context.QuestionDifficulties.FindAsync(id);
            if (questionDifficulty == null)
            {
                return NotFound();
            }

            _context.QuestionDifficulties.Remove(questionDifficulty);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool QuestionDifficultyExists(int id)
        {
            return (_context.QuestionDifficulties?.Any(e => e.ID == id)).GetValueOrDefault();
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Questions/QuestionLanguagesController.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using QuizAPI.Data;
using QuizAPI.DTOs.Question;
using QuizAPI.Models;

namespace QuizAPI.Controllers.Questions
{
    [Route("api/[controller]")]
    [ApiController]
    public class QuestionLanguagesController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public QuestionLanguagesController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: api/QuestionLanguages
        [HttpGet]
        public async Task<ActionResult<IEnumerable<QuestionLanguage>>> GetQuestionLanguages()
        {
          if (_context.QuestionLanguages == null)
          {
              return NotFound();
          }

            var qLanguages = await _context.QuestionLanguages.Select(ql => new QuestionLanguageDTO
            {
                ID = ql.Id,
                Language = ql.Language,
                CreatedAt = ql.CreatedAt,
                Username = ql.User.Username
            }).ToListAsync();

            return Ok(qLanguages);
        }

        // GET: api/QuestionLanguages/5
        [HttpGet("{id}")]
        public async Task<ActionResult<QuestionLanguage>> GetQuestionLanguage(int id)
        {
          if (_context.QuestionLanguages == null)
          {
              return NotFound();
          }
            var questionLanguage = await _context.QuestionLanguages.FindAsync(id);

            if (questionLanguage == null)
            {
                return NotFound();
            }

            return questionLanguage;
        }

        // PUT: api/QuestionLanguages/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [Authorize(Roles = "SuperAdmin")]
        [HttpPut("{id}")]
        public async Task<IActionResult> PutQuestionLanguage(int id, QuestionLanguage questionLanguage)
        {
            if (id != questionLanguage.Id)
            {
                return BadRequest();
            }

            _context.Entry(questionLanguage).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!QuestionLanguageExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        [HttpPost]
        public async Task<ActionResult<QuestionLanguage>> PostQuestionLanguage(QuestionLanguageCM questionLanguage)
        {
          if (_context.QuestionLanguages == null)
          {
              return Problem("Entity set 'ApplicationDbContext.QuestionLanguages'  is null.");
          }

            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized(new { message = "User ID not found in token." });
            }

            var qLanguage = new QuestionLanguage
            {
                Language = questionLanguage.Language,
                UserId = Guid.Parse(userId),
                CreatedAt = DateTime.UtcNow
            };

            _context.QuestionLanguages.Add(qLanguage);
            await _context.SaveChangesAsync();

            return Ok(questionLanguage);
        }

        // DELETE: api/QuestionLanguages/5
        [Authorize(Roles = "SuperAdmin")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteQuestionLanguage(int id)
        {
            if (_context.QuestionLanguages == null)
            {
                return NotFound();
            }
            var questionLanguage = await _context.QuestionLanguages.FindAsync(id);
            if (questionLanguage == null)
            {
                return NotFound();
            }

            _context.QuestionLanguages.Remove(questionLanguage);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool QuestionLanguageExists(int id)
        {
            return (_context.QuestionLanguages?.Any(e => e.Id == id)).GetValueOrDefault();
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Quizzes/Services/QuizSessionServices/IQuizSessionService.cs">
using QuizAPI.Models.Quiz;

namespace QuizAPI.Controllers.Quizzes.Services.QuizSessionServices
{
    public interface IQuizSessionService
    {
        Task<QuizSession> StartQuizSessionAsync(int quizId, Guid userId);
        Task<UserAnswer> SubmitAnswerAsync(Guid sessionId, int questionId, int selectedOptionId);
        Task<int> FinishQuizSessionAsync(Guid sessionId);
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Roles/RolesController.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using QuizAPI.Data;
using QuizAPI.Models;

namespace QuizAPI.Controllers.Roles
{
    [Route("api/[controller]")]
    [ApiController]
    public class RolesController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public RolesController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: api/Roles
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Role>>> GetRoles()
        {
            if (_context.Roles == null)
            {
                return NotFound();
            }
            return await _context.Roles.ToListAsync();
        }

        // GET: api/Roles/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Role>> GetRole(int id)
        {
            if (_context.Roles == null)
            {
                return NotFound();
            }
            var role = await _context.Roles.FindAsync(id);

            if (role == null)
            {
                return NotFound();
            }

            return role;
        }

        // PUT: api/Roles/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutRole(int id, Role role)
        {
            if (id != role.Id)
            {
                return BadRequest();
            }

            _context.Entry(role).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!RoleExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Roles
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<Role>> PostRole(Role role)
        {
            if (_context.Roles == null)
            {
                return Problem("Entity set 'ApplicationDbContext.Roles'  is null.");
            }
            _context.Roles.Add(role);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetRole", new { id = role.Id }, role);
        }

        // DELETE: api/Roles/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteRole(int id)
        {
            if (_context.Roles == null)
            {
                return NotFound();
            }
            var role = await _context.Roles.FindAsync(id);
            if (role == null)
            {
                return NotFound();
            }

            _context.Roles.Remove(role);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool RoleExists(int id)
        {
            return (_context.Roles?.Any(e => e.Id == id)).GetValueOrDefault();
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Usht/DrejtimiController.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using QuizAPI.Controllers.Usht;
using QuizAPI.Data;
using QuizAPI.Models;

namespace QuizAPI.Controllers.Usht
{

    public class DrejtimiDTO
    {

        public string Name { get; set; }
        public string Duration { get; set; }
        public int UniversityId { get; set; }
    }

    [Route("api/[controller]")]
    [ApiController]
    public class DrejtimiController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public DrejtimiController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: api/Drejtimis
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Drejtimi>>> GetDrejtimis()
        {
            if (_context.Drejtimet == null)
            {
                return NotFound();
            }
            return await _context.Drejtimet.ToListAsync();
        }

        // GET: api/Drejtimis/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Drejtimi>> GetDrejtimi(int id)
        {
            if (_context.Drejtimet == null)
            {
                return NotFound();
            }
            var Drejtimi = await _context.Drejtimet.FindAsync(id);

            if (Drejtimi == null)
            {
                return NotFound();
            }

            return Drejtimi;
        }

        // PUT: api/Drejtimis/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutDrejtimi(int id, Drejtimi Drejtimi)
        {
            if (id != Drejtimi.Id)
            {
                return BadRequest();
            }

            _context.Entry(Drejtimi).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!DrejtimiExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Drejtimis
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<Drejtimi>> PostDrejtimi(DrejtimiDTO Drejtimi)
        {
            if (_context.Drejtimet == null)
            {
                return Problem("Entity set 'ApplicationDbContext.Drejtimis'  is null.");
            }
            var NewContact = new Drejtimi
            {
                Name = Drejtimi.Name,
                Duration = Drejtimi.Duration,
                UniversitetiId = Drejtimi.UniversityId,
            };
            _context.Drejtimet.Add(NewContact);
            await _context.SaveChangesAsync();

            return Ok(NewContact);
        }

        // DELETE: api/Drejtimis/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteDrejtimi(int id)
        {
            if (_context.Drejtimet == null)
            {
                return NotFound();
            }
            var Drejtimi = await _context.Drejtimet.FindAsync(id);
            if (Drejtimi == null)
            {
                return NotFound();
            }

            _context.Drejtimet.Remove(Drejtimi);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool DrejtimiExists(int id)
        {
            return (_context.Drejtimet?.Any(e => e.Id == id)).GetValueOrDefault();
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Usht/UniversityController.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using QuizAPI.Data;
using QuizAPI.Models;

namespace QuizAPI.Controllers.Usht
{

    public class UniversityDTO
    {
        public string Name { get; set; }
        public string City { get; set; }

    }

    [Route("api/[controller]")]
    [ApiController]
    public class UniversityController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public UniversityController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: api/Universitys
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Universiteti>>> GetUniversitys()
        {
            if (_context.Universitetet == null)
            {
                return NotFound();
            }
            return await _context.Universitetet.ToListAsync();
        }

        // GET: api/Universitys/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Universiteti>> GetUniversity(int id)
        {
            if (_context.Universitetet == null)
            {
                return NotFound();
            }
            var University = await _context.Universitetet.FindAsync(id);

            if (University == null)
            {
                return NotFound();
            }

            return University;
        }

        // PUT: api/Universitys/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutUniversity(int id, UniversityDTO NewUniversity)
        {
            var University = _context.Universitetet.FirstOrDefault(e => e.Id == id);

            University.City = NewUniversity.City;
            University.Name = NewUniversity.Name;


            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!UniversityExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Universitys
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<Universiteti>> PostUniversity(UniversityDTO RUniversitet)
        {
            if (_context.Universitetet == null)
            {
                return Problem("Entity set 'ApplicationDbContext.Universitys'  is null.");
            }

            var newUniversity = new Universiteti
            {
                Name = RUniversitet.Name,
                City = RUniversitet.City
            };
            _context.Universitetet.Add(newUniversity);
            await _context.SaveChangesAsync();

            return Ok(newUniversity);
        }

        // DELETE: api/Universitys/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteUniversity(int id)
        {
            if (_context.Universitetet == null)
            {
                return NotFound();
            }
            var University = await _context.Universitetet.FindAsync(id);
            if (University == null)
            {
                return NotFound();
            }

            _context.Universitetet.Remove(University);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool UniversityExists(int id)
        {
            return (_context.Universitetet?.Any(e => e.Id == id)).GetValueOrDefault();
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240815200832_FirstMigration.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class FirstMigration : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240815200832_FirstMigration.Designer.cs">
// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240815200832_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240822211149_User-Role-Permission-UpdatedAt-RoleUpdatedAt-TablesAdded.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class UserRolePermissionUpdatedAtRoleUpdatedAtTablesAdded : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Permissions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    isActive = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Permissions", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Roles",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    isActive = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConcurrencyStamp = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Roles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Username = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Email = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DateRegistered = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DateModified = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UpdatedAt",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Username = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedAt = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UpdatedAt", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UpdatedAt_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RoleUpdatedAt",
                columns: table => new
                {
                    RoleId = table.Column<int>(type: "int", nullable: false),
                    UpdatedAtId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RoleUpdatedAt", x => new { x.RoleId, x.UpdatedAtId });
                    table.ForeignKey(
                        name: "FK_RoleUpdatedAt_Roles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "Roles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RoleUpdatedAt_UpdatedAt_UpdatedAtId",
                        column: x => x.UpdatedAtId,
                        principalTable: "UpdatedAt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_RoleUpdatedAt_UpdatedAtId",
                table: "RoleUpdatedAt",
                column: "UpdatedAtId");

            migrationBuilder.CreateIndex(
                name: "IX_UpdatedAt_UserId",
                table: "UpdatedAt",
                column: "UserId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Permissions");

            migrationBuilder.DropTable(
                name: "RoleUpdatedAt");

            migrationBuilder.DropTable(
                name: "Roles");

            migrationBuilder.DropTable(
                name: "UpdatedAt");

            migrationBuilder.DropTable(
                name: "Users");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240822211149_User-Role-Permission-UpdatedAt-RoleUpdatedAt-TablesAdded.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240822211149_User-Role-Permission-UpdatedAt-RoleUpdatedAt-TablesAdded")]
    partial class UserRolePermissionUpdatedAtRoleUpdatedAtTablesAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240822212353_PermsissionUpdatedAt-TableCreated-andTheNEccessaryConfiguration.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class PermsissionUpdatedAtTableCreatedandTheNEccessaryConfiguration : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "PermissionUpdatedAt",
                columns: table => new
                {
                    PermissionId = table.Column<int>(type: "int", nullable: false),
                    UpdatedAtId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PermissionUpdatedAt", x => new { x.PermissionId, x.UpdatedAtId });
                    table.ForeignKey(
                        name: "FK_PermissionUpdatedAt_Permissions_PermissionId",
                        column: x => x.PermissionId,
                        principalTable: "Permissions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PermissionUpdatedAt_UpdatedAt_UpdatedAtId",
                        column: x => x.UpdatedAtId,
                        principalTable: "UpdatedAt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_PermissionUpdatedAt_UpdatedAtId",
                table: "PermissionUpdatedAt",
                column: "UpdatedAtId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "PermissionUpdatedAt");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240822212353_PermsissionUpdatedAt-TableCreated-andTheNEccessaryConfiguration.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240822212353_PermsissionUpdatedAt-TableCreated-andTheNEccessaryConfiguration")]
    partial class PermsissionUpdatedAtTableCreatedandTheNEccessaryConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240827193557_UserModelUpdatedAtConnection.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class UserModelUpdatedAtConnection : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_UpdatedAt_Users_UserId",
                table: "UpdatedAt");

            migrationBuilder.RenameColumn(
                name: "DateModified",
                table: "Users",
                newName: "LastLogin");

            migrationBuilder.AddColumn<Guid>(
                name: "ConcurrencyStamp",
                table: "Users",
                type: "uniqueidentifier",
                nullable: false,
                defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));

            migrationBuilder.AddColumn<string>(
                name: "ImmutableName",
                table: "Users",
                type: "nvarchar(max)",
                nullable: false,
                defaultValue: "");

            migrationBuilder.AddColumn<bool>(
                name: "IsDeleted",
                table: "Users",
                type: "bit",
                nullable: false,
                defaultValue: false);

            migrationBuilder.AddColumn<string>(
                name: "ProfileImageUrl",
                table: "Users",
                type: "nvarchar(max)",
                nullable: false,
                defaultValue: "");

            migrationBuilder.AddColumn<string>(
                name: "Description",
                table: "UpdatedAt",
                type: "nvarchar(max)",
                nullable: true);

            migrationBuilder.CreateTable(
                name: "UserUpdatedAt",
                columns: table => new
                {
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedAtId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserUpdatedAt", x => new { x.UserId, x.UpdatedAtId });
                    table.ForeignKey(
                        name: "FK_UserUpdatedAt_UpdatedAt_UpdatedAtId",
                        column: x => x.UpdatedAtId,
                        principalTable: "UpdatedAt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UserUpdatedAt_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_UserUpdatedAt_UpdatedAtId",
                table: "UserUpdatedAt",
                column: "UpdatedAtId");

            migrationBuilder.AddForeignKey(
                name: "FK_UpdatedAt_Users_UserId",
                table: "UpdatedAt",
                column: "UserId",
                principalTable: "Users",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_UpdatedAt_Users_UserId",
                table: "UpdatedAt");

            migrationBuilder.DropTable(
                name: "UserUpdatedAt");

            migrationBuilder.DropColumn(
                name: "ConcurrencyStamp",
                table: "Users");

            migrationBuilder.DropColumn(
                name: "ImmutableName",
                table: "Users");

            migrationBuilder.DropColumn(
                name: "IsDeleted",
                table: "Users");

            migrationBuilder.DropColumn(
                name: "ProfileImageUrl",
                table: "Users");

            migrationBuilder.DropColumn(
                name: "Description",
                table: "UpdatedAt");

            migrationBuilder.RenameColumn(
                name: "LastLogin",
                table: "Users",
                newName: "DateModified");

            migrationBuilder.AddForeignKey(
                name: "FK_UpdatedAt_Users_UserId",
                table: "UpdatedAt",
                column: "UserId",
                principalTable: "Users",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240827193557_UserModelUpdatedAtConnection.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240827193557_UserModelUpdatedAtConnection")]
    partial class UserModelUpdatedAtConnection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240902011205_UserRoleConnection.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class UserRoleConnection : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "RoleId",
                table: "Users",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<Guid>(
                name: "CreatedById",
                table: "Roles",
                type: "uniqueidentifier",
                nullable: false,
                defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));

            migrationBuilder.CreateIndex(
                name: "IX_Users_RoleId",
                table: "Users",
                column: "RoleId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Roles_CreatedById",
                table: "Roles",
                column: "CreatedById");

            migrationBuilder.AddForeignKey(
                name: "FK_Roles_Users_CreatedById",
                table: "Roles",
                column: "CreatedById",
                principalTable: "Users",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Users_Roles_RoleId",
                table: "Users",
                column: "RoleId",
                principalTable: "Roles",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Roles_Users_CreatedById",
                table: "Roles");

            migrationBuilder.DropForeignKey(
                name: "FK_Users_Roles_RoleId",
                table: "Users");

            migrationBuilder.DropIndex(
                name: "IX_Users_RoleId",
                table: "Users");

            migrationBuilder.DropIndex(
                name: "IX_Roles_CreatedById",
                table: "Roles");

            migrationBuilder.DropColumn(
                name: "RoleId",
                table: "Users");

            migrationBuilder.DropColumn(
                name: "CreatedById",
                table: "Roles");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240902011205_UserRoleConnection.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240902011205_UserRoleConnection")]
    partial class UserRoleConnection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithOne()
                        .HasForeignKey("QuizAPI.Models.User", "RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240902011958_UserRoleFix3.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class UserRoleFix3 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240902011958_UserRoleFix3.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240902011958_UserRoleFix3")]
    partial class UserRoleFix3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithOne()
                        .HasForeignKey("QuizAPI.Models.User", "RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240904020057_roleUser.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class roleUser : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Roles_Users_CreatedById",
                table: "Roles");

            migrationBuilder.DropForeignKey(
                name: "FK_Users_Roles_RoleId",
                table: "Users");

            migrationBuilder.DropIndex(
                name: "IX_Users_RoleId",
                table: "Users");

            migrationBuilder.DropIndex(
                name: "IX_Roles_CreatedById",
                table: "Roles");

            migrationBuilder.DropColumn(
                name: "CreatedById",
                table: "Roles");

            migrationBuilder.CreateIndex(
                name: "IX_Users_RoleId",
                table: "Users",
                column: "RoleId");

            migrationBuilder.AddForeignKey(
                name: "FK_Users_Roles_RoleId",
                table: "Users",
                column: "RoleId",
                principalTable: "Roles",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Users_Roles_RoleId",
                table: "Users");

            migrationBuilder.DropIndex(
                name: "IX_Users_RoleId",
                table: "Users");

            migrationBuilder.AddColumn<Guid>(
                name: "CreatedById",
                table: "Roles",
                type: "uniqueidentifier",
                nullable: false,
                defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));

            migrationBuilder.CreateIndex(
                name: "IX_Users_RoleId",
                table: "Users",
                column: "RoleId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Roles_CreatedById",
                table: "Roles",
                column: "CreatedById");

            migrationBuilder.AddForeignKey(
                name: "FK_Roles_Users_CreatedById",
                table: "Roles",
                column: "CreatedById",
                principalTable: "Users",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Users_Roles_RoleId",
                table: "Users",
                column: "RoleId",
                principalTable: "Roles",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240904020057_roleUser.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240904020057_roleUser")]
    partial class roleUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240920170736_ProfileImageNull.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class ProfileImageNull : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "ProfileImageUrl",
                table: "Users",
                type: "nvarchar(max)",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "nvarchar(max)");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "ProfileImageUrl",
                table: "Users",
                type: "nvarchar(max)",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "nvarchar(max)",
                oldNullable: true);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20240920170736_ProfileImageNull.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240920170736_ProfileImageNull")]
    partial class ProfileImageNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241121054235_answerandquestionupdate.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class answerandquestionupdate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AnswerOptions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Text = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    QuestionId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AnswerOptions", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Questions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Text = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CorrectAnswerOptionId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Questions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Questions_AnswerOptions_CorrectAnswerOptionId",
                        column: x => x.CorrectAnswerOptionId,
                        principalTable: "AnswerOptions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AnswerOptions_QuestionId",
                table: "AnswerOptions",
                column: "QuestionId");

            migrationBuilder.CreateIndex(
                name: "IX_Questions_CorrectAnswerOptionId",
                table: "Questions",
                column: "CorrectAnswerOptionId");

            migrationBuilder.AddForeignKey(
                name: "FK_AnswerOptions_Questions_QuestionId",
                table: "AnswerOptions",
                column: "QuestionId",
                principalTable: "Questions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_AnswerOptions_Questions_QuestionId",
                table: "AnswerOptions");

            migrationBuilder.DropTable(
                name: "Questions");

            migrationBuilder.DropTable(
                name: "AnswerOptions");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241121054235_answerandquestionupdate.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241121054235_answerandquestionupdate")]
    partial class answerandquestionupdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrectAnswerOptionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CorrectAnswerOptionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.AnswerOption", "CorrectAnswerOption")
                        .WithMany("QuestionsWhereCorrect")
                        .HasForeignKey("CorrectAnswerOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CorrectAnswerOption");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Navigation("QuestionsWhereCorrect");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241121065201_newQuestionAnswerUpdate.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class newQuestionAnswerUpdate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Questions_AnswerOptions_CorrectAnswerOptionId",
                table: "Questions");

            migrationBuilder.DropIndex(
                name: "IX_Questions_CorrectAnswerOptionId",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "CorrectAnswerOptionId",
                table: "Questions");

            migrationBuilder.AddColumn<bool>(
                name: "IsCorrect",
                table: "AnswerOptions",
                type: "bit",
                nullable: false,
                defaultValue: false);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "IsCorrect",
                table: "AnswerOptions");

            migrationBuilder.AddColumn<int>(
                name: "CorrectAnswerOptionId",
                table: "Questions",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.CreateIndex(
                name: "IX_Questions_CorrectAnswerOptionId",
                table: "Questions",
                column: "CorrectAnswerOptionId");

            migrationBuilder.AddForeignKey(
                name: "FK_Questions_AnswerOptions_CorrectAnswerOptionId",
                table: "Questions",
                column: "CorrectAnswerOptionId",
                principalTable: "AnswerOptions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241121065201_newQuestionAnswerUpdate.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241121065201_newQuestionAnswerUpdate")]
    partial class newQuestionAnswerUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241121085243_QuestionUpdate.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuestionUpdate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "Difficulty",
                table: "Questions",
                type: "int",
                nullable: false,
                defaultValue: 0);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "Difficulty",
                table: "Questions");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241121085243_QuestionUpdate.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241121085243_QuestionUpdate")]
    partial class QuestionUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241128174709_CategoryUpdate.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class CategoryUpdate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "CategoryId",
                table: "Questions",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.CreateTable(
                name: "QuestionCategory",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QuestionCategory", x => x.Id);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Questions_CategoryId",
                table: "Questions",
                column: "CategoryId");

            migrationBuilder.AddForeignKey(
                name: "FK_Questions_QuestionCategory_CategoryId",
                table: "Questions",
                column: "CategoryId",
                principalTable: "QuestionCategory",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Questions_QuestionCategory_CategoryId",
                table: "Questions");

            migrationBuilder.DropTable(
                name: "QuestionCategory");

            migrationBuilder.DropIndex(
                name: "IX_Questions_CategoryId",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "CategoryId",
                table: "Questions");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241128174709_CategoryUpdate.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241128174709_CategoryUpdate")]
    partial class CategoryUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategory");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241203200446_QuestionCategoryMistake.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuestionCategoryMistake : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Questions_QuestionCategory_CategoryId",
                table: "Questions");

            migrationBuilder.DropPrimaryKey(
                name: "PK_QuestionCategory",
                table: "QuestionCategory");

            migrationBuilder.RenameTable(
                name: "QuestionCategory",
                newName: "QuestionCategories");

            migrationBuilder.AddPrimaryKey(
                name: "PK_QuestionCategories",
                table: "QuestionCategories",
                column: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Questions_QuestionCategories_CategoryId",
                table: "Questions",
                column: "CategoryId",
                principalTable: "QuestionCategories",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Questions_QuestionCategories_CategoryId",
                table: "Questions");

            migrationBuilder.DropPrimaryKey(
                name: "PK_QuestionCategories",
                table: "QuestionCategories");

            migrationBuilder.RenameTable(
                name: "QuestionCategories",
                newName: "QuestionCategory");

            migrationBuilder.AddPrimaryKey(
                name: "PK_QuestionCategory",
                table: "QuestionCategory",
                column: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Questions_QuestionCategory_CategoryId",
                table: "Questions",
                column: "CategoryId",
                principalTable: "QuestionCategory",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241203200446_QuestionCategoryMistake.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241203200446_QuestionCategoryMistake")]
    partial class QuestionCategoryMistake
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241212201934_NoActionFixes.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class NoActionFixes : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_UpdatedAt_Users_UserId",
                table: "UpdatedAt");

            migrationBuilder.DropForeignKey(
                name: "FK_UserUpdatedAt_UpdatedAt_UpdatedAtId",
                table: "UserUpdatedAt");

            migrationBuilder.DropForeignKey(
                name: "FK_UserUpdatedAt_Users_UserId",
                table: "UserUpdatedAt");

            migrationBuilder.AddColumn<DateTime>(
                name: "CreatedAt",
                table: "Questions",
                type: "datetime2",
                nullable: false,
                defaultValue: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

            migrationBuilder.AddColumn<Guid>(
                name: "UserId",
                table: "Questions",
                type: "uniqueidentifier",
                nullable: false,
                defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));

            migrationBuilder.CreateIndex(
                name: "IX_Questions_UserId",
                table: "Questions",
                column: "UserId");

            migrationBuilder.AddForeignKey(
                name: "FK_Questions_Users_UserId",
                table: "Questions",
                column: "UserId",
                principalTable: "Users",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_UpdatedAt_Users_UserId",
                table: "UpdatedAt",
                column: "UserId",
                principalTable: "Users",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_UserUpdatedAt_UpdatedAt_UpdatedAtId",
                table: "UserUpdatedAt",
                column: "UpdatedAtId",
                principalTable: "UpdatedAt",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_UserUpdatedAt_Users_UserId",
                table: "UserUpdatedAt",
                column: "UserId",
                principalTable: "Users",
                principalColumn: "Id");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Questions_Users_UserId",
                table: "Questions");

            migrationBuilder.DropForeignKey(
                name: "FK_UpdatedAt_Users_UserId",
                table: "UpdatedAt");

            migrationBuilder.DropForeignKey(
                name: "FK_UserUpdatedAt_UpdatedAt_UpdatedAtId",
                table: "UserUpdatedAt");

            migrationBuilder.DropForeignKey(
                name: "FK_UserUpdatedAt_Users_UserId",
                table: "UserUpdatedAt");

            migrationBuilder.DropIndex(
                name: "IX_Questions_UserId",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "CreatedAt",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "UserId",
                table: "Questions");

            migrationBuilder.AddForeignKey(
                name: "FK_UpdatedAt_Users_UserId",
                table: "UpdatedAt",
                column: "UserId",
                principalTable: "Users",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_UserUpdatedAt_UpdatedAt_UpdatedAtId",
                table: "UserUpdatedAt",
                column: "UpdatedAtId",
                principalTable: "UpdatedAt",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_UserUpdatedAt_Users_UserId",
                table: "UserUpdatedAt",
                column: "UserId",
                principalTable: "Users",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241212201934_NoActionFixes.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241212201934_NoActionFixes")]
    partial class NoActionFixes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241229213636_QuestionNavigationPropertyInQuestionCategories.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuestionNavigationPropertyInQuestionCategories : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20241229213636_QuestionNavigationPropertyInQuestionCategories.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241229213636_QuestionNavigationPropertyInQuestionCategories")]
    partial class QuestionNavigationPropertyInQuestionCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250102015424_QuestionCategoriesAndUsersEntityConnection.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuestionCategoriesAndUsersEntityConnection : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<Guid>(
                name: "UserId",
                table: "QuestionCategories",
                type: "uniqueidentifier",
                nullable: false,
                defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));

            migrationBuilder.CreateIndex(
                name: "IX_QuestionCategories_UserId",
                table: "QuestionCategories",
                column: "UserId");

            migrationBuilder.AddForeignKey(
                name: "FK_QuestionCategories_Users_UserId",
                table: "QuestionCategories",
                column: "UserId",
                principalTable: "Users",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_QuestionCategories_Users_UserId",
                table: "QuestionCategories");

            migrationBuilder.DropIndex(
                name: "IX_QuestionCategories_UserId",
                table: "QuestionCategories");

            migrationBuilder.DropColumn(
                name: "UserId",
                table: "QuestionCategories");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250102015424_QuestionCategoriesAndUsersEntityConnection.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250102015424_QuestionCategoriesAndUsersEntityConnection")]
    partial class QuestionCategoriesAndUsersEntityConnection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250102021450_AddedCreatedAtForQuestionCategory.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class AddedCreatedAtForQuestionCategory : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<DateTime>(
                name: "CreatedAt",
                table: "QuestionCategories",
                type: "datetime2",
                nullable: false,
                defaultValue: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "CreatedAt",
                table: "QuestionCategories");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250102021450_AddedCreatedAtForQuestionCategory.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250102021450_AddedCreatedAtForQuestionCategory")]
    partial class AddedCreatedAtForQuestionCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250111054825_QuestionDifficultyEntity.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuestionDifficultyEntity : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.RenameColumn(
                name: "Difficulty",
                table: "Questions",
                newName: "DifficultyId");

            migrationBuilder.AddColumn<string>(
                name: "DifficultyLevel",
                table: "Questions",
                type: "nvarchar(max)",
                nullable: false,
                defaultValue: "");

            migrationBuilder.CreateTable(
                name: "QuestionDifficulties",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Level = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Weight = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QuestionDifficulties", x => x.ID);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Questions_DifficultyId",
                table: "Questions",
                column: "DifficultyId");

            migrationBuilder.AddForeignKey(
                name: "FK_Questions_QuestionDifficulties_DifficultyId",
                table: "Questions",
                column: "DifficultyId",
                principalTable: "QuestionDifficulties",
                principalColumn: "ID",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Questions_QuestionDifficulties_DifficultyId",
                table: "Questions");

            migrationBuilder.DropTable(
                name: "QuestionDifficulties");

            migrationBuilder.DropIndex(
                name: "IX_Questions_DifficultyId",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "DifficultyLevel",
                table: "Questions");

            migrationBuilder.RenameColumn(
                name: "DifficultyId",
                table: "Questions",
                newName: "Difficulty");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250111054825_QuestionDifficultyEntity.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250111054825_QuestionDifficultyEntity")]
    partial class QuestionDifficultyEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250120101859_QuizStatistics.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuizStatistics : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "QuestionStatistics",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    QuestionId = table.Column<int>(type: "int", nullable: false),
                    TimesUsedInQuizzes = table.Column<int>(type: "int", nullable: false),
                    TimesAnsweredCorrectly = table.Column<int>(type: "int", nullable: false),
                    TimesAnsweredIncorrectly = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QuestionStatistics", x => x.Id);
                    table.ForeignKey(
                        name: "FK_QuestionStatistics_Questions_QuestionId",
                        column: x => x.QuestionId,
                        principalTable: "Questions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_QuestionStatistics_QuestionId",
                table: "QuestionStatistics",
                column: "QuestionId",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "QuestionStatistics");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250120101859_QuizStatistics.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250120101859_QuizStatistics")]
    partial class QuizStatistics
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250131212240_QuestionTableRemovedDifficultyLevelAttribute.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuestionTableRemovedDifficultyLevelAttribute : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "DifficultyLevel",
                table: "Questions");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "DifficultyLevel",
                table: "Questions",
                type: "nvarchar(max)",
                nullable: false,
                defaultValue: "");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250131212240_QuestionTableRemovedDifficultyLevelAttribute.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250131212240_QuestionTableRemovedDifficultyLevelAttribute")]
    partial class QuestionTableRemovedDifficultyLevelAttribute
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250208015859_UserTableAndDifficultyFix.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class UserTableAndDifficultyFix : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<DateTime>(
                name: "CreatedAt",
                table: "QuestionDifficulties",
                type: "datetime2",
                nullable: false,
                defaultValue: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

            migrationBuilder.AddColumn<Guid>(
                name: "UserId",
                table: "QuestionDifficulties",
                type: "uniqueidentifier",
                nullable: false,
                defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));

            migrationBuilder.CreateIndex(
                name: "IX_QuestionDifficulties_UserId",
                table: "QuestionDifficulties",
                column: "UserId");

            migrationBuilder.AddForeignKey(
                name: "FK_QuestionDifficulties_Users_UserId",
                table: "QuestionDifficulties",
                column: "UserId",
                principalTable: "Users",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_QuestionDifficulties_Users_UserId",
                table: "QuestionDifficulties");

            migrationBuilder.DropIndex(
                name: "IX_QuestionDifficulties_UserId",
                table: "QuestionDifficulties");

            migrationBuilder.DropColumn(
                name: "CreatedAt",
                table: "QuestionDifficulties");

            migrationBuilder.DropColumn(
                name: "UserId",
                table: "QuestionDifficulties");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250208015859_UserTableAndDifficultyFix.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250208015859_UserTableAndDifficultyFix")]
    partial class UserTableAndDifficultyFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250208191615_QuestionLanguageAddedd.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuestionLanguageAddedd : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "LanguageId",
                table: "Questions",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "QuestionLanguageId",
                table: "Questions",
                type: "int",
                nullable: true);

            migrationBuilder.CreateTable(
                name: "QuestionLanguages",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Language = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QuestionLanguages", x => x.Id);
                    table.ForeignKey(
                        name: "FK_QuestionLanguages_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Questions_LanguageId",
                table: "Questions",
                column: "LanguageId");

            migrationBuilder.CreateIndex(
                name: "IX_Questions_QuestionLanguageId",
                table: "Questions",
                column: "QuestionLanguageId");

            migrationBuilder.CreateIndex(
                name: "IX_QuestionLanguages_UserId",
                table: "QuestionLanguages",
                column: "UserId");

            migrationBuilder.AddForeignKey(
                name: "FK_Questions_QuestionLanguages_LanguageId",
                table: "Questions",
                column: "LanguageId",
                principalTable: "QuestionLanguages",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Questions_QuestionLanguages_QuestionLanguageId",
                table: "Questions",
                column: "QuestionLanguageId",
                principalTable: "QuestionLanguages",
                principalColumn: "Id");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Questions_QuestionLanguages_LanguageId",
                table: "Questions");

            migrationBuilder.DropForeignKey(
                name: "FK_Questions_QuestionLanguages_QuestionLanguageId",
                table: "Questions");

            migrationBuilder.DropTable(
                name: "QuestionLanguages");

            migrationBuilder.DropIndex(
                name: "IX_Questions_LanguageId",
                table: "Questions");

            migrationBuilder.DropIndex(
                name: "IX_Questions_QuestionLanguageId",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "LanguageId",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "QuestionLanguageId",
                table: "Questions");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250208191615_QuestionLanguageAddedd.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250208191615_QuestionLanguageAddedd")]
    partial class QuestionLanguageAddedd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250219020333_QuizModelUpdateWithJointTable.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuizModelUpdateWithJointTable : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Quizzes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CategoryId = table.Column<int>(type: "int", nullable: false),
                    LanguageId = table.Column<int>(type: "int", nullable: false),
                    TimeLimit = table.Column<int>(type: "int", nullable: true),
                    ShuffleQuestions = table.Column<bool>(type: "bit", nullable: false),
                    ShuffleAnswers = table.Column<bool>(type: "bit", nullable: false),
                    IsPublished = table.Column<bool>(type: "bit", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    PassingScore = table.Column<int>(type: "int", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Version = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Quizzes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Quizzes_QuestionCategories_CategoryId",
                        column: x => x.CategoryId,
                        principalTable: "QuestionCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Quizzes_QuestionLanguages_LanguageId",
                        column: x => x.LanguageId,
                        principalTable: "QuestionLanguages",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Quizzes_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "QuizQuestions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    QuizId = table.Column<int>(type: "int", nullable: false),
                    QuestionId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QuizQuestions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_QuizQuestions_Questions_QuestionId",
                        column: x => x.QuestionId,
                        principalTable: "Questions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QuizQuestions_Quizzes_QuizId",
                        column: x => x.QuizId,
                        principalTable: "Quizzes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_QuizQuestions_QuestionId",
                table: "QuizQuestions",
                column: "QuestionId");

            migrationBuilder.CreateIndex(
                name: "IX_QuizQuestions_QuizId",
                table: "QuizQuestions",
                column: "QuizId");

            migrationBuilder.CreateIndex(
                name: "IX_Quizzes_CategoryId",
                table: "Quizzes",
                column: "CategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Quizzes_LanguageId",
                table: "Quizzes",
                column: "LanguageId");

            migrationBuilder.CreateIndex(
                name: "IX_Quizzes_UserId",
                table: "Quizzes",
                column: "UserId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "QuizQuestions");

            migrationBuilder.DropTable(
                name: "Quizzes");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250219020333_QuizModelUpdateWithJointTable.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250219020333_QuizModelUpdateWithJointTable")]
    partial class QuizModelUpdateWithJointTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250219043540_VisibilityAttributeInQuestion.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class VisibilityAttributeInQuestion : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "Visibility",
                table: "Questions",
                type: "int",
                nullable: false,
                defaultValue: 0);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "Visibility",
                table: "Questions");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250219043540_VisibilityAttributeInQuestion.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250219043540_VisibilityAttributeInQuestion")]
    partial class VisibilityAttributeInQuestion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250221223318_NewVisibilityProperty.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class NewVisibilityProperty : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250221223318_NewVisibilityProperty.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250221223318_NewVisibilityProperty")]
    partial class NewVisibilityProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250222232647_removedPrimaryKeyFromJointTable.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class removedPrimaryKeyFromJointTable : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropPrimaryKey(
                name: "PK_QuizQuestions",
                table: "QuizQuestions");

            migrationBuilder.DropIndex(
                name: "IX_QuizQuestions_QuizId",
                table: "QuizQuestions");

            migrationBuilder.DropColumn(
                name: "Id",
                table: "QuizQuestions");

            migrationBuilder.AddPrimaryKey(
                name: "PK_QuizQuestions",
                table: "QuizQuestions",
                columns: new[] { "QuizId", "QuestionId" });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropPrimaryKey(
                name: "PK_QuizQuestions",
                table: "QuizQuestions");

            migrationBuilder.AddColumn<int>(
                name: "Id",
                table: "QuizQuestions",
                type: "int",
                nullable: false,
                defaultValue: 0)
                .Annotation("SqlServer:Identity", "1, 1");

            migrationBuilder.AddPrimaryKey(
                name: "PK_QuizQuestions",
                table: "QuizQuestions",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_QuizQuestions_QuizId",
                table: "QuizQuestions",
                column: "QuizId");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250222232647_removedPrimaryKeyFromJointTable.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250222232647_removedPrimaryKeyFromJointTable")]
    partial class removedPrimaryKeyFromJointTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250222233239_DatabaseGeneratedKeyForQuiz.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class DatabaseGeneratedKeyForQuiz : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250222233239_DatabaseGeneratedKeyForQuiz.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250222233239_DatabaseGeneratedKeyForQuiz")]
    partial class DatabaseGeneratedKeyForQuiz
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250223020909_ScoreToQuizQuestion.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class ScoreToQuizQuestion : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "Score",
                table: "QuizQuestions",
                type: "int",
                nullable: false,
                defaultValue: 0);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "Score",
                table: "QuizQuestions");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250223020909_ScoreToQuizQuestion.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250223020909_ScoreToQuizQuestion")]
    partial class ScoreToQuizQuestion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250305052655_QuizSessionAndUserAnswerModelIntegration.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuizSessionAndUserAnswerModelIntegration : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "QuizSessions",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    QuizId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StartTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    EndTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    TotalScore = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QuizSessions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_QuizSessions_Quizzes_QuizId",
                        column: x => x.QuizId,
                        principalTable: "Quizzes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_QuizSessions_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UserAnswers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SessionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    QuestionId = table.Column<int>(type: "int", nullable: false),
                    SubmittedAnswer = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsCorrect = table.Column<bool>(type: "bit", nullable: false),
                    Score = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserAnswers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserAnswers_Questions_QuestionId",
                        column: x => x.QuestionId,
                        principalTable: "Questions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserAnswers_QuizSessions_SessionId",
                        column: x => x.SessionId,
                        principalTable: "QuizSessions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_QuizSessions_QuizId",
                table: "QuizSessions",
                column: "QuizId");

            migrationBuilder.CreateIndex(
                name: "IX_QuizSessions_UserId",
                table: "QuizSessions",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAnswers_QuestionId",
                table: "UserAnswers",
                column: "QuestionId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAnswers_SessionId",
                table: "UserAnswers",
                column: "SessionId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "UserAnswers");

            migrationBuilder.DropTable(
                name: "QuizSessions");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250305052655_QuizSessionAndUserAnswerModelIntegration.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250305052655_QuizSessionAndUserAnswerModelIntegration")]
    partial class QuizSessionAndUserAnswerModelIntegration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250306032554_UserAnswererror.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class UserAnswererror : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_UserAnswers_Questions_QuestionId",
                table: "UserAnswers");

            migrationBuilder.AddColumn<int>(
                name: "SelectedOptionId",
                table: "UserAnswers",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.CreateIndex(
                name: "IX_UserAnswers_SelectedOptionId",
                table: "UserAnswers",
                column: "SelectedOptionId");

            migrationBuilder.AddForeignKey(
                name: "FK_UserAnswers_AnswerOptions_SelectedOptionId",
                table: "UserAnswers",
                column: "SelectedOptionId",
                principalTable: "AnswerOptions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_UserAnswers_Questions_QuestionId",
                table: "UserAnswers",
                column: "QuestionId",
                principalTable: "Questions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_UserAnswers_AnswerOptions_SelectedOptionId",
                table: "UserAnswers");

            migrationBuilder.DropForeignKey(
                name: "FK_UserAnswers_Questions_QuestionId",
                table: "UserAnswers");

            migrationBuilder.DropIndex(
                name: "IX_UserAnswers_SelectedOptionId",
                table: "UserAnswers");

            migrationBuilder.DropColumn(
                name: "SelectedOptionId",
                table: "UserAnswers");

            migrationBuilder.AddForeignKey(
                name: "FK_UserAnswers_Questions_QuestionId",
                table: "UserAnswers",
                column: "QuestionId",
                principalTable: "Questions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250306032554_UserAnswererror.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250306032554_UserAnswererror")]
    partial class UserAnswererror
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250306091418_ush.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class ush : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Universitetet",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    City = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Universitetet", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Drejtimet",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Duration = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UniversitetiId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Drejtimet", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Drejtimet_Universitetet_UniversitetiId",
                        column: x => x.UniversitetiId,
                        principalTable: "Universitetet",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Drejtimet_UniversitetiId",
                table: "Drejtimet",
                column: "UniversitetiId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Drejtimet");

            migrationBuilder.DropTable(
                name: "Universitetet");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250306091418_ush.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250306091418_ush")]
    partial class ush
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250319175348_EmojiAttributeInCategory.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class EmojiAttributeInCategory : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "Emoji",
                table: "QuestionCategories",
                type: "nvarchar(max)",
                nullable: false,
                defaultValue: "");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "Emoji",
                table: "QuestionCategories");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250319175348_EmojiAttributeInCategory.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250319175348_EmojiAttributeInCategory")]
    partial class EmojiAttributeInCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250319201806_emoji.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class emoji : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "Emoji",
                table: "QuestionCategories",
                type: "nvarchar(max)",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "nvarchar(max)");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "Emoji",
                table: "QuestionCategories",
                type: "nvarchar(max)",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "nvarchar(max)",
                oldNullable: true);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250319201806_emoji.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250319201806_emoji")]
    partial class emoji
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/DTOs/Shared/PaginatedResponse.cs">
namespace QuizAPI.DTOs.Shared
{
    public class PaginatedResponse<T>
    {
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalItems { get; set; }
        public int TotalPages { get; set; }
        public IEnumerable<T> Items { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/DTOs/User/FullUserDTO.cs">
using QuizAPI.ManyToManyTables;
using QuizAPI.Models;

namespace QuizAPI.DTOs.User
{
    // Used for getting the users
    public class FullUserDTO
    {
        public Guid Id { get; set; }

        public string ImmutableName { get; set; }
        public string Username { get; set; }

        public string Email { get; set; }

        public DateTime DateRegistered { get; set; }

        public string Role { get; set; }

        public bool IsDeleted { get; set; }

        public DateTime LastLogin { get; set; }

        public int TotalUsers { get; set; }

        public string ProfileImageUrl { get; set; }
    }

    public class UserBasicDTO
    {
        public Guid Id { get; set; }  
        public string Username { get; set; } 
        public string ProfileImageUrl { get; set; } 
    }

}
</file>

<file path="OxygenBackend/QuizAPI/DTOs/User/TemporaryUserCR.cs">
namespace QuizAPI.DTOs.User
{

    // Used for creating a new User
    public class TemporaryUserCR
    {
        public string Username { get; set; }

        public string Email { get; set; }

        public string? Role { get; set; }

        public string Password { get; set; }

    }
}
</file>

<file path="OxygenBackend/QuizAPI/DTOs/User/UserDTO.cs">
namespace QuizAPI.DTOs.User
{
    // Used for logging the User in
    public class UserDTO
    {
        public Guid Id { get; set; }
        public string Email { get; set; }
        public string Username { get; set; }

        public string Role { get; set; }
    }

}
</file>

<file path="OxygenBackend/QuizAPI/ManyToManyTables/PermissionUpdatedAt.cs">
using QuizAPI.Models;

namespace QuizAPI.ManyToManyTables
{
    public class PermissionUpdatedAt
    {
        public int PermissionId { get; set; }
        public Permission Permission { get; set; }

        public int UpdatedAtId { get; set; }
        public UpdatedAt UpdatedAt { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/ManyToManyTables/RoleUpdatedAt.cs">
using QuizAPI.Models;

namespace QuizAPI.ManyToManyTables
{
    public class RoleUpdatedAt
    {
        public int RoleId { get; set; }
        public Role Role { get; set; }

        public int UpdatedAtId { get; set; }
        public UpdatedAt UpdatedAt { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/ManyToManyTables/UserUpdatedAt.cs">
using QuizAPI.Models;

namespace QuizAPI.ManyToManyTables
{
    public class UserUpdatedAt
    {

        public Guid UserId { get; set; }
        public User User { get; set; }

        public int UpdatedAtId { get; set; }
        public UpdatedAt UpdatedAt { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/ApplicationUser/Permission.cs">
using QuizAPI.ManyToManyTables;

namespace QuizAPI.Models
{
    public class Permission
    {
        public int Id { get; set; }

        public string Name { get; set; }

        public bool isActive { get; set; }

        public string Description { get; set; }

        public ICollection<PermissionUpdatedAt> PermissionUpdatedAt { get; set; }

    }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/ApplicationUser/Role.cs">
using QuizAPI.ManyToManyTables;
using System.ComponentModel.DataAnnotations.Schema;

namespace QuizAPI.Models
{

    public class Role
    {
        public int Id { get; set; }

        public string Name { get; set; }

        public bool isActive { get; set; }
        public string Description { get; set; }

        public Guid ConcurrencyStamp { get; set; }

        // Navigation property to the join table
        public ICollection<RoleUpdatedAt> RoleUpdatedAt { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/ApplicationUser/User.cs">
using QuizAPI.ManyToManyTables;
using QuizAPI.Models.Quiz;
using System.ComponentModel.DataAnnotations.Schema;

namespace QuizAPI.Models
{
    public class User
    {
        public Guid Id { get; set; }

        public string ImmutableName { get; set; }
        public string Username { get; set; }

        public string Email { get; set; }

        public string PasswordHash { get; set; } = string.Empty;

        public DateTime DateRegistered { get; set; }

        public int RoleId { get; set; }

        // Navigation property to Role
        public virtual Role Role { get; set; }

        // Navigation property to the collection of UpdatedAtTable
        public ICollection<UserUpdatedAt> UserUpdatedAt { get; set; }

        // Navigation property to the collection of QuizSession
        public ICollection<QuizSession> QuizSessions { get; set; }

        public Guid ConcurrencyStamp { get; set; }

        public bool IsDeleted { get; set; }

        public DateTime LastLogin { get; set; }


        public string? ProfileImageUrl { get; set; }

        public User()
        {
            ConcurrencyStamp = Guid.NewGuid();
        }

    }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/Drejtimi.cs">
using System.Text.Json.Serialization;

namespace QuizAPI.Models
{
    public class Drejtimi
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public string Duration { get; set; }

        public int UniversitetiId { get; set; }

        [JsonIgnore]
        public Universiteti Universiteti { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/Quiz/QuizSession.cs">
using System.ComponentModel.DataAnnotations;

namespace QuizAPI.Models.Quiz
{
    public class QuizSession
    {
        [Key]
        public Guid Id { get; set; }
        public int QuizId { get; set; }
        public Guid UserId { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime? EndTime { get; set; }
        public int TotalScore { get; set; }
        public Quiz Quiz { get; set; } 
        public User User { get; set; }
        public ICollection<UserAnswer> UserAnswers { get; set; } = new List<UserAnswer>();
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/Universiteti.cs">
namespace QuizAPI.Models
{
    public class Universiteti
    {
        public int Id { get; set; }

        public string Name { get; set; }

        public string City { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/UpdatedAt.cs">
using QuizAPI.ManyToManyTables;
using System.ComponentModel.DataAnnotations.Schema;

namespace QuizAPI.Models
{
    public class UpdatedAt
    {
        public int Id { get; set; }

        public string Username {  get; set; }

        public string? Description { get; set; }

        public Guid UserId { get; set; }
        public virtual User User{ get; set; }

        public DateTime ModifiedAt { get; set; } = DateTime.UtcNow;

        // Navigation property to the join table
        public ICollection<RoleUpdatedAt> RoleUpdatedAt { get; set; }
        public ICollection<PermissionUpdatedAt> PermissionUpdatedAt { get; set; }
        public ICollection<UserUpdatedAt> UserUpdatedAt { get; set; }


    }
}
</file>

<file path="OxygenBackend/QuizAPI/Properties/launchSettings.json">
{
  "profiles": {
    "QuizAPI": {
      "commandName": "Project",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      },
      "dotnetRunMessages": true,
      "applicationUrl": "https://localhost:7153;http://localhost:5221"
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "Docker": {
      "commandName": "Docker",
      "launchBrowser": true,
      "launchUrl": "{Scheme}://{ServiceHost}:{ServicePort}/swagger",
      "environmentVariables": {
        "ASPNETCORE_URLS": "https://+:443;http://+:80"
      },
      "publishAllPorts": true,
      "useSSL": true
    }
  },
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:13116",
      "sslPort": 44398
    }
  }
}
</file>

<file path="OxygenBackend/QuizAPI/Repositories/Question/QuestionRepository.cs">
/*using QuizAPI.Data;
using QuizAPI.DTOs.Question;
using QuizAPI.Models;

namespace QuizAPI.Repositories.Question
{
    public class QuestionRepository : IQuestionRepository
    {
        private readonly ApplicationDbContext _context;

        public QuestionRepository(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<IEnumerable<QuestionDTO>> GetQuestionsAsync(int page, int pageSize, string? searchTerm, string? category)
        {
            var query = _context.Questions.AsQueryable();

            if (!string.IsNullOrEmpty(searchTerm) && searchTerm != "undefined")
                query = query.Where(q => q.Text.Contains(searchTerm));

            if (!string.IsNullOrEmpty(category) && category != "null" && category != "All categories")
                query = query.Where(q => q.Category.Name == category);

            var totalQuestions = await query.CountAsync();

            return await query
                .OrderBy(q => q.CreatedAt)
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .Select(q => new QuestionDTO
                {
                    ID = q.Id,
                    Text = q.Text,
                    Difficulty = q.Difficulty,
                    Category = q.Category.Name,
                    TotalQuestions = totalQuestions,
                    AnswerOptions = q.AnswerOptions.Select(ao => new AnswerOptionDTO
                    {
                        ID = ao.Id,
                        Text = ao.Text,
                        IsCorrect = ao.IsCorrect
                    }).ToList()
                })
                .ToListAsync();
        }

        public async Task<Question?> GetQuestionByIdAsync(int id)
        {
            return await _context.Questions.Include(q => q.AnswerOptions).FirstOrDefaultAsync(q => q.Id == id);
        }

        public async Task AddQuestionAsync(Question question)
        {
            _context.Questions.Add(question);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateQuestionAsync(Question question)
        {
            _context.Questions.Update(question);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteQuestionAsync(int id)
        {
            var question = await _context.Questions.FindAsync(id);
            if (question != null)
            {
                _context.Questions.Remove(question);
                await _context.SaveChangesAsync();
            }
        }

        public async Task<bool> QuestionExistsAsync(int id)
        {
            return await _context.Questions.AnyAsync(q => q.Id == id);
        }
    }
}
*/
</file>

<file path="OxygenBackend/QuizAPI/Services/DashboardService.cs">
using QuizAPI.Data;

namespace QuizAPI.Services
{
    public class DashboardService
    {

        private readonly ApplicationDbContext _context;

        public DashboardService(ApplicationDbContext context)
        {
            _context = context;
        }

        // Generic method to get the count of any entity
        public int GetTotalCount<T>() where T : class
        {
            // Use reflection to get the DbSet for the specific type
            var dbSet = _context.Set<T>();
            return dbSet.Count();
        }

    }
}
</file>

<file path="OxygenBackend/QuizAPI/Services/DataSeeder.cs">
using Bogus;
using QuizAPI.Models;
using System;
using System.Collections.Generic;
using System.Linq;

namespace QuizAPI.Data
{
    public class DataSeeder
    {
        private readonly ApplicationDbContext _context;

        public DataSeeder(ApplicationDbContext context)
        {
            _context = context;
        }

        public void SeedData()
        {
        }

  
        
    }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ["./tsconfig.node.json", "./tsconfig.app.json"],
      tsconfigRootDir: import.meta.dirname,
    },
  },
});
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from "eslint-plugin-react";

export default tseslint.config({
  // Set the react version
  settings: { react: { version: "18.3" } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs["jsx-runtime"].rules,
  },
});
```
</file>

<file path="src/common/background-path.tsx">
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";

function FloatingPaths({ position }: { position: number }) {
  const paths = Array.from({ length: 36 }, (_, i) => ({
    id: i,
    d: `M-${380 - i * 5 * position} -${189 + i * 6}C-${
      380 - i * 5 * position
    } -${189 + i * 6} -${312 - i * 5 * position} ${216 - i * 6} ${
      152 - i * 5 * position
    } ${343 - i * 6}C${616 - i * 5 * position} ${470 - i * 6} ${
      684 - i * 5 * position
    } ${875 - i * 6} ${684 - i * 5 * position} ${875 - i * 6}`,
    color: `rgba(15,23,42,${0.1 + i * 0.03})`,
    width: 0.5 + i * 0.03,
  }));

  return (
    <div className="absolute inset-0 pointer-events-none overflow-hidden">
      <svg
        className="w-full h-full text-slate-950 dark:text-white"
        viewBox="0 0 696 316"
        fill="none"
      >
        <title>Background Paths</title>
        {paths.map((path) => (
          <motion.path
            key={path.id}
            d={path.d}
            stroke="currentColor"
            strokeWidth={path.width}
            strokeOpacity={0.1 + path.id * 0.03}
            initial={{ pathLength: 0.3, opacity: 0.6 }}
            animate={{
              pathLength: 1,
              opacity: [0.3, 0.6, 0.3],
              pathOffset: [0, 1, 0],
            }}
            transition={{
              duration: 20 + Math.random() * 10,
              repeat: Number.POSITIVE_INFINITY,
              ease: "linear",
            }}
          />
        ))}
      </svg>
    </div>
  );
}

export default function BackgroundPaths({
  title = "Background Paths",
}: {
  title?: string;
}) {
  const words = title.split(" ");

  return (
    <div className="relative min-h-screen w-full flex items-center justify-center overflow-hidden bg-background overflow-hidden">
      <div className="absolute inset-0">
        <FloatingPaths position={1} />
        <FloatingPaths position={-1} />
      </div>

      <div className="relative z-10 container mx-auto px-4 md:px-6 text-center">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 2 }}
          className="max-w-4xl mx-auto"
        >
          <h1 className="text-5xl sm:text-7xl md:text-8xl font-bold mb-8 tracking-tighter">
            {words.map((word, wordIndex) => (
              <span key={wordIndex} className="inline-block mr-4 last:mr-0">
                {word.split("").map((letter, letterIndex) => (
                  <motion.span
                    key={`${wordIndex}-${letterIndex}`}
                    initial={{ y: 100, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{
                      delay: wordIndex * 0.1 + letterIndex * 0.03,
                      type: "spring",
                      stiffness: 150,
                      damping: 25,
                    }}
                    className="inline-block text-transparent bg-clip-text 
                                        bg-gradient-to-r from-neutral-900 to-neutral-700/80 
                                        dark:from-white dark:to-white/80"
                  >
                    {letter}
                  </motion.span>
                ))}
              </span>
            ))}
          </h1>

          <div
            className="inline-block group relative bg-gradient-to-b from-black/10 to-white/10 
                        dark:from-white/10 dark:to-black/10 p-px rounded-2xl backdrop-blur-lg 
                        overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300"
          >
            <Button
              variant="ghost"
              className="rounded-[1.15rem] px-8 py-6 text-lg font-semibold backdrop-blur-md 
                            bg-white/95 hover:bg-white/100 dark:bg-black/95 dark:hover:bg-black/100 
                            text-black dark:text-white transition-all duration-300 
                            group-hover:-translate-y-0.5 border border-black/10 dark:border-white/10
                            hover:shadow-md dark:hover:shadow-neutral-800/50 overflow-hidden"
            >
              <span className="opacity-90 group-hover:opacity-100 transition-opacity">
                Discover Excellence
              </span>
              <span
                className="ml-3 opacity-70 group-hover:opacity-100 group-hover:translate-x-1.5 
                                transition-all duration-300"
              >
                →
              </span>
            </Button>
          </div>
        </motion.div>
      </div>
    </div>
  );
}
</file>

<file path="src/common/BesimCard.tsx">
import React from "react";
import BesimDina from "../assets/BesimDina.png";
import { cn } from "@/utils/cn";

interface BesimCardProps {
  className?: string;
}

export const BesimCard: React.FC<BesimCardProps> = ({ className }) => {
  return (
    <div
      className={cn(
        "relative w-[500px] h-[600px] flex items-center justify-center z-10 border-4 border-transparent bg-gradient-to-r from-foreground via-[var(--muted)] to-foreground p-[2px] rounded-xl transition-transform transform hover:rotate-3 hover:scale-105 hover:shadow-2xl",
        className
      )}
    >
      <div className="w-full h-full bg-foreground rounded-xl shadow-lg transition-none">
        <img
          src={BesimDina}
          alt="Besim Dina"
          className="w-full h-full object-cover absolute right-[-158px] translate-x-[30px] z-12 pointer-events-none"
        />
      </div>
    </div>
  );
};
</file>

<file path="src/common/Card.tsx">
import React from "react";

interface CardProps {
  className?: string;
  children?: React.ReactNode;
}

export const Card: React.FC<CardProps> = ({ className, children }) => {
  return (
    <div
      className={`relative drop-shadow-xl overflow-hidden rounded-xl ${className}`}
    >
      <div className="relative p-5 py-20 flex items-center flex-col justify-center gap-5 text-foreground z-[1] opacity-100 rounded-xl inset-0.5 bg-muted">
        {children}
      </div>
      <div className="absolute w-full h-full bg-background inset-0"></div>
    </div>
  );
};
</file>

<file path="src/common/Custom-Drawer/drawer-header.tsx">
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Divider } from "../Divider";
import { useUser } from "@/lib/Auth";

export const DrawerHeaderContent = () => {
  const { data: user } = useUser();

  return (
    <>
      <div className="flex justify-start gap-4 items-center font-bold my-6 ">
        <Avatar className="cursor-pointer ">
          <AvatarImage src="https://github.com/shadcn.png" />
          <AvatarFallback>CN</AvatarFallback>
        </Avatar>
        {user ? user.username : "User"}
      </div>
      <Divider orientation="horizontal" thickness="1px" length="100%" />
    </>
  );
};
</file>

<file path="src/common/Custom-Drawer/drawer.links.tsx">
import { NavLink } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { CgProfile } from "react-icons/cg";
import { LiaUserFriendsSolid } from "react-icons/lia";
import { Settings } from "lucide-react";
import { RiDashboard2Fill } from "react-icons/ri";

export const DrawerLinks = ({
  close,
  isAdmin,
}: {
  close: () => void;
  isAdmin: boolean;
}) => (
  <>
    <NavLink to={"/my-profile"} onClick={close} className="w-full">
      <Button variant={"drawer"} size={"drawerSize"} className="mt-6 w-full">
        <CgProfile className="text-sm" /> My Profile
      </Button>
    </NavLink>

    <Button
      variant={"drawer"}
      size={"drawerSize"}
      className="w-full"
      onClick={close}
    >
      <LiaUserFriendsSolid className="text-sm" /> Friends
    </Button>

    <NavLink to={"/settings"} onClick={close} className="w-full">
      <Button variant={"drawer"} size={"drawerSize"} className="w-full">
        <Settings className="text-sm" size={14} /> Settings
      </Button>
    </NavLink>

    {isAdmin && (
      <NavLink to="/dashboard" onClick={close} className="w-full">
        <Button variant={"drawer"} size={"drawerSize"} className="w-full">
          <RiDashboard2Fill className="text-sm" /> Dashboard
        </Button>
      </NavLink>
    )}
  </>
);
</file>

<file path="src/common/Custom-Drawer/DrawerFilled.tsx">
import {
  Drawer,
  DrawerContent,
  DrawerFooter,
  DrawerHeader,
  DrawerTrigger,
} from "@/components/ui/drawer";
import { useUser } from "@/lib/Auth";
import { useLogout } from "@/lib/Auth";
import { useDisclosure } from "@/hooks/use-disclosure";
import { ProfileButton } from "./profile-button";
import { DrawerHeaderContent } from "./drawer-header";
import { DrawerLinks } from "./drawer.links";
import { Button } from "@/components/ui/button";
import { DrawerClose } from "@/components/ui/drawer";
import { NavLink } from "react-router-dom";

export const DrawerFilled = () => {
  const isAdmin = true;
  const { data: user } = useUser();
  const logout = useLogout();
  const { isOpen, close, toggle } = useDisclosure();

  return (
    <>
      {user ? (
        <Drawer open={isOpen} onOpenChange={toggle}>
          <DrawerTrigger asChild>
            <ProfileButton />
          </DrawerTrigger>
          <DrawerContent className="bg-background text-foreground w-[200px] flex flex-col justify-between">
            <DrawerHeader>
              <DrawerHeaderContent />
              <DrawerLinks close={close} isAdmin={isAdmin} />
            </DrawerHeader>
            <DrawerFooter>
              <DrawerClose asChild>
                <Button
                  className="rounded hover:bg-[#FE2A2A] hover:text-white w-full"
                  onClick={() => {
                    logout.mutate();
                    close();
                  }}
                  variant="outline"
                >
                  Logout
                </Button>
              </DrawerClose>
            </DrawerFooter>
          </DrawerContent>
        </Drawer>
      ) : (
        <div className="flex gap-4 items-center text-foreground">
          <NavLink to={"/login"}>
            <Button
              className="bg-[#4B3EF3] text-white custom-button"
              variant={"default"}
            >
              Login
            </Button>
          </NavLink>
          or
          <NavLink to={"/signup"}>
            <Button variant={"outline"}>Signup</Button>
          </NavLink>
        </div>
      )}
    </>
  );
};
</file>

<file path="src/common/Custom-Drawer/profile-button.tsx">
import React from "react";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";

type ProfileButtonProps = {
  onClick?: () => void;
};

export const ProfileButton = React.forwardRef<
  HTMLButtonElement,
  ProfileButtonProps
>(({ onClick }, ref) => (
  <Button
    ref={ref}
    onClick={onClick}
    variant={"default"}
    size={"none"}
    className="flex items-center rounded-[2rem] gap-3 py-2 h-12 px-4"
  >
    My Profile
    <Avatar className="cursor-pointer">
      <AvatarImage src="https://github.com/shadcn.png" />
      <AvatarFallback>CN</AvatarFallback>
    </Avatar>
  </Button>
));

ProfileButton.displayName = "ProfileButton";
</file>

<file path="src/common/Divider.tsx">
import React from "react";
import { cn } from "@/utils/cn";

interface DividerProps {
  orientation?: "horizontal" | "vertical";
  thickness?: string;
  color?: string;
  length?: string;
  className?: string;
}

export const Divider: React.FC<DividerProps> = ({
  orientation = "horizontal",
  thickness = "1px",
  color = "var(--divider)",
  length = "100%",
  className,
}) => {
  const isHorizontal = orientation === "horizontal";
  return (
    <div
      style={{
        width: isHorizontal ? length : thickness,
        height: isHorizontal ? thickness : length,
        background: color,
        margin: isHorizontal ? `${thickness} 0` : `0 ${thickness}`,
      }}
      className={cn("bg-[var(--divider)] z-10", className)}
    />
  );
};
</file>

<file path="src/common/Effect-Related/background-squares.tsx">
import { useTheme } from "@/components/ui";
import React, { useRef, useEffect, useState } from "react";

type CanvasStrokeStyle = string | CanvasGradient | CanvasPattern;

interface GridOffset {
  x: number;
  y: number;
}

interface SquaresProps {
  direction?: "diagonal" | "up" | "right" | "down" | "left";
  speed?: number;
  borderColor?: CanvasStrokeStyle;
  squareSize?: number;
  hoverFillColor?: CanvasStrokeStyle;
}

const Squares: React.FC<SquaresProps> = ({
  direction = "right",
  speed = 1,
  borderColor = "#999",
  squareSize = 40,
  hoverFillColor = "#222",
}) => {
  const { theme } = useTheme();

  const startColor =
    theme === "dark" ? "rgba(3, 3, 3, 0)" : "rgba(255, 255, 255, 0)";
  const endColor = theme === "dark" ? "#000000" : "#ffffff";

  const canvasRef = useRef<HTMLCanvasElement>(null);
  const requestRef = useRef<number | null>(null);
  const numSquaresX = useRef<number>(0);
  const numSquaresY = useRef<number>(0);
  const gridOffset = useRef<GridOffset>({ x: 0, y: 0 });
  const [hoveredSquare, setHoveredSquare] = useState<GridOffset | null>(null);

  useEffect(() => {
    const canvas = canvasRef.current;

    if (!canvas) return;

    const ctx = canvas.getContext("2d");

    const resizeCanvas = () => {
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
      numSquaresX.current = Math.ceil(canvas.width / squareSize) + 1;
      numSquaresY.current = Math.ceil(canvas.height / squareSize) + 1;
    };

    window.addEventListener("resize", resizeCanvas);
    resizeCanvas();

    const drawGrid = () => {
      if (!ctx) return;

      ctx.clearRect(0, 0, canvas.width, canvas.height);

      const startX = Math.floor(gridOffset.current.x / squareSize) * squareSize;
      const startY = Math.floor(gridOffset.current.y / squareSize) * squareSize;

      for (let x = startX; x < canvas.width + squareSize; x += squareSize) {
        for (let y = startY; y < canvas.height + squareSize; y += squareSize) {
          const squareX = x - (gridOffset.current.x % squareSize);
          const squareY = y - (gridOffset.current.y % squareSize);

          if (
            hoveredSquare &&
            Math.floor((x - startX) / squareSize) === hoveredSquare.x &&
            Math.floor((y - startY) / squareSize) === hoveredSquare.y
          ) {
            ctx.fillStyle = hoverFillColor;
            ctx.fillRect(squareX, squareY, squareSize, squareSize);
          }

          ctx.strokeStyle = borderColor;
          ctx.strokeRect(squareX, squareY, squareSize, squareSize);
        }
      }

      const gradient = ctx.createRadialGradient(
        canvas.width / 2,
        canvas.height / 2,
        0,
        canvas.width / 2,
        canvas.height / 2,
        Math.sqrt(Math.pow(canvas.width, 2) + Math.pow(canvas.height, 2)) / 2.2
      );
      gradient.addColorStop(0, startColor);
      gradient.addColorStop(1, endColor);

      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
    };

    const updateAnimation = () => {
      const effectiveSpeed = Math.max(speed, 0.1);
      switch (direction) {
        case "right":
          gridOffset.current.x =
            (gridOffset.current.x - effectiveSpeed + squareSize) % squareSize;
          break;
        case "left":
          gridOffset.current.x =
            (gridOffset.current.x + effectiveSpeed + squareSize) % squareSize;
          break;
        case "up":
          gridOffset.current.y =
            (gridOffset.current.y + effectiveSpeed + squareSize) % squareSize;
          break;
        case "down":
          gridOffset.current.y =
            (gridOffset.current.y - effectiveSpeed + squareSize) % squareSize;
          break;
        case "diagonal":
          gridOffset.current.x =
            (gridOffset.current.x - effectiveSpeed + squareSize) % squareSize;
          gridOffset.current.y =
            (gridOffset.current.y - effectiveSpeed + squareSize) % squareSize;
          break;
        default:
          break;
      }

      drawGrid();
      requestRef.current = requestAnimationFrame(updateAnimation);
    };

    // Track mouse hover
    const handleMouseMove = (event: MouseEvent) => {
      const rect = canvas.getBoundingClientRect();
      const mouseX = event.clientX - rect.left;
      const mouseY = event.clientY - rect.top;

      const startX = Math.floor(gridOffset.current.x / squareSize) * squareSize;
      const startY = Math.floor(gridOffset.current.y / squareSize) * squareSize;

      const hoveredSquareX = Math.floor(
        (mouseX + gridOffset.current.x - startX) / squareSize
      );
      const hoveredSquareY = Math.floor(
        (mouseY + gridOffset.current.y - startY) / squareSize
      );

      setHoveredSquare({ x: hoveredSquareX, y: hoveredSquareY });
    };

    const handleMouseLeave = () => {
      setHoveredSquare(null);
    };

    canvas.addEventListener("mousemove", handleMouseMove);
    canvas.addEventListener("mouseleave", handleMouseLeave);

    requestRef.current = requestAnimationFrame(updateAnimation);

    return () => {
      window.removeEventListener("resize", resizeCanvas);
      if (requestRef.current) cancelAnimationFrame(requestRef.current);
      canvas.removeEventListener("mousemove", handleMouseMove);
      canvas.removeEventListener("mouseleave", handleMouseLeave);
    };
  }, [
    direction,
    speed,
    borderColor,
    hoverFillColor,
    hoveredSquare,
    squareSize,
  ]);

  return (
    <canvas
      ref={canvasRef}
      className="absolute top-0 left-0 z-0 w-full h-screen border-none block"
    ></canvas>
  );
};

export default Squares;
</file>

<file path="src/common/Effect-Related/word-switching.tsx">
import React, {
  forwardRef,
  useCallback,
  useEffect,
  useImperativeHandle,
  useMemo,
  useState,
} from "react";
import { motion, AnimatePresence, Transition } from "framer-motion";

function cn(...classes: (string | undefined | null | boolean)[]): string {
  return classes.filter(Boolean).join(" ");
}

export interface RotatingTextRef {
  next: () => void;
  previous: () => void;
  jumpTo: (index: number) => void;
  reset: () => void;
}

export interface RotatingTextProps
  extends Omit<
    React.ComponentPropsWithoutRef<typeof motion.span>,
    "children" | "transition" | "initial" | "animate" | "exit"
  > {
  texts: string[];
  transition?: Transition;
  initial?: any;
  animate?: any;
  exit?: any;
  animatePresenceMode?: "sync" | "wait";
  animatePresenceInitial?: boolean;
  rotationInterval?: number;
  staggerDuration?: number;
  staggerFrom?: "first" | "last" | "center" | "random" | number;
  loop?: boolean;
  auto?: boolean;
  splitBy?: string;
  onNext?: (index: number) => void;
  mainClassName?: string;
  splitLevelClassName?: string;
  elementLevelClassName?: string;
}

const RotatingText = forwardRef<RotatingTextRef, RotatingTextProps>(
  (
    {
      texts,
      transition = { type: "spring", damping: 25, stiffness: 300 },
      initial = { y: "100%", opacity: 0 },
      animate = { y: 0, opacity: 1 },
      exit = { y: "-120%", opacity: 0 },
      animatePresenceMode = "wait",
      animatePresenceInitial = false,
      rotationInterval = 2000,
      staggerDuration = 0,
      staggerFrom = "first",
      loop = true,
      auto = true,
      splitBy = "characters",
      onNext,
      mainClassName,
      splitLevelClassName,
      elementLevelClassName,
      ...rest
    },
    ref
  ) => {
    const [currentTextIndex, setCurrentTextIndex] = useState<number>(0);

    const splitIntoCharacters = (text: string): string[] => {
      if (typeof Intl !== "undefined" && (Intl as any).Segmenter) {
        const segmenter = new (Intl as any).Segmenter("en", {
          granularity: "grapheme",
        });
        return Array.from(
          segmenter.segment(text),
          (segment: any) => segment.segment
        );
      }
      return Array.from(text);
    };

    const elements = useMemo(() => {
      const currentText: string = texts[currentTextIndex];
      if (splitBy === "characters") {
        const words = currentText.split(" ");
        return words.map((word, i) => ({
          characters: splitIntoCharacters(word),
          needsSpace: i !== words.length - 1,
        }));
      }
      if (splitBy === "words") {
        return currentText.split(" ").map((word, i, arr) => ({
          characters: [word],
          needsSpace: i !== arr.length - 1,
        }));
      }
      if (splitBy === "lines") {
        return currentText.split("\n").map((line, i, arr) => ({
          characters: [line],
          needsSpace: i !== arr.length - 1,
        }));
      }

      return currentText.split(splitBy).map((part, i, arr) => ({
        characters: [part],
        needsSpace: i !== arr.length - 1,
      }));
    }, [texts, currentTextIndex, splitBy]);

    const getStaggerDelay = useCallback(
      (index: number, totalChars: number): number => {
        const total = totalChars;
        if (staggerFrom === "first") return index * staggerDuration;
        if (staggerFrom === "last")
          return (total - 1 - index) * staggerDuration;
        if (staggerFrom === "center") {
          const center = Math.floor(total / 2);
          return Math.abs(center - index) * staggerDuration;
        }
        if (staggerFrom === "random") {
          const randomIndex = Math.floor(Math.random() * total);
          return Math.abs(randomIndex - index) * staggerDuration;
        }
        return Math.abs((staggerFrom as number) - index) * staggerDuration;
      },
      [staggerFrom, staggerDuration]
    );

    const handleIndexChange = useCallback(
      (newIndex: number) => {
        setCurrentTextIndex(newIndex);
        if (onNext) onNext(newIndex);
      },
      [onNext]
    );

    const next = useCallback(() => {
      const nextIndex =
        currentTextIndex === texts.length - 1
          ? loop
            ? 0
            : currentTextIndex
          : currentTextIndex + 1;
      if (nextIndex !== currentTextIndex) {
        handleIndexChange(nextIndex);
      }
    }, [currentTextIndex, texts.length, loop, handleIndexChange]);

    const previous = useCallback(() => {
      const prevIndex =
        currentTextIndex === 0
          ? loop
            ? texts.length - 1
            : currentTextIndex
          : currentTextIndex - 1;
      if (prevIndex !== currentTextIndex) {
        handleIndexChange(prevIndex);
      }
    }, [currentTextIndex, texts.length, loop, handleIndexChange]);

    const jumpTo = useCallback(
      (index: number) => {
        const validIndex = Math.max(0, Math.min(index, texts.length - 1));
        if (validIndex !== currentTextIndex) {
          handleIndexChange(validIndex);
        }
      },
      [texts.length, currentTextIndex, handleIndexChange]
    );

    const reset = useCallback(() => {
      if (currentTextIndex !== 0) {
        handleIndexChange(0);
      }
    }, [currentTextIndex, handleIndexChange]);

    useImperativeHandle(
      ref,
      () => ({
        next,
        previous,
        jumpTo,
        reset,
      }),
      [next, previous, jumpTo, reset]
    );

    useEffect(() => {
      if (!auto) return;
      const intervalId = setInterval(next, rotationInterval);
      return () => clearInterval(intervalId);
    }, [next, rotationInterval, auto]);

    return (
      <motion.span
        className={cn(
          "flex flex-wrap whitespace-pre-wrap relative",
          mainClassName
        )}
        {...rest}
        layout
        transition={transition}
      >
        <span className="sr-only">{texts[currentTextIndex]}</span>
        <AnimatePresence
          mode={animatePresenceMode}
          initial={animatePresenceInitial}
        >
          <motion.div
            key={currentTextIndex}
            className={cn(
              splitBy === "lines"
                ? "flex flex-col w-full"
                : "flex flex-wrap whitespace-pre-wrap relative"
            )}
            layout
            aria-hidden="true"
          >
            {elements.map((wordObj, wordIndex, array) => {
              const previousCharsCount = array
                .slice(0, wordIndex)
                .reduce((sum, word) => sum + word.characters.length, 0);
              return (
                <span
                  key={wordIndex}
                  className={cn("inline-flex", splitLevelClassName)}
                >
                  {wordObj.characters.map((char, charIndex) => (
                    <motion.span
                      key={charIndex}
                      initial={initial}
                      animate={animate}
                      exit={exit}
                      transition={{
                        ...transition,
                        delay: getStaggerDelay(
                          previousCharsCount + charIndex,
                          array.reduce(
                            (sum, word) => sum + word.characters.length,
                            0
                          )
                        ),
                      }}
                      className={cn("inline-block", elementLevelClassName)}
                    >
                      {char}
                    </motion.span>
                  ))}
                  {wordObj.needsSpace && (
                    <span className="whitespace-pre"> </span>
                  )}
                </span>
              );
            })}
          </motion.div>
        </AnimatePresence>
      </motion.span>
    );
  }
);

RotatingText.displayName = "RotatingText";
export default RotatingText;
</file>

<file path="src/common/Go-Back-Button.tsx">
import { useNavigate, useLocation } from "react-router-dom";
import { cn } from "@/utils/cn";
import { Button } from "@/components/ui/button";

interface BackButtonProps {
  className?: string;
  variant?: "default" | "normal";
}

export const GoBackButton: React.FC<BackButtonProps> = ({
  className,
  variant = "default",
}) => {
  const navigate = useNavigate();
  const location = useLocation();

  const goBack = () => {
    if (location.pathname.includes("redirect")) {
      navigate(-2);
    } else {
      navigate(-1);
    }
  };

  if (variant === "normal") {
    return (
      <Button
        onClick={goBack}
        variant="outline"
        className={cn(
          "bg-primary text-white hover:bg-primary/70 rounded-md mt-4",
          className
        )}
      >
        Go Back
      </Button>
    );
  }

  return (
    <button
      type="button"
      className={cn(
        "bg-muted shadow-md text-center w-48 rounded-xl h-9 font-sans relative text-foreground text-sm font-semibold group",
        className
      )}
      onClick={goBack}
    >
      <div className="bg-primary rounded-xl h-7 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500">
        <svg
          width="25px"
          height="25px"
          viewBox="0 0 1024 1024"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fill="white"
            d="M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z"
          ></path>
          <path
            fill="white"
            d="m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z"
          ></path>
        </svg>
      </div>
      <p className="translate-x-2 text-foreground">Go Back</p>
    </button>
  );
};
</file>

<file path="src/common/Header.tsx">
import { useState, useEffect } from "react";
import { DrawerFilled } from "./Custom-Drawer/DrawerFilled";
import { NavLink } from "react-router-dom";
import { HeaderComponent } from "./HeaderComponent";
import { ModeToggle } from "@/components/ui/mode-toggle";
import { Divider } from "./Divider";
import HoverEffect from "./HoverEffect";

interface HeaderProps {
  BackgroundColor?: boolean;
}

const Header = ({ BackgroundColor }: HeaderProps) => {
  const [hidden, setHidden] = useState(false);

  useEffect(() => {
    let lastScrollY = window.scrollY;

    const handleScroll = () => {
      if (window.scrollY > lastScrollY) {
        setHidden(true);
      } else {
        setHidden(false);
      }
      lastScrollY = window.scrollY;
    };

    window.addEventListener("scroll", handleScroll);

    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  return (
    <HeaderComponent
      className={`fixed top-0 left-0  right-0 z-30 text-lg shadow-md h-16 grid grid-cols-5 items-center px-4 transition-transform duration-400 ${
        hidden ? "-translate-y-full" : "translate-y-0"
      } ${BackgroundColor ? "bg-background" : "bg-transparent"}`}
    >
      <div className="col-span-1">
        <ul className="flex gap-4 font-bold">
          <NavLink
            to="/"
            className={({ isActive }) =>
              isActive ? "text-foreground" : "hover:text-foreground/80"
            }
          >
            {({ isActive }) => (
              <HoverEffect isActive={isActive}>
                <li className="text-foreground cursor-pointer">Home</li>
              </HoverEffect>
            )}
          </NavLink>

          <NavLink
            to="/about-us"
            className={({ isActive }) =>
              isActive ? "text-foreground" : "hover:text-foreground/80"
            }
          >
            {({ isActive }) => (
              <HoverEffect isActive={isActive}>
                <li className="text-foreground cursor-pointer">About Us</li>
              </HoverEffect>
            )}
          </NavLink>
        </ul>
      </div>
      <div className="col-span-3 flex justify-center">
        <p className="text-3xl font-bold text-foreground">OXYGEN</p>
      </div>
      <div className="col-span-1 flex justify-end items-center gap-3">
        <ModeToggle className="rounded-[2rem] px-2" />
        <Divider orientation="vertical" thickness="1px" length="24px" />
        <DrawerFilled />
      </div>
    </HeaderComponent>
  );
};

export default Header;
</file>

<file path="src/common/HeaderComponent.tsx">
import React from "react";

interface HeaderComponentProps {
  children?: React.ReactNode;
  className?: string;
}

export const HeaderComponent: React.FC<HeaderComponentProps> = ({
  children,
  className,
}) => {
  return (
    <header
      className={`flex justify-between items-center bg-background ${className}`}
    >
      {children}
    </header>
  );
};
</file>

<file path="src/common/HoverEffect.tsx">
import React from "react";

type HoverEffectProps = {
  children: React.ReactNode;
  isActive?: boolean;
};

const HoverEffect: React.FC<HoverEffectProps> = ({
  children,
  isActive = false,
}) => {
  return (
    <span
      className={`relative after:content-[''] after:absolute after:left-1/2 after:bottom-0 after:w-full after:h-[2px] after:bg-foreground after:transform after:origin-center after:-translate-x-1/2 after:scale-x-0 after:transition-transform after:duration-300 ${
        isActive ? "after:scale-x-100" : "hover:after:scale-x-100"
      }`}
    >
      {children}
    </span>
  );
};

export default HoverEffect;
</file>

<file path="src/common/InputField.tsx">
import React, { InputHTMLAttributes } from "react";
import { Input } from "@/components/ui/form";
import { Label } from "@/components/ui/form/label";

interface InputFieldProps extends InputHTMLAttributes<HTMLInputElement> {
  label: string;
  placeholder: string;
  type: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
}

const InputField: React.FC<InputFieldProps> = ({
  label,
  placeholder,
  type,
  value,
  onChange,
  id,
  name,
  ...props
}) => (
  <div className="grid w-full gap-1.5">
    <Label htmlFor={id} className="text-lg">
      {label}
    </Label>
    <Input
      id={id}
      name={name}
      placeholder={placeholder}
      type={type}
      value={value}
      onChange={onChange}
      className="rounded shadow-md text-foreground py-5 bg-background"
      {...props}
    />
  </div>
);

export default InputField;
</file>

<file path="src/common/Notifications/__tests__/notifications.test.ts">
import { renderHook, act } from '@testing-library/react';

import { useNotifications, Notification } from '../Notifications-store';

test('should add and remove notifications', () => {
  const { result } = renderHook(() => useNotifications());

  expect(result.current.notifications.length).toBe(0);

  const notification: Notification = {
    id: '123',
    title: 'Hello World',
    type: 'info',
    message: 'This is a notification',
  };

  act(() => {
    result.current.addNotification(notification);
  });

  expect(result.current.notifications).toContainEqual(notification);

  act(() => {
    result.current.dismissNotification(notification.id);
  });

  expect(result.current.notifications).not.toContainEqual(notification);
});
</file>

<file path="src/common/Notifications/index.ts">
export * from './Notifications';
export * from './Notifications-store';
</file>

<file path="src/common/Notifications/notification.stories.tsx">
import { Meta, StoryObj } from '@storybook/react';

import { Notification } from './Notification';

const meta: Meta<typeof Notification> = {
  title: 'Components/Notifications',
  component: Notification,
  parameters: {
    controls: { expanded: true },
  },
};

export default meta;

type Story = StoryObj<typeof Notification>;

export const Info: Story = {
  args: {
    notification: {
      id: '1',
      type: 'info',
      title: 'Hello Info',
      message: 'This is info notification',
    },
    onDismiss: (id :string) => alert(`Dismissing Notification with id: ${id}`),
  },
};

export const Success: Story = {
  args: {
    notification: {
      id: '1',
      type: 'success',
      title: 'Hello Success',
      message: 'This is success notification',
    },
    onDismiss: (id :string) => alert(`Dismissing Notification with id: ${id}`),
  },
};

export const Warning: Story = {
  args: {
    notification: {
      id: '1',
      type: 'warning',
      title: 'Hello Warning',
      message: 'This is warning notification',
    },
    onDismiss: (id :string) => alert(`Dismissing Notification with id: ${id}`),
  },
};

export const Error: Story = {
  args: {
    notification: {
      id: '1',
      type: 'error',
      title: 'Hello Error',
      message: 'This is error notification',
    },
    onDismiss: (id :string) => alert(`Dismissing Notification with id: ${id}`),
  },
};
</file>

<file path="src/common/Notifications/Notifications-store.ts">
import { nanoid } from 'nanoid';
import { create } from 'zustand';

export type Notification = {
  id: string;
  type: 'info' | 'warning' | 'success' | 'error';
  title: string;
  message?: string;
};

type NotificationsStore = {
  notifications: Notification[];
  addNotification: (notification: Omit<Notification, 'id'>) => void;
  dismissNotification: (id: string) => void;
};

export const useNotifications = create<NotificationsStore>((set) => ({
  notifications: [],
  addNotification: (notification) =>
    set((state) => ({
      notifications: [
        ...state.notifications,
        { id: nanoid(), ...notification },
      ],
    })),
  dismissNotification: (id) =>
    set((state) => ({
      notifications: state.notifications.filter(
        (notification) => notification.id !== id,
      ),
    })),
}));
</file>

<file path="src/common/Notifications/Notifications.tsx">
import { Notification } from "./Notification";
import { useNotifications } from "./Notifications-store";

export const Notifications = () => {
  const { notifications, dismissNotification } = useNotifications();

  return (
    <>
      {notifications.length > 0 && (
        <div
          aria-live="assertive"
          className="pointer-events-none fixed inset-0 z-50 flex flex-col items-end space-y-4 px-4 py-6 sm:items-start sm:p-6"
        >
          {notifications.map((notification) => (
            <Notification
              key={notification.id}
              notification={notification}
              onDismiss={dismissNotification}
            />
          ))}
        </div>
      )}
    </>
  );
};
</file>

<file path="src/common/O2Button.tsx">
import { useNavigate } from "react-router-dom";

export const O2Button = () => {
  const navigate = useNavigate();

  return (
    <h1
      className="text-7xl font-bold text-foreground cursor-pointer transform transition duration-200 ease-in-out hover:text-foreground/90 hover:scale-110"
      onClick={() => navigate("/")}
    >
      O₂
    </h1>
  );
};
</file>

<file path="src/common/Steps.tsx">
import { Separator } from "@/components/ui/separator";
import React from "react";

interface StepsProps {
  currentStep: number;
  totalSteps?: number;
  separatorColor?: string;
}

const Steps: React.FC<StepsProps> = ({
  currentStep,
  totalSteps = 3,
  separatorColor,
}) => {
  return (
    <div className="flex items-center space-x-2">
      {Array.from({ length: totalSteps }).map((_, index) => {
        const stepNumber = index + 1;
        const isActive = currentStep >= stepNumber;
        return (
          <React.Fragment key={stepNumber}>
            <div
              className={`flex items-center justify-center w-8 h-8 rounded-full 
                
                ${
                  isActive
                    ? "bg-primary text-primary-foreground"
                    : `${
                        separatorColor ? `bg-${separatorColor}` : ""
                      } text-muted-foreground`
                }`}
            >
              {stepNumber}
            </div>
            {index < totalSteps - 1 && (
              <Separator
                className={`flex-1 ${
                  separatorColor ? `bg-${separatorColor}` : ""
                }`}
              />
            )}
          </React.Fragment>
        );
      })}
    </div>
  );
};

export default Steps;
</file>

<file path="src/components/ui/accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { cn } from "@/utils/cn"
import { ChevronDownIcon } from "@radix-ui/react-icons"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b border-muted", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDownIcon className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/avatar.tsx">
import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";
import { cn } from "@/utils/cn";
import { FaUser } from "react-icons/fa"; // Import the icon

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-white",
      className
    )}
    {...props}
  >
    <FaUser className="text-xl text-gray-500" />
  </AvatarPrimitive.Fallback>
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };
</file>

<file path="src/components/ui/Button.stories.tsx">
import { Meta, StoryObj } from "@storybook/react";
import { Button } from "./button";

// Meta defines the component and parameters for Storybook
const meta: Meta<typeof Button> = {
  title: "Components/Button", // Name in Storybook UI
  component: Button, // The actual Button component
  args: {
    children: "Button", // Default label
  },
  argTypes: {
    variant: { control: "select" }, // Allows selecting different variants
    size: { control: "select" }, // Allows selecting different sizes
    isPending: { control: "boolean" }, // Toggle loading spinner
  },
};

export default meta;


type Story = StoryObj<typeof Button>;


export const Default: Story = {};


export const AddSaveButton: Story = {
  args: {
    variant: "addSave", 
    size: "default", 
  },
};

export const OutlineButton: Story = {
  args: {
    variant: "outline",
    size: "sm",
  },
};

export const PendingButton: Story = {
  args: {
    isPending: true, 
  },
};

export const DashboardButton: Story = {
  args: {
    variant: "dashboard",
    size: "dashboard",
  },
};
</file>

<file path="src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { cn } from "@/utils/cn"
import { CheckIcon } from "@radix-ui/react-icons"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <CheckIcon className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/collapsible.tsx">
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="src/components/ui/dialog/__tests__/dialog.test.tsx">
import * as React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';


import { Button } from '@/components/ui/button';
import { useDisclosure } from '@/hooks/use-disclosure';

import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '../dialog';

const openButtonText = 'Open Modal';
const cancelButtonText = 'Cancel';
const titleText = 'Modal Title';

const TestDialog = () => {
  const { close, open, isOpen } = useDisclosure();
  const cancelButtonRef = React.useRef(null);

  return (
    <Dialog
      open={isOpen}
      onOpenChange={(isOpen) => {
        if (!isOpen) {
          close();
        } else {
          open();
        }
      }}
    >
      <DialogTrigger asChild>
        <Button variant="outline">{openButtonText}</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>{titleText}</DialogTitle>
        </DialogHeader>

        <DialogFooter>
          <Button type="submit">Submit</Button>
          <Button ref={cancelButtonRef} variant="outline" onClick={close}>
            {cancelButtonText}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

test('should handle basic dialog flow', async () => {
  render(<TestDialog />);

  expect(screen.queryByText(titleText)).not.toBeInTheDocument();

  await userEvent.click(screen.getByRole('button', { name: openButtonText }));

  expect(await screen.findByText(titleText)).toBeInTheDocument();

  await userEvent.click(screen.getByRole('button', { name: cancelButtonText }));

  await waitFor(() =>
    expect(screen.queryByText(titleText)).not.toBeInTheDocument(),
  );
});
</file>

<file path="src/components/ui/dialog/confirmation-dialog/__tests__/confirmation-dialog.test.tsx">
import { Button } from '@/components/ui/button';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { ConfirmationDialog } from '../confirmation-dialog';
import '@testing-library/jest-dom';


test('should handle confirmation flow', async () => {
  const titleText = 'Are you sure?';
  const bodyText = 'Are you sure you want to delete this item?';
  const confirmationButtonText = 'Confirm';
  const openButtonText = 'Open';

  render(
    <ConfirmationDialog
      icon="danger"
      title={titleText}
      body={bodyText}
      confirmButton={<Button>{confirmationButtonText}</Button>}
      triggerButton={<Button>{openButtonText}</Button>}
    />
  );

  expect(screen.queryByText(titleText)).not.toBeInTheDocument();

  fireEvent.click(screen.getByRole('button', { name: openButtonText }));

  await waitFor(() => expect(screen.getByText(titleText)).toBeInTheDocument());
  expect(screen.getByText(bodyText)).toBeInTheDocument();

  fireEvent.click(screen.getByRole('button', { name: 'Cancel' }));

  await waitFor(() => expect(screen.queryByText(titleText)).not.toBeInTheDocument());
  expect(screen.queryByText(bodyText)).not.toBeInTheDocument();
});
</file>

<file path="src/components/ui/dialog/confirmation-dialog/confirmation-dialog.stories.tsx">
import { Meta, StoryObj } from '@storybook/react';

import { Button } from '@/components/ui/button';

import { ConfirmationDialog } from './confirmation-dialog';

const meta: Meta<typeof ConfirmationDialog> = {
  component: ConfirmationDialog,
};

export default meta;

type Story = StoryObj<typeof ConfirmationDialog>;

export const Danger: Story = {
  args: {
    icon: 'danger',
    title: 'Confirmation',
    body: 'Hello World',
    confirmButton: <Button className="bg-red-500">Confirm</Button>,
    triggerButton: <Button>Open</Button>,
  },
};

export const Info: Story = {
  args: {
    icon: 'info',
    title: 'Confirmation',
    body: 'Hello World',
    confirmButton: <Button>Confirm</Button>,
    triggerButton: <Button>Open</Button>,
  },
};
</file>

<file path="src/components/ui/dialog/confirmation-dialog/confirmation-dialog.tsx">
import { CircleAlert, Info } from "lucide-react";
import * as React from "react";
import { useEffect } from "react";
import { Button } from "@/components/ui/button";

import { useDisclosure } from "@/hooks/use-disclosure";
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "../dialog";

export type ConfirmationDialogProps = {
  triggerButton: React.ReactElement;
  confirmButton: React.ReactElement;
  title: string;
  body?: string;
  cancelButtonText?: string;
  icon?: "danger" | "info";
  isDone?: boolean;
};

export const ConfirmationDialog = ({
  triggerButton,
  confirmButton,
  title,
  body = "",
  cancelButtonText = "Cancel",
  icon = "danger",
  isDone = false,
}: ConfirmationDialogProps) => {
  const { close, open, isOpen } = useDisclosure();
  const cancelButtonRef = React.useRef(null);

  useEffect(() => {
    if (isDone) {
      close();
    }
  }, [isDone, close]);


  return (
    <Dialog
    open={isOpen}
    onOpenChange={(isOpen) => {
      if (!isOpen) {
        close();
      } else {
        open();
      }
    }}
  >
    <DialogTrigger asChild>{triggerButton}</DialogTrigger>
    <DialogContent className="sm:max-w-[425px]">
      <DialogHeader className="flex">
        <DialogTitle className="flex items-center gap-2">
          {' '}
          {icon === 'danger' && (
            <CircleAlert className="size-6 text-red-600" aria-hidden="true" />
          )}
          {icon === 'info' && (
            <Info className="size-6 text-blue-600" aria-hidden="true" />
          )}
          {title}
        </DialogTitle>
      </DialogHeader>

      <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
        {body && (
          <div className="mt-2">
            <p>{body}</p>
          </div>
        )}
      </div>

      <DialogFooter>
        {confirmButton}
        <Button ref={cancelButtonRef} variant="outline" onClick={close}>
          {cancelButtonText}
        </Button>
      </DialogFooter>
    </DialogContent>
  </Dialog>
  );
};
</file>

<file path="src/components/ui/dialog/confirmation-dialog/index.ts">
export * from './confirmation-dialog';
</file>

<file path="src/components/ui/dialog/dialog.stories.tsx">
import { Meta, StoryObj } from '@storybook/react';
import * as React from 'react';

import { Button } from '@/components/ui/button';
import { useDisclosure } from '@/hooks/use-disclosure';

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from './dialog';

const DemoDialog = () => {
  const { close, open, isOpen } = useDisclosure();
  const cancelButtonRef = React.useRef(null);

  return (
    <Dialog
      open={isOpen}
      onOpenChange={(isOpen) => {
        if (!isOpen) {
          close();
        } else {
          open();
        }
      }}
    >
      <DialogTrigger asChild>
        <Button variant="outline">Open Dialog</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Edit profile</DialogTitle>
          <DialogDescription>Lorem ipsum</DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">Lorem ipsum</div>

        <DialogFooter>
          <Button type="submit">Save changes</Button>
          <Button ref={cancelButtonRef} variant="outline" onClick={close}>
            Cancel
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

const meta: Meta = {
  component: Dialog,
};

export default meta;

type Story = StoryObj<typeof Dialog>;

export const Demo: Story = {
  render: () => <DemoDialog />,
};
</file>

<file path="src/components/ui/dialog/dialog.tsx">
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";
import * as React from "react";

import { cn } from "@/utils/cn";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4  bg-muted p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg text-foreground",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-muted transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="size-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left text-foreground",
      className
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};
</file>

<file path="src/components/ui/dialog/index.ts">
export * from './dialog';
export * from './confirmation-dialog';
</file>

<file path="src/components/ui/drawer.tsx">
import * as DrawerPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";
import { cva, type VariantProps } from "class-variance-authority";
import * as React from "react";

import { cn } from "@/utils/cn";

const Drawer = DrawerPrimitive.Root;

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerClose = DrawerPrimitive.Close;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const drawerVariants = cva(
  "fixed z-50 gap-4 bg-muted p-2 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-fit data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
);

type DrawerContentProps = React.ComponentPropsWithoutRef<
  typeof DrawerPrimitive.Content
> &
  VariantProps<typeof drawerVariants>;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  DrawerContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(drawerVariants({ side }), className)}
      {...props}
    >
      {children}
      <DrawerPrimitive.Close className="absolute right-2 top-2 rounded-lg opacity-70 ring-offset-muted transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <Cross2Icon className="size-4" />
        <span className="sr-only">Close</span>
      </DrawerPrimitive.Close>
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = DrawerPrimitive.Content.displayName;

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-center sm:space-x-2",
      className
    )}
    {...props}
  />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};
</file>

<file path="src/components/ui/dropdown-menu.tsx">
import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons";

import { cn } from "@/utils/cn";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-ring bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex justify-start gap-2 cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};
</file>

<file path="src/components/ui/form/error.tsx">
export type ErrorProps = {
    errorMessage?: string | null;
  };
  
  export const Error = ({ errorMessage }: ErrorProps) => {
    if (!errorMessage) return null;
  
    return (
      <div
        role="alert"
        aria-label={errorMessage}
        className="text-sm font-semibold text-red-500"
      >
        {errorMessage}
      </div>
    );
  };
</file>

<file path="src/components/ui/form/field-wrapper.tsx">
import * as React from 'react';
import { type FieldError } from 'react-hook-form';

import { Error } from './error';
import { Label } from './label';

type FieldWrapperProps = {
  label?: string;
  className?: string;
  children: React.ReactNode;
  error?: FieldError | undefined;
};

export type FieldWrapperPassThroughProps = Omit<
  FieldWrapperProps,
  'className' | 'children'
>;

export const FieldWrapper = (props: FieldWrapperProps) => {
  const { label, error, children } = props;
  return (
    <div>
      <Label>
        {label}
        <div className="mt-1">{children}</div>
      </Label>
      <Error errorMessage={error?.message} />
    </div>
  );
};
</file>

<file path="src/components/ui/form/index.ts">
export * from './form';
export * from './input';
export * from './textarea';
export * from './error';
export * from './form-drawer';
export * from './label';
</file>

<file path="src/components/ui/form/label.tsx">
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/utils/cn";

const labelVariants = cva(
  "text-sm text-foreground font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
</file>

<file path="src/components/ui/index.ts">
export * from '@/components/ui/button';
export * from '@/components/ui/card';
export * from '@/components/ui/avatar';
export * from '@/components/ui/button';
export * from '@/components/ui/drawer';
export * from '@/components/ui/data-table';
export * from '@/components/ui/dropdown-menu';
export * from '@/components/ui/LoginForm';
export * from '@/components/ui/mode-toggle';
export * from '@/components/ui/select';
export * from '@/components/ui/Spinner';
export * from '@/components/ui/switch';
export * from '@/components/ui/table';
export * from '@/components/ui/theme-provider';
export * from '@/components/ui/tooltip';
</file>

<file path="src/components/ui/LoginForm.tsx">
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "./form";
import { Label } from "@/components/ui/form/label";
export function LoginForm() {
  return (
    <Card className="mx-auto max-w-sm">
      <CardHeader>
        <CardTitle className="text-xl">Sign Up</CardTitle>
        <CardDescription>
          Enter your information to create an account
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid gap-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="grid gap-2">
              <Label htmlFor="first-name">First name</Label>
              <Input id="first-name" placeholder="Max" required />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="last-name">Last name</Label>
              <Input id="last-name" placeholder="Robinson" required />
            </div>
          </div>
          <div className="grid gap-2">
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              placeholder="m@example.com"
              required
            />
          </div>
          <div className="grid gap-2">
            <Label htmlFor="password">Password</Label>
            <Input id="password" type="password" />
          </div>
          <Button type="submit" className="w-full">
            Create an account
          </Button>
          <Button variant="outline" className="w-full">
            Sign up with GitHub
          </Button>
        </div>
        <div className="mt-4 text-center text-sm">
          Already have an account?{" "}
          <Link to="#" className="underline">
            Sign in
          </Link>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/ui/mode-toggle.tsx">
import { Moon, Sun } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useTheme } from "./theme-provider";
import { cn } from "@/utils/cn";

type ModeToggleProps = {
  className?: string;
  text?: boolean;
};

export function ModeToggle({ className, text }: ModeToggleProps) {
  const { theme, setTheme } = useTheme();

  const isLightMode = theme === "light";

  return (
    <Button
      variant="outline"
      size="icon"
      className={cn(
        "flex items-center gap-2 px-4 py-2 cursor-pointer w-[fit-content]",
        className
      )}
      onClick={() => setTheme(isLightMode ? "dark" : "light")}
    >
      {isLightMode ? (
        <>
          <Moon className="h-5 w-5" />
          {text && <span>Light Mode</span>}
        </>
      ) : (
        <>
          <Sun className="h-5 w-5" />
          {text && <span>Dark Mode</span>}
        </>
      )}
    </Button>
  );
}
</file>

<file path="src/components/ui/radio-group.tsx">
import * as React from "react";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import { cn } from "@/utils/cn";
import { DotFilledIcon } from "@radix-ui/react-icons";

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <DotFilledIcon className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };
</file>

<file path="src/components/ui/separator.tsx">
import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/utils/cn";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };
</file>

<file path="src/components/ui/Spinner.tsx">
import { cn } from "@/utils/cn";

const sizes = {
  sm: "h-4 w-4",
  md: "h-8 w-8",
  lg: "h-16 w-16",
  xl: "h-24 w-24",
};

const variants = {
  light: "text-foreground",
  primary: "text-foreground",
};

export type SpinnerProps = {
  size?: keyof typeof sizes;
  variant?: keyof typeof variants;
  className?: string;
};

export const Spinner = ({
  size = "md",
  variant = "primary",
  className = "",
}: SpinnerProps) => {
  return (
    <>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
        className={cn(
          "animate-spin",
          sizes[size],
          variants[variant],
          className
        )}
      >
        <path d="M21 12a9 9 0 1 1-6.219-8.56" />
      </svg>
      <span className="sr-only">Loading</span>
    </>
  );
};
</file>

<file path="src/components/ui/switch.tsx">
import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";

import { cn } from "@/utils/cn";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-background shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-muted disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500 data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0 data-[state=checked]:bg-green-700 "
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };
</file>

<file path="src/components/ui/table.tsx">
import * as React from "react";

import { cn } from "@/utils/cn";
const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
));
Table.displayName = "Table";

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
));
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
));
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
));
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
));
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
));
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
));
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
));
TableCaption.displayName = "TableCaption";

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};
</file>

<file path="src/components/ui/theme-provider.tsx">
import { createContext, useContext, useEffect, useState } from "react";

type Theme = "dark" | "light" | "system";

type ThemeProviderProps = {
  children: React.ReactNode;
  defaultTheme?: Theme;
  storageKey?: string;
};

type ThemeProviderState = {
  theme: Theme;
  setTheme: (theme: Theme) => void;
};

const initialState: ThemeProviderState = {
  theme: "dark",
  setTheme: () => null,
};

const ThemeProviderContext = createContext<ThemeProviderState>(initialState);

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  );

  useEffect(() => {
    const root = window.document.documentElement;

    root.classList.remove("light", "dark");

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light";

      root.classList.add(systemTheme);
      return;
    }

    root.classList.add(theme);
  }, [theme]);

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme);
      setTheme(theme);
    },
  };

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  );
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext);

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider");

  return context;
};
</file>

<file path="src/components/ui/tooltip.tsx">
import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/utils/cn";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = ({ delayDuration = 0, ...props }) => (
  <TooltipPrimitive.Root delayDuration={delayDuration} {...props} />
);

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 mb-2 border border-[var(--border)] bg-[var(--muted)] overflow-hidden rounded-md px-3 py-2 text-xs animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };
</file>

<file path="src/hooks/__tests__/use-disclosure.test.ts">
import { test, expect} from 'vitest';
import { renderHook, act } from '@testing-library/react';
import { useDisclosure } from '../use-disclosure';

test('should open the state', () => {
  const { result } = renderHook(() => useDisclosure());

  expect(result.current.isOpen).toBe(false);

  act(() => {
    result.current.open();
  });

  expect(result.current.isOpen).toBe(true);
});

test('should close the state', () => {
  const { result } = renderHook(() => useDisclosure());

  expect(result.current.isOpen).toBe(false);

  act(() => {
    result.current.close();
  });

  expect(result.current.isOpen).toBe(false);
});

test('should toggle the state', () => {
  const { result } = renderHook(() => useDisclosure());

  expect(result.current.isOpen).toBe(false);

  act(() => {
    result.current.toggle();
  });

  expect(result.current.isOpen).toBe(true);

  act(() => {
    result.current.toggle();
  });

  expect(result.current.isOpen).toBe(false);
});

test('should define initial state', () => {
  const { result } = renderHook(() => useDisclosure(true));

  expect(result.current.isOpen).toBe(true);

  act(() => {
    result.current.toggle();
  });

  expect(result.current.isOpen).toBe(false);
});
</file>

<file path="src/hooks/use-debounce.ts">
import { useState, useEffect } from 'react';

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}
</file>

<file path="src/hooks/use-disclosure.ts">
import * as React from 'react';

export const useDisclosure = (initial = false) => {
  const [isOpen, setIsOpen] = React.useState(initial);

  const open = React.useCallback(() => setIsOpen(true), []);
  const close = React.useCallback(() => setIsOpen(false), []);
  const toggle = React.useCallback(() => setIsOpen((state) => !state), []);

  return { isOpen, open, close, toggle };
};
</file>

<file path="src/index.tsx">
import { AppProvider } from "./Provider";
import { AppRouter } from "./routes/Router";

export const App = () => {
  return (
    <AppProvider>
      <AppRouter />
    </AppProvider>
  );
};
</file>

<file path="src/layouts/individual-content-layout.tsx">
import type React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

interface ContentLayoutProps {
  title: string;
  children: React.ReactNode;
}

export const ContentLayout: React.FC<ContentLayoutProps> = ({
  title,
  children,
}) => {
  return (
    <Card className="w-full max-w-3xl ml-4 mt-4 bg-background border border-border shadow-lg">
      <CardHeader className="border-b border-input mb-4">
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent>{children}</CardContent>
    </Card>
  );
};
</file>

<file path="src/lib/authHelpers.ts">
// import Cookies from 'js-cookie';

export const encode = (obj: any) => {
  const btoa =
    typeof window === 'undefined'
      ? (str: string) => Buffer.from(str, 'binary').toString('base64')
      : window.btoa;
  return btoa(JSON.stringify(obj));
};

export const decode = (str: string) => {
  const atob =
    typeof window === 'undefined'
      ? (str: string) => Buffer.from(str, 'base64').toString('binary')
      : window.atob;
  return JSON.parse(atob(str));
};

export const hash = (str: string) => {
  let hash = 5381,
    i = str.length;

  while (i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }
  return String(hash >>> 0);
};


const omit = <T extends object>(obj: T, keys: string[]): T => {
  const result = {} as T;
  for (const key in obj) {
    if (!keys.includes(key)) {
      result[key] = obj[key];
    }
  }

  return result;
};

export const sanitizeUser = <O extends object>(user: O) =>
  omit<O>(user, ['password', 'iat']);

export const AUTH_COOKIE = `quiz_app_token`;

// export function requireAuth(cookies: Record<string, string>) {
//   try {
//     const encodedToken = cookies[AUTH_COOKIE] || Cookies.get(AUTH_COOKIE);
//     if (!encodedToken) {
//       return { error: 'Unauthorized', user: null };
//     }
//     const decodedToken = decode(encodedToken) as { id: string };

    // const user = db.user.findFirst({
     //   where: {
   //     id: {
   //       equals: decodedToken.id,
    //     },
    //   },
    // })

//     if (!user) {
//       return { error: 'Unauthorized', user: null };
//     }

//     return { user: sanitizeUser(user) };
//   } catch (err: any) {
//     return { error: 'Unauthorized', user: null };
//   }
// }

export function requireAdmin(user: any) {
  if (user.role !== 'ADMIN') {
    throw Error('Unauthorized');
  }
}
</file>

<file path="src/lib/React-query.ts">
import { UseMutationOptions, DefaultOptions } from '@tanstack/react-query';

export const queryConfig = {
    queries: {
      throwOnError: true, 
      refetchOnWindowFocus: false, 
      retry: false,
      staleTime: 1000 * 60, 
    },
  } satisfies DefaultOptions; 
  
  export type ApiFnReturnType<FnType extends (...args: any) => Promise<any>> =
    Awaited<ReturnType<FnType>>;
  
  export type QueryConfig<T extends (...args: any[]) => any> = Omit<
    ReturnType<T>,
    'queryKey' | 'queryFn'
  >;
  
  export type MutationConfig<
    MutationFnType extends (...args: any) => Promise<any>,
  > = UseMutationOptions<
    ApiFnReturnType<MutationFnType>, 
    Error,                          
    Parameters<MutationFnType>[0]   
  >;
</file>

<file path="src/lib/Redirect.tsx">
import { Navigate } from "react-router-dom";
import { useUser } from "./Auth";

export const RedirectIfLoggedIn = ({ component }: { component: JSX.Element }) => {
  const user = useUser();

  if (user?.data) {
    return <Navigate to="/dashboard" replace />;
  }

  return component;
};
</file>

<file path="src/lib/SocialButtons/SocialButtons.tsx">
import React from "react";
import { Button } from "@/components/ui/button";
import { FaGoogle } from "react-icons/fa";
import { BsMicrosoft } from "react-icons/bs";

const SocialButtons: React.FC = () => (
  <div className="flex flex-col w-full justify-center items-center mt-6 space-y-3">
    <Button variant="outline" className="w-[75%] rounded">
      <FaGoogle /> Continue with Google
    </Button>
    <Button variant="outline" className="w-[75%] rounded">
      <BsMicrosoft /> Continue with Microsoft
    </Button>
  </div>
);

export default SocialButtons;
</file>

<file path="src/main.tsx">
import { createRoot } from "react-dom/client";
import { App } from "./index";
import React from "react";

createRoot(document.getElementById("root")!).render(
   <React.StrictMode>
    <App />
  </React.StrictMode> 
);
</file>

<file path="src/pages/AboutUs/AboutUs.tsx">
export const AboutUs = () => {
  return <div className="text-3xl"></div>;
};
</file>

<file path="src/pages/Dashboard/Components/dashboardNavConfig.ts">
import { FaChartLine } from "react-icons/fa6";
import { RiQuestionAnswerFill } from "react-icons/ri";
import { FaFolderOpen, FaUsers } from "react-icons/fa";
import { PiLockKeyFill } from "react-icons/pi";

export const dashboardNavButtons = [
  {
    id: "application",
    label: "Application",
    icon: FaChartLine,
  },
  {
    id: "questions",
    label: "Questions",
    icon: RiQuestionAnswerFill,
  },
  {
    id: "quizzes",
    label: "Quizzes",
    icon: FaFolderOpen,
  },
  {
    id: "users",
    label: "Users",
    icon: FaUsers,
  },
  {
    id: "permissions",
    label: "Permissions",
    icon: PiLockKeyFill,
  }
];
</file>

<file path="src/pages/Dashboard/Dashboard.tsx">
//PAGE IS NOT BEING USED AT THE MOMENT

import { Suspense, lazy } from "react";
import { Routes, Route, Navigate, useNavigate } from "react-router-dom";
import { DashboardNav } from "@/pages/Dashboard/Components/DashboardNav";
import { DashboardHeader } from "./Components/DashboardHeader";
import { Spinner } from "@/components/ui";

// Lazy load sub-pages
const Application = lazy(() =>
  import("./Pages/Application/Application").then((module) => ({
    default: module.Application,
  }))
);
const Questions = lazy(() =>
  import("./Pages/Question/Questions").then((module) => ({
    default: module.Questions,
  }))
);
const Quizzes = lazy(() =>
  import("./Pages/Quiz/Quizzes").then((module) => ({ default: module.Quizzes }))
);
const Users = lazy(() =>
  import("./Pages/User/Users").then((module) => ({ default: module.Users }))
);

const Permissions = lazy(() =>
  import("./Pages/Permissions/Permissions").then((module) => ({
    default: module.Permissions,
  }))
);

export const Dashboard = () => {
  const navigate = useNavigate();

  const setActivePage = (page: string) => {
    console.log(`/dashboard/${page}`);
    navigate(`/dashboard/${page}`);
  };

  return (
    <div className="grid grid-cols-[16%_84%] grid-rows-[auto_1fr] h-[100vh]">
      <div className="col-span-2 bg-background">
        <DashboardHeader />
      </div>
      <div className="h-full bg-background">
        <DashboardNav
          setActivePage={setActivePage}
          activePage={location.pathname.split("/").pop() || "application"}
        />
      </div>
      <div className="overflow-y-auto">
        <Suspense fallback={<Spinner size="xl" />}>
          <Routes>
            <Route index element={<Navigate to="application" replace />} />
            <Route path="application" element={<Application />} />
            <Route path="permissions" element={<Permissions />} />
            <Route path="questions" element={<Questions />} />
            <Route path="quizzes" element={<Quizzes />} />
            <Route path="users" element={<Users />} />
            <Route path="*" element={<Navigate to="application" replace />} />
          </Routes>
        </Suspense>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Permissions/Permissions.tsx">
export const Permissions = () => {
  return <div className="space-y-4 my-5 p-6">Permissions</div>;
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Categories/api/create-question-categories.ts">
import { QuestionCategory } from '@/types/ApiTypes'
import {z} from 'zod'
import { api } from '@/lib/Api-client'
import { MutationConfig } from '@/lib/React-query'
import { useQueryClient, useMutation } from '@tanstack/react-query'
import { getQuestionCategoriesQueryOptions } from './get-question-categories'

export const createQuestionCategoryInputSchema = z.object({
    name: z.string().min(1, 'Category is required'),
    emoji: z.string(),
})


export type CreateQuestionCategoryInput = z.infer<typeof createQuestionCategoryInputSchema>

export const createQuestionCategory = ({data} : {data:CreateQuestionCategoryInput}): Promise<QuestionCategory> => {
    return api.post('/questioncategories', data);
}

type UseCreateQuestionCategoryOptions = {
    mutationConfig?: MutationConfig<typeof createQuestionCategory>;
}

export const useCreateQuestionCategory = ({ mutationConfig }: UseCreateQuestionCategoryOptions = {}) => {
    const queryClient = useQueryClient();

    const { onSuccess, onError, ...restConfig } = mutationConfig || {};

    return useMutation(
        {
            mutationFn: createQuestionCategory,
            onSuccess: (...args) => {
                queryClient.invalidateQueries({ queryKey: getQuestionCategoriesQueryOptions().queryKey });
                onSuccess?.(...args);
            },
            onError: (error, variables, context) => {
                console.error('Error creating question category:', error);
                onError?.(error, variables, context);
            },
            ...restConfig,
        }
    )
}
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Categories/api/delete-question-categories.ts">
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { getQuestionCategoriesQueryOptions } from "./get-question-categories";

type DeleteQuestionCategoryDTO = {
    categoryId: number
};

export const deleteQuestionCategory = ({ categoryId }: DeleteQuestionCategoryDTO) => {
    return api.delete(`/QuestionCategories/${categoryId}`);
}

type UseDeleteQuestionCategoryOptions = {
    mutationConfig?: MutationConfig<typeof deleteQuestionCategory>;
}

export const useDeleteQuestionCategory = ({ mutationConfig }: UseDeleteQuestionCategoryOptions = {}) => {
   const queryClient = useQueryClient();

   const {onSuccess, ...restConfig} = mutationConfig || {};

   return useMutation({
       onSuccess: (...args) => {
           queryClient.invalidateQueries({
               queryKey: getQuestionCategoriesQueryOptions().queryKey
           });
           onSuccess?.(...args);
       },
         ...restConfig,
       mutationFn: deleteQuestionCategory
    });
}
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Difficulty/api/create-question-difficulty.ts">
import { QuestionDifficulty } from '@/types/ApiTypes'
import {z} from 'zod'
import { api } from '@/lib/Api-client'
import { MutationConfig } from '@/lib/React-query'
import { useQueryClient, useMutation } from '@tanstack/react-query'
import { getQuestionDifficultyQueryOptions } from './get-question-difficulties'

export const createQuestionDifficultyInputSchema = z.object({
    level: z.string().min(1, 'Level is required'),
    weight: z
    .number()
    .min(1, { message: "Weight must be at least 1." })
    .max(100, { message: "Weight cannot be more than 100." })
  
})


export type CreateQuestionDifficultyInput = z.infer<typeof createQuestionDifficultyInputSchema>

export const createQuestionDifficulty = ({data} : {data:CreateQuestionDifficultyInput}): Promise<QuestionDifficulty> => {
    return api.post('/questiondifficulties', data);
}

type UseCreateQuestionDifficultyOptions = {
    mutationConfig?: MutationConfig<typeof createQuestionDifficulty>;
}

export const useCreateQuestionDifficulty = ({ mutationConfig }: UseCreateQuestionDifficultyOptions = {}) => {
    const queryClient = useQueryClient();

    const { onSuccess, onError, ...restConfig } = mutationConfig || {};

    return useMutation(
        {
            mutationFn: createQuestionDifficulty,
            onSuccess: (...args) => {
                queryClient.invalidateQueries({ queryKey: getQuestionDifficultyQueryOptions().queryKey });
                onSuccess?.(...args);
            },
            onError: (error, variables, context) => {
                console.error('Error creating question difficulty:', error);
                onError?.(error, variables, context);
            },
            ...restConfig,
        }
    )
}
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Difficulty/api/delete-question-difficulty.ts">
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { getQuestionDifficultyQueryOptions } from "./get-question-difficulties";

type DeleteQuestionDifficultyDTO = {
    difficultyId: number
};

export const deleteQuestionDifficulty = ({ difficultyId }: DeleteQuestionDifficultyDTO) => {
    return api.delete(`/QuestionDifficulties/${difficultyId}`);
}

type UseDeleteQuestionDifficultyOptions = {
    mutationConfig?: MutationConfig<typeof deleteQuestionDifficulty>;
}

export const useDeleteQuestionDifficulty = ({ mutationConfig }: UseDeleteQuestionDifficultyOptions = {}) => {
   const queryClient = useQueryClient();

   const {onSuccess, ...restConfig} = mutationConfig || {};

   return useMutation({
       onSuccess: (...args) => {
           queryClient.invalidateQueries({
               queryKey: getQuestionDifficultyQueryOptions().queryKey
           });
           onSuccess?.(...args);
       },
         ...restConfig,
       mutationFn: deleteQuestionDifficulty
    });
}
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Language/api/delete-question-language.ts">
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { getQuestionLanguageQueryOptions } from "./get-question-language";

type DeleteQuestionLanguageDTO = {
    languageId: number
};

export const deleteQuestionLanguage = ({ languageId }: DeleteQuestionLanguageDTO) => {
    return api.delete(`/QuestionLanguages/${languageId}`);
}

type UseDeleteQuestionLanguageOptions = {
    mutationConfig?: MutationConfig<typeof deleteQuestionLanguage>;
}

export const useDeleteQuestionLanguage = ({ mutationConfig }: UseDeleteQuestionLanguageOptions = {}) => {
   const queryClient = useQueryClient();

   const {onSuccess, ...restConfig} = mutationConfig || {};

   return useMutation({
       onSuccess: (...args) => {
           queryClient.invalidateQueries({
               queryKey: getQuestionLanguageQueryOptions().queryKey
           });
           onSuccess?.(...args);
       },
         ...restConfig,
       mutationFn: deleteQuestionLanguage
    });
}
</file>

<file path="src/pages/Dashboard/Pages/Quiz/api/get-quiz-questions.ts">
import { useQuery, queryOptions } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";
import {  Question} from "@/types/ApiTypes";

export type QuizQuestion = {
    quizId: number; //these are being sent from the back so maybe we need to change it since we're not using them in the front
    questionId: number; // this too
    score: number;
    question: Question;
}

export const getQuizQuestions = ({
  quizId,
}:{
  quizId: number;
} ): Promise<QuizQuestion[]> => {
  return api.get(`/quizzes/${quizId}/questions`);
};

export const getQuizQuestionsQueryOptions = (
  quizId: number
) => {
  return queryOptions({
    queryKey: ["quizQuestions", quizId],
    queryFn: () => getQuizQuestions({quizId}),
  });
};

type UseQuizQuestionsOptions = {
  queryConfig?: QueryConfig<typeof getQuizQuestionsQueryOptions>;
  quizId: number;
};

export const useQuizQuestionsData = ({
  queryConfig,
  quizId,
}: UseQuizQuestionsOptions) => {
  return useQuery({
    ...getQuizQuestionsQueryOptions(quizId),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/api/get-quiz.ts">
import { useQuery, queryOptions } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";
import {  Quiz } from "@/types/ApiTypes";


export const getQuiz = ({
  quizId,
}:{
  quizId: number;
} ): Promise<Quiz> => {
  return api.get(`/quizzes/${quizId}`);
};

export const getQuizQueryOptions = (
  quizId: number
) => {
  return queryOptions({
    queryKey: ["quiz", quizId],
    queryFn: () => getQuiz({quizId}),
  });
};

type UseQuizOptions = {
  queryConfig?: QueryConfig<typeof getQuizQueryOptions>;
  quizId: number;
};

export const useQuizData = ({
  queryConfig,
  quizId,
}: UseQuizOptions) => {
  return useQuery({
    ...getQuizQueryOptions(quizId),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Data-Table-Columns/title-description.tsx">
import React, { useState } from "react";

interface TitleWithDescriptionProps {
  title: string;
  description: string;
  wordLimit?: number;
}

const TitleWithDescription: React.FC<TitleWithDescriptionProps> = ({
  title,
  description,
  wordLimit = 20,
}) => {
  const [expanded, setExpanded] = useState(false);

  const toggleExpanded = () => setExpanded((prev) => !prev);

  const words = description.split(" ");
  const isTruncated = words.length > wordLimit;
  const truncatedText = isTruncated
    ? words.slice(0, wordLimit).join(" ") + "..."
    : description;

  return (
    <div className="flex flex-col">
      <span className="font-bold text-lg">{title}</span>
      <span className="text-sm text-foreground-lighter/70">
        {expanded ? description : truncatedText}
        {isTruncated && (
          <button
            onClick={toggleExpanded}
            className="ml-1 text-blue-600 underline"
          >
            {expanded ? "Show less" : "Read more"}
          </button>
        )}
      </span>
    </div>
  );
};

export default TitleWithDescription;
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/delete-quiz.tsx">
import { Button } from "@/components/ui/button";
import { ConfirmationDialog } from "@/components/ui/dialog";
import { useNotifications } from "@/common/Notifications";
import { useDeleteQuiz } from "../api/delete-quiz";
import { Trash2 } from "lucide-react";

type DeleteQuizProps = {
  id: number;
};

export const DeleteQuiz = ({ id }: DeleteQuizProps) => {
  const { addNotification } = useNotifications();
  const deleteQuizMutation = useDeleteQuiz({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Quiz Deleted",
        });
      },
    },
  });

  return (
    <ConfirmationDialog
      isDone={deleteQuizMutation.isSuccess || deleteQuizMutation.isError}
      icon="danger"
      title="Delete Quiz"
      body="Are you sure you want to delete this quiz?"
      triggerButton={
        <Button variant="destructive" className="rounded-xl">
          <Trash2 size={16} />
          Delete
        </Button>
      }
      confirmButton={
        <Button
          isPending={deleteQuizMutation.isPending}
          type="button"
          variant="destructive"
          onClick={() => {
            deleteQuizMutation.mutate({ quizId: id });
          }}
        >
          Delete Quiz
        </Button>
      }
    />
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/Quiz.tsx">
import { QueryClient } from "@tanstack/react-query";
import { LoaderFunctionArgs, useParams } from "react-router";
import { getQuizQueryOptions, useQuizData } from "./api/get-quiz";
import { Button, CardContent, CardHeader, Spinner } from "@/components/ui";
import { ContentLayout } from "@/layouts/individual-content-layout";
import { Edit2, EyeOff } from "lucide-react";
import { Separator } from "@/components/ui/separator";
import { DeleteQuiz } from "./components/delete-quiz";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { QuizProperties } from "./components/quiz-properties";
import { QuizQuestions } from "./components/quiz-questions";

export const quizLoader =
  (queryClient: QueryClient) =>
  async ({ params }: LoaderFunctionArgs) => {
    const quizId = Number(params.quizId as string);

    const quizQuery = getQuizQueryOptions(quizId);
    const promise =
      queryClient.getQueryData(quizQuery.queryKey) ??
      (await queryClient.fetchQuery(quizQuery));

    const quiz = await Promise.resolve(promise);

    return { quiz };
  };
export const QuizRoute = () => {
  const params = useParams();
  const quizId = Number(params.quizId as string);
  const quizQuery = useQuizData({ quizId });

  if (quizQuery.isLoading)
    return (
      <div className="w-full h-full flex items-center justify-center">
        <Spinner size="lg" />
      </div>
    );

  if (quizQuery.isError) {
    return (
      <div className="w-full h-full flex items-center justify-center">
        Failed to load quiz. Try again later.
      </div>
    );
  }

  const quiz = quizQuery.data;
  if (!quiz) return null;

  return (
    <ContentLayout title={`Quiz #${quiz.id}`}>
      <CardHeader className="flex flex-col space-y-0">
        <p className="font-semibold text-2xl">{quiz.title}</p>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="overview">
          <TabsList>
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="questions">
              Questions({quiz.numberOfQuestions})
            </TabsTrigger>
          </TabsList>
          <Separator className="my-6" />
          <TabsContent value="questions">
            <QuizQuestions />
          </TabsContent>
          <TabsContent value="overview">
            <div className="mb-6">
              <h2 className="text-lg font-semibold">Description</h2>
              <p className="text-muted-foreground">{quiz.description}</p>
            </div>
            {quiz && <QuizProperties quiz={quiz} />}
          </TabsContent>
        </Tabs>
        <Separator className="mt-6" />
        <section className="mt-6 flex justify-end gap-2">
          {/* 
          ///
          /// TODO: Add unpublish functionality
          /// ALSO: Make it dynamic (if published, say unpublish, else say publish)
          ///
          */}
          <Button className="bg-background hover:bg-muted text-foregound border-foreground">
            <EyeOff size={16} />
            Unpublish
          </Button>
          <Button>
            <Edit2 size={16} />
            Edit
          </Button>
          <DeleteQuiz id={quiz.id} />
        </section>
      </CardContent>
    </ContentLayout>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/Sessions/api/create-quiz-session.ts">
// import { useMutation, useQueryClient } from "@tanstack/react-query";
// import { api } from "@/lib/Api-client";
// import { MutationConfig } from "@/lib/React-query";
// import { Question } from "@/types/ApiTypes";

// export const createQuestion = ({ data }: { data: number }): Promise<> => {
//   return (
//     console.log("data", data),
//     api.post('/questions', data));
// };

// type UseCreateQuestionOptions = {
//   mutationConfig?: MutationConfig<typeof createQuestion>;
// };

// export const useCreateQuestion = ({ mutationConfig }: UseCreateQuestionOptions = {}) => {
//   const queryClient = useQueryClient();
  
//   const { onSuccess, onError, ...restConfig } = mutationConfig || {};

//   return useMutation({
//     mutationFn: createQuestion,
//     onSuccess: (...args) => {
//       queryClient.invalidateQueries({ queryKey: getQuestionsQueryOptions().queryKey });
//       onSuccess?.(...args);
//     },
//     onError: (error, variables, context) => {
//       console.error('Error creating question:', error);
//       onError?.(error, variables, context);
//     },
//     ...restConfig,
//   });
// };
</file>

<file path="src/pages/Dashboard/Pages/User/api/create-user.ts">
import { useMutation, useQueryClient } from "@tanstack/react-query";
import {z} from "zod";

import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import {User} from "@/types/ApiTypes";

import { getUsersQueryOptions } from "./get-users";

export const createUserInputSchema = z.object({
    username: z.string().min(1, 'Required'),
    email: z.string().min(1, "Required").email("Invalid email"),
    role: z.string().default("User"),
    password: z.string().min(1, 'Required'),
  }
);

export type CreateUserInput = z.infer<typeof createUserInputSchema>;

export const createUser =({data }: {data: CreateUserInput}): Promise<User> => {
    return api.post('/Users', data);
}

type UseCreateUserOptions = {
    mutationConfig?: MutationConfig<typeof createUser>;
};

export const useCreateUser = ({ mutationConfig }: UseCreateUserOptions = {}) => {
  const queryClient = useQueryClient();

  const { onSuccess, onError, ...restConfig } = mutationConfig || {};

  return useMutation({
    mutationFn: createUser,

    onSuccess: (...args) => {
        queryClient.invalidateQueries({ queryKey: getUsersQueryOptions().queryKey, });
        onSuccess?.(...args);
    },
    onError: (error, variables, context) => {
      console.error('Error creating user:', error); 
      onError?.(error, variables, context);
  },
    ...restConfig,
  })
};
</file>

<file path="src/pages/Dashboard/Pages/User/api/delete-user.ts">
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import { getUsersQueryOptions } from "./get-users";

export type DeleteUserDTO = {
    userId: string;
  };

  export const deleteUser = ({ userId }: DeleteUserDTO) => {
    return api.delete(`/Users/${userId}`);
  };
  
  type UseDeleteUserOptions = {
    mutationConfig?: MutationConfig<typeof deleteUser>;
  };
  
  export const useDeleteUser = ({
    mutationConfig,
  }: UseDeleteUserOptions = {}) => {
    const queryClient = useQueryClient();
  
    const { onSuccess, ...restConfig } = mutationConfig || {};
  
    return useMutation({
      onSuccess: (...args) => {
        queryClient.invalidateQueries({
          queryKey: getUsersQueryOptions().queryKey,
        });
        onSuccess?.(...args);
      },
      ...restConfig,
      mutationFn: deleteUser,
    });
  };
</file>

<file path="src/pages/Dashboard/Pages/User/api/get-total-users.ts">
import { queryOptions, useQuery } from "@tanstack/react-query";

import { api } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";

export const getTotalUsers = (): Promise<number> => {
  return api.get(`/totals/users`);
};

export const getTotalUsersQueryOptions = () => {
  return queryOptions({
    queryKey: ["totalUsers"],
    queryFn: () => getTotalUsers(),
  });
};

type UseUserOptions = {
  queryConfig?: QueryConfig<typeof getTotalUsersQueryOptions>;
};


export const useTotalUsersData = ({ queryConfig }: UseUserOptions) => {
  return useQuery({
    ...getTotalUsersQueryOptions(),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/User/Components/columns.tsx">
import { ColumnDef } from "@tanstack/react-table";
import { User } from "@/types/ApiTypes";
import { Button } from "@/components/ui/button";
import { useDisclosure } from "@/hooks/use-disclosure";
import {
  Copy,
  Activity,
  UserX,
  UserRoundPen,
  MoreHorizontal,
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { DeleteUser } from "./delete-user";
import formatDate from "@/lib/date-format";
import { useUser } from "@/lib/Auth";

export const columns: ColumnDef<User>[] = [
  {
    accessorKey: "username",
    header: "Username",
  },
  {
    accessorKey: "email",
    header: "Email",
  },
  {
    accessorKey: "role",
    header: "Role",
  },
  {
    accessorKey: "dateRegistered",
    header: "Date Registered",
    cell: ({ row }) => {
      const date = row.original.dateRegistered;
      return formatDate(date);
    },
  },
  {
    accessorKey: "isDeleted",
    header: "Status",
    cell: ({ row }) => {
      const isDeleted = row.original.isDeleted;

      return (
        <div
          className={`flex items-center justify-center p-1 rounded-[2rem] text-[12px] font-semibold  ${
            isDeleted ? "bg-red-100 text-red-700" : "bg-primary text-white"
          }`}
        >
          {isDeleted ? (
            <>
              <UserX className="w-3 h-3 mr-2" /> deleted
            </>
          ) : (
            <>
              <Activity className="w-3 h-3 mr-2" /> active
            </>
          )}
        </div>
      );
    },
  },
  {
    accessorKey: "lastLogin",
    header: "Last Login",
    cell: ({ row }) => {
      const date = row.original.lastLogin;
      return formatDate(date);
    },
  },
  {
    accessorKey: "profileImageUrl",
    header: "Image Url",
  },
  {
    id: "actions",
    header: "Actions",
    cell: ({ row }) => {
      const user = row.original;
      const mainUser = useUser();

      const { open, isOpen, close } = useDisclosure();

      return (
        <DropdownMenu
          open={isOpen}
          onOpenChange={(state) => (state ? open() : close())}
        >
          <DropdownMenuTrigger asChild>
            <Button variant="default" className="h-8 w-8 p-0 rounded">
              <span className="sr-only">Open menu</span>
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="bg-muted">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuItem
              onClick={() => navigator.clipboard.writeText(user.id)}
            >
              <Copy size={16} /> Copy ID
            </DropdownMenuItem>
            <DropdownMenuSeparator className="bg-background/60" />
            <DropdownMenuItem
              disabled={user.id === mainUser.data.id}
              onClick={(e) => {
                e.stopPropagation();
                e.preventDefault();
              }}
            >
              <DeleteUser id={user.id} closeDropDown={close} />
            </DropdownMenuItem>
            <DropdownMenuSeparator className="bg-background/60" />
            <DropdownMenuItem>
              <UserRoundPen size={16} /> Edit User
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      );
    },
  },
];
</file>

<file path="src/pages/Dashboard/Pages/Ushtrime/api/create-drejtimi.ts">
import {z} from 'zod'
import { api } from '@/lib/Api-client'
import { MutationConfig } from '@/lib/React-query'
import { useQueryClient, useMutation } from '@tanstack/react-query'
import { Drejtimi, getDrejtimiQueryOptions } from './get-drejtimi'


export const createDrejtimiInputSchema = z.object({
   name : z.string().min(1, {message: 'title is required'}),
   duration : z.string().min(1, {message: 'description is required'}),
    universityId : z.number().int().positive({message: 'universityId is required'}),
})


export type CreateDrejtimiInput = z.infer<typeof createDrejtimiInputSchema>

export const createDrejtimi= ({data} : {data:CreateDrejtimiInput}): Promise<Drejtimi> => {
    console.log(data);
    return api.post('/drejtimi', data);
}

type UseCreateDrejtimiOptions = {
    mutationConfig?: MutationConfig<typeof createDrejtimi>;
}

export const useCreateDrejtimi = ({ mutationConfig }: UseCreateDrejtimiOptions = {}) => {
    const queryClient = useQueryClient();

    const { onSuccess, onError, ...restConfig } = mutationConfig || {};

    return useMutation(
        {
            mutationFn: createDrejtimi,
            onSuccess: (...args) => {
                queryClient.invalidateQueries({ queryKey: getDrejtimiQueryOptions().queryKey });
                onSuccess?.(...args);
            },
            onError: (error, variables, context) => {
                console.error('Error creating contract:', error);
                onError?.(error, variables, context);
            },
            ...restConfig,
        }
    )
}
</file>

<file path="src/pages/Dashboard/Pages/Ushtrime/api/create-university.ts">
import {z} from 'zod'
import { api } from '@/lib/Api-client'
import { MutationConfig } from '@/lib/React-query'
import { useQueryClient, useMutation } from '@tanstack/react-query'
import { getUniversityQueryOptions, University } from './get-universities'


export const createUniversityInputSchema = z.object({
   name : z.string().min(1, {message: 'Name is required'}),
   city : z.string().min(1, {message: 'Surname is required'}),
})


export type CreateUniversityInput = z.infer<typeof createUniversityInputSchema>

export const createUniversity = ({data} : {data:CreateUniversityInput}): Promise<University> => {
    return api.post('/university', data);
}

type UseCreateUniversityOptions = {
    mutationConfig?: MutationConfig<typeof createUniversity>;
}

export const useCreateUniversity = ({ mutationConfig }: UseCreateUniversityOptions = {}) => {
    const queryClient = useQueryClient();

    const { onSuccess, onError, ...restConfig } = mutationConfig || {};

    return useMutation(
        {
            mutationFn: createUniversity,
            onSuccess: (...args) => {
                queryClient.invalidateQueries({ queryKey: getUniversityQueryOptions().queryKey });
                onSuccess?.(...args);
            },
            onError: (error, variables, context) => {
                console.error('Error creating University:', error);
                onError?.(error, variables, context);
            },
            ...restConfig,
        }
    )
}
</file>

<file path="src/pages/Dashboard/Pages/Ushtrime/api/delete-drejtimi.ts">
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import { getDrejtimiQueryOptions } from "./get-drejtimi";

type DeleteContractProp = {
    drejtimiId: number;
  };

  export const deleteDrejtimi = ({ drejtimiId }: DeleteContractProp) => {
    return api.delete(`/drejtimi/${drejtimiId}`);
  };
  
  type UseDeleteContractOptions = {
    mutationConfig?: MutationConfig<typeof deleteDrejtimi>;
  };
  
  export const useDeleteDrejtimi = ({
    mutationConfig,
  }: UseDeleteContractOptions = {}) => {
    const queryClient = useQueryClient();
  
    const { onSuccess, ...restConfig } = mutationConfig || {};
  
    return useMutation({
      onSuccess: (...args) => {
        queryClient.invalidateQueries({
          queryKey: getDrejtimiQueryOptions().queryKey,
        });
        onSuccess?.(...args);
      },
      ...restConfig,
      mutationFn: deleteDrejtimi,
    });
  };
</file>

<file path="src/pages/Dashboard/Pages/Ushtrime/api/delete-university.ts">
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import { getUniversityQueryOptions } from "./get-universities";

type DeleteContractProp = {
    universityId: number;
  };

  export const deleteUniversity = ({ universityId }: DeleteContractProp) => {
    return api.delete(`/university/${universityId}`);
  };
  
  type UseDeleteContractOptions = {
    mutationConfig?: MutationConfig<typeof deleteUniversity>;
  };
  
  export const useDeleteUniversity = ({
    mutationConfig,
  }: UseDeleteContractOptions = {}) => {
    const queryClient = useQueryClient();
  
    const { onSuccess, ...restConfig } = mutationConfig || {};
  
    return useMutation({
      onSuccess: (...args) => {
        queryClient.invalidateQueries({
          queryKey: getUniversityQueryOptions().queryKey,
        });
        onSuccess?.(...args);
      },
      ...restConfig,
      mutationFn: deleteUniversity,
    });
  };
</file>

<file path="src/pages/Dashboard/Pages/Ushtrime/api/get-drejtimi.ts">
import { queryOptions, useQuery } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";

export type Drejtimi = {
    id: number;
    name: string;
duration : string;
universityId : number;
    };

export const getDrejtimis = (): Promise<Drejtimi[]> => {
  return api.get(`/Drejtimi`);
};

export const getDrejtimiQueryOptions = () => {
  return queryOptions({
    queryKey: ["getDrejtimi"],
    queryFn: () => getDrejtimis(),
  });
};

type UseDrejtimiOptions = {
  queryConfig?: QueryConfig<typeof getDrejtimiQueryOptions>;
};

export const useDrejtimiData = ({ queryConfig }: UseDrejtimiOptions) => {
  return useQuery({
    ...getDrejtimiQueryOptions(),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Ushtrime/api/get-universities.ts">
import { queryOptions, useQuery } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";

export type University = {
    id: number;
    name: string;
city : string;
    };

export const getUniversities = (): Promise<University[]> => {
  return api.get(`/university`);
};

export const getUniversityQueryOptions = () => {
  return queryOptions({
    queryKey: ["getUniversity"],
    queryFn: () => getUniversities(),
  });
};

type UseUniversityOptions = {
  queryConfig?: QueryConfig<typeof getUniversityQueryOptions>;
};

export const useUniversityData = ({ queryConfig }: UseUniversityOptions) => {
  return useQuery({
    ...getUniversityQueryOptions(),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Ushtrime/api/update-university.ts">
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { z } from "zod";
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import { getUniversityQueryOptions, University } from "./get-universities";
// import { Employee, getEmployeeQueryOptions } from "./get-universities";

export const updateUniversityInputSchema = z.object({
  name : z.string().min(1, {message: 'Name is required'}),
    city : z.string().min(1, {message: 'Surname is required'}),
}
);

export type UpdateUniversityInput = z.infer<typeof updateUniversityInputSchema>;

export const updateUniversity = ({ data, universityId }: { data: UpdateUniversityInput, universityId: number}): Promise<University> => {
  return (
    console.log("data", data, universityId),
    api.put(`/university/${universityId}`, data));
};

type UseUpdateUniversityOptions = {
  mutationConfig?: MutationConfig<typeof updateUniversity>;
};

export const useUpdateUniversity = ({ mutationConfig }: UseUpdateUniversityOptions = {}) => {
  const queryClient = useQueryClient();
  
  const { onSuccess, onError, ...restConfig } = mutationConfig || {};

  return useMutation({
    mutationFn: updateUniversity,
    onSuccess: (data, ...args) => {
      queryClient.refetchQueries({ queryKey: getUniversityQueryOptions().queryKey });
      onSuccess?.(data, ...args);
    },
    onError: (error, variables, context) => {
      console.error('Error updating employee:', error);
      onError?.(error, variables, context);
    },
    ...restConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Ushtrime/comp/create-drejtimi.tsx">
import { useNotifications } from "@/common/Notifications";
import { FormDrawer } from "@/components/ui/form";
import { Button } from "@/components/ui";
import { Plus } from "lucide-react";
import { Input, Label } from "@/components/ui/form";
import { Form } from "@/components/ui/form";
import {
  createDrejtimiInputSchema,
  useCreateDrejtimi,
} from "../api/create-drejtimi";
import { useUniversityData } from "../api/get-universities";

export const CreateDrejtimiForm = () => {
  const { addNotification } = useNotifications();
  const createContractsMutation = useCreateDrejtimi({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Drejtimi Created",
        });
      },
    },
  });

  const employees = useUniversityData({});

  return (
    <FormDrawer
      isDone={createContractsMutation.isSuccess}
      triggerButton={
        <Button variant="default" size="sm" icon={<Plus className="size-4" />}>
          Create New Drejtim
        </Button>
      }
      title="Create New Drejtim"
      submitButton={
        <Button
          form="create-contact"
          variant="addSave"
          className="rounded-sm text-white"
          type="submit"
          size="default"
          isPending={createContractsMutation.isPending}
          disabled={createContractsMutation.isPending}
        >
          Submit
        </Button>
      }
    >
      <Form
        id="create-contact"
        onSubmit={(values) => {
          createContractsMutation.mutate({ data: values });
        }}
        schema={createDrejtimiInputSchema}
      >
        {({ register, formState }) => {
          return (
            <>
              <div>
                <Label htmlFor="title" className="text-sm font-medium">
                  Name
                </Label>
                <Input
                  id="title"
                  className={`py-2 ${
                    formState.errors["name"]
                      ? "border-red-500"
                      : "border-border"
                  }`}
                  placeholder="Enter new name here..."
                  error={formState.errors["name"]}
                  registration={register("name")}
                />
                <Input
                  id="description"
                  className={`py-2 ${
                    formState.errors["duration"]
                      ? "border-red-500"
                      : "border-border"
                  }`}
                  placeholder="Enter duration here..."
                  error={formState.errors["duration"]}
                  registration={register("duration")}
                />
                <Label htmlFor="universityId" className="text-sm font-medium">
                  Employee
                </Label>
                <select
                  id="universityId"
                  {...register("universityId", { valueAsNumber: true })}
                >
                  {employees.data &&
                    employees.data.map((employee) => (
                      <option key={employee.id} value={employee.id}>
                        {employee.name}
                      </option>
                    ))}
                </select>
              </div>
            </>
          );
        }}
      </Form>
    </FormDrawer>
  );
};

export default CreateDrejtimiForm;
</file>

<file path="src/pages/Dashboard/Pages/Ushtrime/comp/create-university.tsx">
import { useNotifications } from "@/common/Notifications";
import { FormDrawer } from "@/components/ui/form";
import { Button } from "@/components/ui";
import { Plus } from "lucide-react";
import { Input, Label } from "@/components/ui/form";
import { Form } from "@/components/ui/form";
import {
  createUniversityInputSchema,
  useCreateUniversity,
} from "../api/create-university";

export const CreateUniversityForm = () => {
  const { addNotification } = useNotifications();
  const createUniversityMutation = useCreateUniversity({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "University Created",
        });
      },
    },
  });

  return (
    <FormDrawer
      isDone={createUniversityMutation.isSuccess}
      triggerButton={
        <Button variant="default" size="sm" icon={<Plus className="size-4" />}>
          Create New University
        </Button>
      }
      title="Create New University"
      submitButton={
        <Button
          form="create-university"
          variant="addSave"
          className="rounded-sm text-white"
          type="submit"
          size="default"
          isPending={createUniversityMutation.isPending}
          disabled={createUniversityMutation.isPending}
        >
          Submit
        </Button>
      }
    >
      <Form
        id="create-university"
        onSubmit={(values) => {
          createUniversityMutation.mutate({ data: values });
        }}
        schema={createUniversityInputSchema}
      >
        {({ register, formState }) => {
          return (
            <>
              <div>
                <Label htmlFor="name" className="text-sm font-medium">
                  Name
                </Label>
                <Input
                  id="name"
                  className={`py-2 ${
                    formState.errors["name"]
                      ? "border-red-500"
                      : "border-border"
                  }`}
                  placeholder="Enter new name here..."
                  error={formState.errors["name"]}
                  registration={register("name")}
                />

                <Input
                  id="city"
                  className={`py-2 ${
                    formState.errors["city"]
                      ? "border-red-500"
                      : "border-border"
                  }`}
                  placeholder="Enter city here..."
                  error={formState.errors["city"]}
                  registration={register("city")}
                />
              </div>
            </>
          );
        }}
      </Form>
    </FormDrawer>
  );
};

export default CreateUniversityForm;
</file>

<file path="src/pages/Dashboard/Pages/Ushtrime/comp/delete-drejtimi.tsx">
import { useNotifications } from "@/common/Notifications";
import { ConfirmationDialog } from "@/components/ui/dialog";
import { Button } from "@/components/ui";
import { Trash2 } from "lucide-react";
import { useDeleteDrejtimi } from "../api/delete-drejtimi";

type DeleteContractProp = {
  id: number;
};
export const DeleteDrejtimi = ({ id }: DeleteContractProp) => {
  const { addNotification } = useNotifications();
  const deleteContractMutation = useDeleteDrejtimi({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Drejtimi Deleted",
        });
      },
    },
  });

  return (
    <ConfirmationDialog
      isDone={deleteContractMutation.isSuccess}
      icon="danger"
      title="Delete Drejtimi"
      body="This action cannot be undone."
      triggerButton={
        <Button className="rounded-xl">
          <Trash2 size={16} />
        </Button>
      }
      confirmButton={
        <Button
          isPending={deleteContractMutation.isPending}
          type="button"
          variant="destructive"
          onClick={() => {
            deleteContractMutation.mutate({ drejtimiId: id });
          }}
        >
          Delete Drejtimi
        </Button>
      }
    />
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Ushtrime/comp/delete-university.tsx">
import { useNotifications } from "@/common/Notifications";
import { ConfirmationDialog } from "@/components/ui/dialog";
import { Button } from "@/components/ui";
import { Trash2 } from "lucide-react";
import { useDeleteUniversity } from "../api/delete-university";

type DeleteContractProp = {
  id: number;
};
export const DeleteUniversity = ({ id }: DeleteContractProp) => {
  const { addNotification } = useNotifications();
  const deleteContractMutation = useDeleteUniversity({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "University Deleted",
        });
      },
    },
  });

  return (
    <ConfirmationDialog
      isDone={deleteContractMutation.isSuccess}
      icon="danger"
      title="Delete Univeristy"
      body="This action cannot be undone."
      triggerButton={
        <Button className="rounded-xl">
          <Trash2 size={16} />
        </Button>
      }
      confirmButton={
        <Button
          isPending={deleteContractMutation.isPending}
          type="button"
          variant="destructive"
          onClick={() => {
            deleteContractMutation.mutate({ universityId: id });
          }}
        >
          Delete University
        </Button>
      }
    />
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Ushtrime/comp/update-university.tsx">
import { useNotifications } from "@/common/Notifications";
import { FormDrawer } from "@/components/ui/form";
import { Button } from "@/components/ui";
import { Plus } from "lucide-react";
import { Input, Label } from "@/components/ui/form";
import { Form } from "@/components/ui/form";
import { useUpdateUniversity } from "../api/update-university";
import { createUniversityInputSchema } from "../api/create-university";
import { University } from "../api/get-universities";

export const UpdateUniversityForm = ({
  universityId,
  university,
}: {
  universityId: number;
  university: University;
}) => {
  const { addNotification } = useNotifications();
  const updateEmployeeMutation = useUpdateUniversity({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "University updated",
        });
      },
    },
  });

  return (
    <FormDrawer
      isDone={updateEmployeeMutation.isSuccess}
      triggerButton={
        <Button variant="default" size="sm" icon={<Plus className="size-4" />}>
          Update
        </Button>
      }
      title="Update Employee"
      submitButton={
        <Button
          form="update-employee"
          variant="addSave"
          className="rounded-sm text-white"
          type="submit"
          size="default"
          isPending={updateEmployeeMutation.isPending}
          disabled={updateEmployeeMutation.isPending}
        >
          Submit
        </Button>
      }
    >
      <Form
        id="update-employee"
        onSubmit={(values) => {
          updateEmployeeMutation.mutate({
            data: values,
            universityId: universityId,
          });
        }}
        schema={createUniversityInputSchema}
      >
        {({ register, formState }) => {
          return (
            <>
              <div>
                <Label htmlFor="name" className="text-sm font-medium">
                  Name
                </Label>
                <Input
                  id="name"
                  className={`py-2 ${
                    formState.errors["name"]
                      ? "border-red-500"
                      : "border-border"
                  }`}
                  defaultValue={university.name}
                  placeholder="Enter new name here..."
                  error={formState.errors["name"]}
                  registration={register("name")}
                />

                <Input
                  id="surname"
                  className={`py-2 ${
                    formState.errors["city"]
                      ? "border-red-500"
                      : "border-border"
                  }`}
                  defaultValue={university.city}
                  placeholder="Enter surname here..."
                  error={formState.errors["city"]}
                  registration={register("city")}
                />
              </div>
            </>
          );
        }}
      </Form>
    </FormDrawer>
  );
};

export default UpdateUniversityForm;
</file>

<file path="src/pages/Home/components/choose-quiz-dialog.tsx">
import { Button } from "@/components/ui";
import { ChooseQuizDialog } from "./quiz-confirmation-dialog";
import { Link } from "react-router-dom";

export const ChooseQuiz = () => {
  return (
    <ChooseQuizDialog
      title="Choose Quiz Mode"
      triggerButton={
        <Button
          variant={"fancy"}
          className={`text-5xl px-9 py-7 font-secondary`}
        >
          Play
        </Button>
      }
      randomQuizButton={<Button variant={"fancy"}>Random Quiz</Button>}
      chooseQuizButton={
        <Link to="/choose-quiz">
          {" "}
          <Button variant={"fancy"}> Choose a Quiz</Button>
        </Link>
      }
    />
  );
};
</file>

<file path="src/pages/Home/components/quiz-confirmation-dialog.tsx">
import * as React from "react"
import { useEffect } from "react"
import { useDisclosure } from "@/hooks/use-disclosure"
import { Shuffle, List } from "lucide-react"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"

export type ChooseQuizDialogProps = {
  triggerButton: React.ReactElement
  randomQuizButton: React.ReactElement
  chooseQuizButton: React.ReactElement
  title: string
  body?: string
  cancelButtonText?: string
  icon?: "danger" | "info"
  isDone?: boolean
}

export const ChooseQuizDialog = ({
  triggerButton,
  randomQuizButton,
  chooseQuizButton,
  title,
  body = "Select how you'd like to start your quiz experience",
  isDone = false,
}: ChooseQuizDialogProps) => {
  const { close, open, isOpen } = useDisclosure()

  useEffect(() => {
    if (isDone) {
      close()
    }
  }, [isDone, close])

  return (
    <Dialog
      open={isOpen}
      onOpenChange={(isOpen) => {
        if (!isOpen) {
          close()
        } else {
          open()
        }
      }}
    >
      <DialogTrigger asChild>{triggerButton}</DialogTrigger>

      <DialogContent className="sm:max-w-md p-6 bg-background/95 backdrop-blur-lg">
        <DialogHeader>
          <DialogTitle className="text-center text-2xl">{title}</DialogTitle>
          {body && <p className="text-center text-muted-foreground mt-2">{body}</p>}
        </DialogHeader>

        <div className="grid grid-cols-1 gap-4 py-4 md:grid-cols-2">
          <Card className="cursor-pointer transition-all hover:border-primary hover:shadow-md overflow-hidden">
            <CardHeader className="pb-2">
              <div className="mx-auto rounded-full bg-primary/10 p-2">
                <Shuffle className="h-6 w-6 text-primary" />
              </div>
              <CardTitle className="pt-2 text-center">Random Quiz</CardTitle>
            </CardHeader>
            <CardContent>
              <CardDescription className="text-center">
                Get a randomly selected quiz for a surprise challenge
              </CardDescription>
            </CardContent>
            <CardFooter className="justify-center pt-0">
              {React.cloneElement(randomQuizButton, {
                className: `${randomQuizButton.props.className || ""} w-full justify-center`,
              })}
            </CardFooter>
          </Card>

          <Card className="cursor-pointer transition-all hover:border-primary hover:shadow-md overflow-hidden">
            <CardHeader className="pb-2">
              <div className="mx-auto rounded-full bg-primary/10 p-2">
                <List className="h-6 w-6 text-primary" />
              </div>
              <CardTitle className="pt-2 text-center">Choose a Quiz</CardTitle>
            </CardHeader>
            <CardContent>
              <CardDescription className="text-center">
                Browse and select from our collection of available quizzes
              </CardDescription>
            </CardContent>
            <CardFooter className="justify-center pt-0">
              {React.cloneElement(chooseQuizButton, {
                className: `${chooseQuizButton.props.className || ""} w-full justify-center`,
              })}
            </CardFooter>
          </Card>
        </div>
      </DialogContent>
    </Dialog>
  )
}
</file>

<file path="src/pages/Home/Home.tsx">
import RotatingText from "@/common/Effect-Related/word-switching";
import { ChooseQuiz } from "./components/choose-quiz-dialog";
export const Home = () => {
  return (
    <div className="relative z-10 min-h-screen w-full flex flex-col items-center justify-center text-foreground gap-5">
      <div className="flex items-center justify-center gap-2 text-6xl text-foreground">
        <h1>Sharpen Your</h1>
        <RotatingText
          texts={["Thinking ", "Mind ", "Memory ", "Logic "]}
          mainClassName="px-2 sm:px-2 md:px-3 bg-cyan-300 text-black font-header font-semibold italic overflow-hidden py-0.5 sm:py-1 md:py-2 justify-center rounded-lg"
          staggerFrom={"last"}
          initial={{ y: "100%" }}
          animate={{ y: 0 }}
          exit={{ y: "-120%" }}
          staggerDuration={0.025}
          splitLevelClassName="overflow-hidden pb-0.5 sm:pb-1 md:pb-1"
          transition={{ type: "spring", damping: 30, stiffness: 350 }}
          rotationInterval={2000}
        />
      </div>
      <div className="flex items-center flex-col justify-center items-center">
        {/* <h1 className="text-7xl font-secondary text-center">
          Take part in the game and train your brain to think faster.
        </h1> */}
        <ChooseQuiz />
      </div>
    </div>
  );
};
</file>

<file path="src/pages/Quiz/api/get-categorized-quizzes.ts">
import { useQuery, queryOptions } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";
import {  Quiz } from "@/types/ApiTypes";

export const getCategoriedQuizzes = (): Promise<Quiz[]> => {
  return api.get(`/quizzes/by-category`);
};

export const getCategorizedQuizzesQueryOptions = (
) => {
  return queryOptions({
    queryKey: ["categorizedQuizzes"],
    queryFn: () => getCategoriedQuizzes(),
  });
};

type UseQuizOptions = {
  queryConfig?: QueryConfig<typeof getCategorizedQuizzesQueryOptions>;
};

export const useCategoriedQuizzesData = ({
  queryConfig,
}: UseQuizOptions) => {
  return useQuery({
    ...getCategorizedQuizzesQueryOptions(),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Quiz/components/quiz-card.tsx">
import type React from "react";

import { useState } from "react";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { ArrowRight, Brain, Trophy, HelpCircle } from "lucide-react";
import { Quiz } from "@/types/ApiTypes";

interface QuizCardProps {
  quiz: Quiz;
}

export function QuizCard({ quiz }: QuizCardProps) {
  const [isHovered, setIsHovered] = useState(false);

  // const difficultyStyles = {
  //   Beginner:
  //     "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400",
  //   Intermediate:
  //     "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400",
  //   Advanced: "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400",
  // }[quiz.difficulty];

  // const difficultyIcon = {
  //   Beginner: <Brain className="h-4 w-4 mr-1" />,
  //   Intermediate: <Brain className="h-4 w-4 mr-1" />,
  //   Advanced: <Trophy className="h-4 w-4 mr-1" />,
  // }[quiz.difficulty];

  const handleStartQuiz = (e: React.MouseEvent) => {
    e.preventDefault();
  };

  return (
    <motion.div
      className="h-full"
      whileHover={{
        scale: 1.03,
        rotate: isHovered ? 0 : 0.5,
      }}
      transition={{ type: "spring", stiffness: 300, damping: 15 }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div
        className={`relative h-full rounded-2xl overflow-hidden shadow-lg border-2 border-transparent transition-all duration-300 ${
          isHovered ? "border-primary/50 shadow-xl" : ""
        }`}
      >
        {/* Gradient background */}
        <div
          className={`absolute inset-0 bg-gradient-to-br opacity-10 dark:opacity-20`}
        />

        {/* Card content */}
        <div className="relative p-6 h-full flex flex-col">
          {/* Category and emoji */}
          <div className="flex justify-between items-center mb-4">
            {/* <span className="text-4xl">{quiz.category.emoji}</span> */}
            <span className="text-sm font-medium text-muted-foreground bg-background/80 px-3 py-1 rounded-full">
              {quiz.category}
            </span>
          </div>

          {/* Title */}
          <h3 className="text-xl font-bold mb-2">{quiz.title}</h3>

          {/* Description */}
          <p className="text-muted-foreground text-sm mb-6">
            {quiz.description}
          </p>

          {/* Quiz details */}
          <div className="mt-auto">
            <div className="flex justify-between items-center mb-4">
              <div className="inline-flex items-center text-sm text-muted-foreground">
                <HelpCircle className="h-4 w-4 mr-1" />
                {quiz.numberOfQuestions} questions
              </div>
            </div>

            {/* Start button */}
            <Button
              className="w-full group bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary"
              onClick={handleStartQuiz}
            >
              Start Quiz
              <motion.div
                animate={{ x: isHovered ? 4 : 0 }}
                transition={{ type: "spring", stiffness: 300, damping: 10 }}
              >
                <ArrowRight className="ml-2 h-4 w-4" />
              </motion.div>
            </Button>
          </div>
        </div>
      </div>
    </motion.div>
  );
}
</file>

<file path="src/pages/Quiz/components/quiz-filters.tsx">
"use client"

import { motion } from "framer-motion"
import { Search, Filter } from "lucide-react"
import { Input } from "@/components/ui/form"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface QuizFiltersProps {
  searchQuery?: string
  setSearchQuery: (query: string) => void
  difficultyFilter?: string
  setDifficultyFilter?: (difficulty: string) => void
  categoryFilter?: string
  setCategoryFilter?: (category: string) => void
  categories?: string[]
}

export function QuizFilters({
  searchQuery,
  setSearchQuery,
  difficultyFilter,
  setDifficultyFilter,
  categoryFilter,
  setCategoryFilter,
  categories,
}: QuizFiltersProps) {
  return (
    <motion.div
      className="mb-10 bg-card rounded-xl p-4 shadow-lg border"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
          <Input
            type="text"
            placeholder="Search for a quiz..."
            className="pl-9 h-12 bg-background"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>

        <div className="flex flex-col sm:flex-row gap-4">
          <div className="w-full sm:w-auto">
            <Select value={difficultyFilter} onValueChange={setDifficultyFilter}>
              <SelectTrigger className="w-full sm:w-[180px] h-12 bg-background">
                <div className="flex items-center">
                  <Filter className="mr-2 h-4 w-4 text-muted-foreground" />
                  <SelectValue placeholder="Difficulty" />
                </div>
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Difficulties</SelectItem>
                <SelectItem value="Beginner">Beginner</SelectItem>
                <SelectItem value="Intermediate">Intermediate</SelectItem>
                <SelectItem value="Advanced">Advanced</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="w-full sm:w-auto">
            <Select value={categoryFilter} onValueChange={setCategoryFilter}>
              <SelectTrigger className="w-full sm:w-[180px] h-12 bg-background">
                <div className="flex items-center">
                  <Filter className="mr-2 h-4 w-4 text-muted-foreground" />
                  <SelectValue placeholder="Category" />
                </div>
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Categories</SelectItem>
                {categories && categories
                  .filter((cat) => cat !== "all")
                  .map((category) => (
                    <SelectItem key={category} value={category}>
                      {category}
                    </SelectItem>
                  ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      </div>
    </motion.div>
  )
}
</file>

<file path="src/pages/Quiz/components/quiz-header.tsx">
import { motion } from "framer-motion"
import { Sparkles } from "lucide-react"

export function QuizHeader() {
  return (
    <div className="relative overflow-hidden">
      {/* Background pattern */}
      <div className="absolute inset-0 -z-10 opacity-10">
        <div className="absolute top-0 left-0 w-full h-full">
          {[...Array(20)].map((_, i) => (
            <div
              key={i}
              className="absolute rounded-full bg-primary/80"
              style={{
                width: `${Math.random() * 50 + 10}px`,
                height: `${Math.random() * 50 + 10}px`,
                top: `${Math.random() * 100}%`,
                left: `${Math.random() * 100}%`,
                opacity: Math.random() * 0.5 + 0.1,
              }}
            />
          ))}
        </div>
      </div>

      <div className="container mx-auto px-4 py-16 md:py-24 text-center relative">
        <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
          <div className="inline-flex items-center justify-center mb-4 bg-primary/10 px-4 py-2 rounded-full">
            <Sparkles className="h-5 w-5 mr-2 text-primary" />
            <span className="font-medium text-primary">Challenge Your Mind</span>
          </div>

          <h1 className="text-4xl md:text-6xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-primary to-primary/70">
            Quiz Adventure
          </h1>

          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            Embark on a journey of knowledge and fun with our collection of interactive quizzes!
          </p>
        </motion.div>
      </div>
    </div>
  )
}
</file>

<file path="src/pages/Quiz/Quiz-Selection.tsx">
import { useState } from "react";
import { QuizCard } from "./components/quiz-card";
import { QuizHeader } from "./components/quiz-header";
import { QuizFilters } from "./components/quiz-filters";
import { motion } from "framer-motion";
import { useCategoriedQuizzesData } from "./api/get-categorized-quizzes";
import { ArchiveX } from "lucide-react";

// interface Quiz {
//   id: string;
//   title: string;
//   description: string;
//   difficulty: "Beginner" | "Intermediate" | "Advanced";
//   questionCount: number;
//   category: string;
//   emoji: string;
//   color: string;
// }

// // Sample quiz data
// const quizzes: Quiz[] = [
//   {
//     id: "1",
//     title: "World History Fundamentals",
//     description:
//       "Test your knowledge of key historical events and figures throughout world history.",
//     difficulty: "Beginner",
//     questionCount: 15,
//     category: "History",
//     emoji: "🏛️",
//     color: "from-amber-400 to-orange-500",
//   },
//   {
//     id: "2",
//     title: "Advanced Physics Concepts",
//     description:
//       "Challenge yourself with complex physics problems and theoretical concepts.",
//     difficulty: "Advanced",
//     questionCount: 20,
//     category: "Science",
//     emoji: "⚛️",
//     color: "from-cyan-400 to-blue-500",
//   },
//   {
//     id: "3",
//     title: "Literature Classics",
//     description:
//       "Explore famous works of literature and their authors from around the world.",
//     difficulty: "Intermediate",
//     questionCount: 25,
//     category: "Literature",
//     emoji: "📚",
//     color: "from-purple-400 to-indigo-500",
//   },
//   {
//     id: "4",
//     title: "Geography Challenge",
//     description:
//       "Test your knowledge of countries, capitals, landmarks, and geographical features.",
//     difficulty: "Intermediate",
//     questionCount: 30,
//     category: "Geography",
//     emoji: "🌍",
//     color: "from-green-400 to-emerald-500",
//   },
//   {
//     id: "5",
//     title: "Computer Science Basics",
//     description:
//       "Learn fundamental concepts in computer science and programming.",
//     difficulty: "Beginner",
//     questionCount: 15,
//     category: "Technology",
//     emoji: "💻",
//     color: "from-slate-400 to-slate-600",
//   },
//   {
//     id: "6",
//     title: "Mathematical Puzzles",
//     description:
//       "Solve challenging mathematical problems and puzzles that test logical thinking.",
//     difficulty: "Advanced",
//     questionCount: 18,
//     category: "Mathematics",
//     emoji: "🧮",
//     color: "from-rose-400 to-pink-500",
//   },
//   {
//     id: "7",
//     title: "General Knowledge",
//     description:
//       "Test your knowledge across a wide range of topics and subjects.",
//     difficulty: "Beginner",
//     questionCount: 25,
//     category: "General",
//     emoji: "🧠",
//     color: "from-yellow-400 to-amber-500",
//   },
//   {
//     id: "8",
//     title: "Music Theory",
//     description:
//       "Explore the fundamentals of music theory, notation, and composition.",
//     difficulty: "Intermediate",
//     questionCount: 20,
//     category: "Arts",
//     emoji: "🎵",
//     color: "from-violet-400 to-purple-500",
//   },
// ];

export function QuizSelection() {
  const [searchQuery, setSearchQuery] = useState("");
  const quizzes = useCategoriedQuizzesData({}).data || [];

  // const [difficultyFilter, setDifficultyFilter] = useState("all");
  // const [categoryFilter, setCategoryFilter] = useState("all");

  return (
    <div className="min-h-screen bg-gradient-to-b from-background overflow-y-auto to-background/80 pb-20 text-foreground">
      <QuizHeader />

      <div className="container mx-auto px-4">
        <QuizFilters
          searchQuery={searchQuery}
          setSearchQuery={setSearchQuery}
        />
        {quizzes.length === 0 && (
          <div className="flex items-center flex-col justify-center text-lg text-primary w-full">
            No quizzes found
            <ArchiveX />
          </div>
        )}
        <motion.div
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          {quizzes.map((quiz, index) => (
            <motion.div
              key={quiz.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1, duration: 0.5 }}
            >
              <QuizCard quiz={quiz} />
            </motion.div>
          ))}
        </motion.div>
      </div>
    </div>
  );
}
</file>

<file path="src/pages/UserRelated/Login/LoginForm.tsx">
import React, { useState } from "react";
import InputField from "@/common/InputField";
import { Button } from "@/components/ui/button";

/**
 *
 * @LoginForm '
 *
 */

interface LoginFormProps {
  onLogin: (email: string, password: string) => void;
  isPending: boolean;
}

const LoginForm: React.FC<LoginFormProps> = ({ onLogin, isPending }) => {
  const [formData, setFormData] = useState({
    email: "admin@example.com",
    password: "admin",
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onLogin(formData.email, formData.password);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 w-full">
      <div className="flex flex-col space-y-2">
        <InputField
          label="Email"
          placeholder="Email"
          type="email"
          name="email"
          id="email"
          value={formData.email}
          onChange={handleChange}
          required
        />
      </div>
      <div className="flex flex-col space-y-2">
        <InputField
          label="Password"
          placeholder="Password"
          type="password"
          name="password"
          id="password"
          value={formData.password}
          onChange={handleChange}
          required
        />
      </div>
      <Button
        onClick={handleSubmit}
        variant={"addSave"}
        isPending={isPending}
        className="w-full py-3 text-white"
      >
        Log in
      </Button>
    </form>
  );
};

export default LoginForm;
</file>

<file path="src/pages/UserRelated/SettingsPage/Settings.tsx">
export const Settings = () => {
  return (
    <div className="h-screen w-full flex items-center justify-center bg-[var(--muted-primary)] ">
      <div className="bg-[var(--muted)] h-full w-[60%] p-8 overflow-y-auto pt-20">
        <h1 className="text-3xl font-bold mb-6">Settings</h1>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Account</h2>
          <button className="bg-blue-500 text-white px-4 py-2 rounded mb-2 w-full">
            Change Username
          </button>
          <button className="bg-blue-500 text-white px-4 py-2 rounded mb-2 w-full">
            Change Password
          </button>
          <button className="bg-blue-500 text-white px-4 py-2 rounded w-full">
            Update Email
          </button>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Preferences</h2>
          <div className="flex items-center justify-between mb-2">
            <span>Dark Mode</span>
            <input type="checkbox" className="toggle" />
          </div>
          <div className="flex items-center justify-between mb-2">
            <span>Sound Effects</span>
            <input type="checkbox" className="toggle" />
          </div>
          <div className="flex items-center justify-between">
            <span>Show Timer</span>
            <input type="checkbox" className="toggle" />
          </div>
        </section>

        <section className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Quiz Settings</h2>
          <div className="mb-2">
            <label className="block mb-1">Default Difficulty</label>
            <select className="w-full p-2 rounded border">
              <option>Easy</option>
              <option>Medium</option>
              <option>Hard</option>
            </select>
          </div>
          <div>
            <label className="block mb-1">Questions per Quiz</label>
            <input
              type="number"
              min="5"
              max="50"
              className="w-full p-2 rounded border"
            />
          </div>
        </section>

        <section>
          <h2 className="text-xl font-semibold mb-4">Data Management</h2>
          <button className="bg-red-500 text-white px-4 py-2 rounded mb-2 w-full">
            Clear Quiz History
          </button>
          <button className="bg-red-500 text-white px-4 py-2 rounded w-full">
            Delete Account
          </button>
        </section>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/UserRelated/Signup/Signup.tsx">
import React from "react";
import SignupForm from "./SignupComponents/SignupForm";
import SocialButtons from "@/lib/SocialButtons/SocialButtons";
import { ModeToggle } from "@/components/ui/mode-toggle";
import { O2Button } from "@/common/O2Button";
import { GoBackButton } from "@/common/Go-Back-Button";

const Signup: React.FC = () => {
  return (
    <div className="h-screen w-full flex flex-col bg-background text-foreground">
      <div className="relative flex justify-center pt-10">
        <div className="absolute top-4 flex justify-between gap-5 w-full px-5">
          <GoBackButton />
          <ModeToggle text={true} />
        </div>
        <O2Button />
      </div>
      <div className="flex-grow flex items-center justify-center">
        <div className="bg-muted p-8 rounded shadow-md w-[50%] max-w-lg flex-grow flex flex-col items-center justify-center">
          <div className="w-[70%]">
            <h2 className="text-3xl font-semibold mb-6 text-center">
              Create an Account
            </h2>
            <SignupForm />
            <div className="text-center mt-4">
              <p className="text-sm">
                Already have an account?{" "}
                <a href="/login" className="text-foreground underline">
                  Login
                </a>
              </p>
            </div>
            <div className="relative mt-8">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300"></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="bg-muted px-2">OR</span>
              </div>
            </div>
            <SocialButtons />
          </div>
        </div>
      </div>
    </div>
  );
};

export default Signup;
</file>

<file path="src/pages/UserRelated/Signup/SignupComponents/SignupForm.tsx">
import React, { useState } from "react";
import SignupProgressDisplay from "./SignupProgressDisplay";
import SignupSteps from "./SignupSteps";
import Steps from "@/common/Steps";
import { Label } from "@/components/ui/form";

export const SignupForm: React.FC = () => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleNextStep = () => setStep((prev) => prev + 1);
  const handlePreviousStep = () => setStep((prev) => Math.max(prev - 1, 1));

  const handleFinalSubmit = () => {
    console.log(formData);
    // Perform the final submission logic here
  };

  const handleNext = step === 4 ? handleFinalSubmit : handleNextStep;

  return (
    <>
      <section className="flex flex-col justify-center gap-5">
        <Label className="self-center">Steps</Label>
        <Steps currentStep={step} totalSteps={4} separatorColor="background" />
      </section>

      <SignupProgressDisplay
        step={step}
        username={formData.username}
        email={formData.email}
        setStep={setStep}
      />
      <form
        className="space-y-4 text-lg"
        onSubmit={(e) => {
          e.preventDefault();
          handleFinalSubmit();
        }}
      >
        <SignupSteps
          step={step}
          formData={formData}
          handleChange={handleChange}
          handleNext={handleNext}
          handlePreviousStep={handlePreviousStep}
        />
      </form>
    </>
  );
};

export default SignupForm;
</file>

<file path="src/pages/UserRelated/Signup/SignupComponents/SignupProgressDisplay.tsx">
import React from "react";
import { Divider } from "@/common/Divider";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface SignupProgressDisplayProps {
  step: number;
  username: string;
  email: string;
  setStep: (step: number) => void;
}

const SignupProgressDisplay: React.FC<SignupProgressDisplayProps> = ({
  step,
  username,
  email,
  setStep,
}) => (
  <TooltipProvider>
    <div className="mt-6 mb-6 space-y-2 ">
      {step > 1 && (
        <Tooltip>
          <TooltipTrigger asChild>
            <p
              className="text-lg text-foreground bg-muted p-1 cursor-pointer hover:scale-105 transition-transform duration-300"
              onClick={() => setStep(1)}
            >
              <strong className="text-foreground">Username:</strong> {username}
            </p>
          </TooltipTrigger>
          <TooltipContent className="bg-background">
            <p>Go back to username</p>
          </TooltipContent>
        </Tooltip>
      )}
      {step > 2 && (
        <Tooltip>
          <TooltipTrigger asChild>
            <p
              className="text-lg text-foreground bg-muted p-1 cursor-pointer hover:scale-105 transition-transform duration-300"
              onClick={() => setStep(2)}
            >
              <strong className="text-foreground">Email:</strong> {email}
            </p>
          </TooltipTrigger>
          <TooltipContent className="bg-background">
            <p>Go back to email</p>
          </TooltipContent>
        </Tooltip>
      )}

      <Divider />
    </div>
  </TooltipProvider>
);

export default SignupProgressDisplay;
</file>

<file path="src/pages/UserRelated/Signup/SignupComponents/SignupSteps.tsx">
import React from "react";
import Step from "./Step";

interface SignupStepsProps {
  step: number;
  formData: {
    username: string;
    email: string;
    password: string;
    confirmPassword: string;
  };
  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  handleNext: () => void;
  handlePreviousStep: () => void;
}

const SignupSteps: React.FC<SignupStepsProps> = ({
  step,
  formData,
  handleChange,
  handleNext,
  handlePreviousStep,
}) => {
  const steps = [
    {
      label: "Username",
      name: "username",
      type: "text",
      placeholder: "Username",
      value: formData.username,
    },
    {
      label: "Email",
      name: "email",
      type: "email",
      placeholder: "Email",
      value: formData.email,
    },
    {
      label: "Password",
      name: "password",
      type: "password",
      placeholder: "Password",
      value: formData.password,
    },
    {
      label: "Confirm Password",
      name: "confirmPassword",
      type: "password",
      placeholder: "Confirm Password",
      value: formData.confirmPassword,
    },
  ];

  return (
    <Step
      {...steps[step - 1]}
      name={steps[step - 1].name}
      onNext={handleNext}
      onBack={step > 1 ? handlePreviousStep : undefined}
      onChange={handleChange}
      isLastStep={step === steps.length}
      isFirstStep={step === 1}
    />
  );
};

export default SignupSteps;
</file>

<file path="src/pages/UserRelated/Signup/SignupComponents/Step.tsx">
import React from "react";
import { Button } from "@/components/ui/button";
import InputField from "@/common/InputField"; // Adjust the path based on your directory structure

interface StepProps {
  label: string;
  placeholder: string;
  type: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  onNext: () => void;
  onBack?: () => void;
  isLastStep?: boolean;
  isFirstStep?: boolean;
  name: string;
}

const Step: React.FC<StepProps> = ({
  label,
  placeholder,
  type,
  value,
  onChange,
  onNext,
  onBack,
  isLastStep,
  isFirstStep,
  name,
}) => (
  <>
    <InputField
      label={label}
      placeholder={placeholder}
      type={type}
      value={value}
      onChange={onChange}
      name={name}
    />

    <div className="flex justify-between mt-7">
      {onBack && (
        <Button
          type="button"
          variant="outline"
          className="w-[45%] py-5"
          onClick={onBack}
        >
          Back
        </Button>
      )}
      <Button
        type="button"
        variant="addSave"
        className={`text-white py-5 ${isFirstStep ? "w-[100%]" : "w-[45%]"}`}
        onClick={onNext}
        disabled={!value}
      >
        {isLastStep ? "Sign Up" : "Continue"}
      </Button>
    </div>
  </>
);

export default Step;
</file>

<file path="src/pages/UtilityPages/NotFound/Not-Found.tsx">
import { GoBackButton } from "@/common/Go-Back-Button";

export const NotFoundRoute = () => {
  return (
    <div className="h-screen flex items-center justify-center font-semibold bg-muted text-foreground">
      <div className="flex flex-col items-center justify-center">
        <h1>404 - Page Not Found</h1>
        <p>Sorry, the page you are looking for does not exist.</p>
        <GoBackButton variant="normal" />
      </div>
    </div>
  );
};
</file>

<file path="src/Provider.tsx">
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import * as React from "react";
import { ErrorBoundary } from "react-error-boundary";
import { HelmetProvider } from "react-helmet-async";
import { ThemeProvider } from "./components/ui/theme-provider";
import { Spinner } from "./components/ui/Spinner";
import { MainErrorFallback } from "./pages/UtilityPages/Error/Main";
import { AuthLoader } from "./lib/Auth";
import { queryConfig } from "./lib/React-query";
import { Notifications } from "./common/Notifications";

type AppProviderProps = {
  children: React.ReactNode;
};

export const AppProvider = ({ children }: AppProviderProps) => {
  const [queryClient] = React.useState(
    () =>
      new QueryClient({
        defaultOptions: queryConfig,
      })
  );

  return (
    <React.Suspense
      fallback={
        <div className="flex h-screen w-screen items-center justify-center bg-background">
          <Spinner size="xl" />
        </div>
      }
    >
      <ErrorBoundary FallbackComponent={MainErrorFallback}>
        <HelmetProvider>
          <QueryClientProvider client={queryClient}>
            <ReactQueryDevtools initialIsOpen={false} />
            <ThemeProvider defaultTheme="dark" storageKey="vite-ui-theme">
              <Notifications />
              <AuthLoader
                renderLoading={() => (
                  <div className="flex h-screen w-screen items-center justify-center bg-background">
                    <Spinner size="xl" />
                  </div>
                )}
              >
                {children}
              </AuthLoader>
            </ThemeProvider>
          </QueryClientProvider>
        </HelmetProvider>
      </ErrorBoundary>
    </React.Suspense>
  );
};
</file>

<file path="src/stories/assets/accessibility.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="none" viewBox="0 0 48 48"><title>Accessibility</title><circle cx="24.334" cy="24" r="24" fill="#A849FF" fill-opacity=".3"/><path fill="#A470D5" fill-rule="evenodd" d="M27.8609 11.585C27.8609 9.59506 26.2497 7.99023 24.2519 7.99023C22.254 7.99023 20.6429 9.65925 20.6429 11.585C20.6429 13.575 22.254 15.1799 24.2519 15.1799C26.2497 15.1799 27.8609 13.575 27.8609 11.585ZM21.8922 22.6473C21.8467 23.9096 21.7901 25.4788 21.5897 26.2771C20.9853 29.0462 17.7348 36.3314 17.3325 37.2275C17.1891 37.4923 17.1077 37.7955 17.1077 38.1178C17.1077 39.1519 17.946 39.9902 18.9802 39.9902C19.6587 39.9902 20.253 39.6293 20.5814 39.0889L20.6429 38.9874L24.2841 31.22C24.2841 31.22 27.5529 37.9214 27.9238 38.6591C28.2948 39.3967 28.8709 39.9902 29.7168 39.9902C30.751 39.9902 31.5893 39.1519 31.5893 38.1178C31.5893 37.7951 31.3639 37.2265 31.3639 37.2265C30.9581 36.3258 27.698 29.0452 27.0938 26.2771C26.8975 25.4948 26.847 23.9722 26.8056 22.7236C26.7927 22.333 26.7806 21.9693 26.7653 21.6634C26.7008 21.214 27.0231 20.8289 27.4097 20.7005L35.3366 18.3253C36.3033 18.0685 36.8834 16.9773 36.6256 16.0144C36.3678 15.0515 35.2722 14.4737 34.3055 14.7305C34.3055 14.7305 26.8619 17.1057 24.2841 17.1057C21.7062 17.1057 14.456 14.7947 14.456 14.7947C13.4893 14.5379 12.3937 14.9873 12.0715 15.9502C11.7493 16.9131 12.3293 18.0044 13.3604 18.3253L21.2873 20.7005C21.674 20.8289 21.9318 21.214 21.9318 21.6634C21.9174 21.9493 21.9053 22.2857 21.8922 22.6473Z" clip-rule="evenodd"/></svg>
</file>

<file path="src/stories/assets/discord.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="33" height="32" fill="none" viewBox="0 0 33 32"><g clip-path="url(#clip0_10031_177575)"><mask id="mask0_10031_177575" style="mask-type:luminance" width="33" height="25" x="0" y="4" maskUnits="userSpaceOnUse"><path fill="#fff" d="M32.5034 4.00195H0.503906V28.7758H32.5034V4.00195Z"/></mask><g mask="url(#mask0_10031_177575)"><path fill="#5865F2" d="M27.5928 6.20817C25.5533 5.27289 23.3662 4.58382 21.0794 4.18916C21.0378 4.18154 20.9962 4.20057 20.9747 4.23864C20.6935 4.73863 20.3819 5.3909 20.1637 5.90358C17.7042 5.53558 15.2573 5.53558 12.8481 5.90358C12.6299 5.37951 12.307 4.73863 12.0245 4.23864C12.003 4.20184 11.9614 4.18281 11.9198 4.18916C9.63431 4.58255 7.44721 5.27163 5.40641 6.20817C5.38874 6.21578 5.3736 6.22848 5.36355 6.24497C1.21508 12.439 0.078646 18.4809 0.636144 24.4478C0.638667 24.477 0.655064 24.5049 0.677768 24.5227C3.41481 26.5315 6.06609 27.7511 8.66815 28.5594C8.70979 28.5721 8.75392 28.5569 8.78042 28.5226C9.39594 27.6826 9.94461 26.7968 10.4151 25.8653C10.4428 25.8107 10.4163 25.746 10.3596 25.7244C9.48927 25.3945 8.66058 24.9922 7.86343 24.5354C7.80038 24.4986 7.79533 24.4084 7.85333 24.3653C8.02108 24.2397 8.18888 24.109 8.34906 23.977C8.37804 23.9529 8.41842 23.9478 8.45249 23.963C13.6894 26.3526 19.359 26.3526 24.5341 23.963C24.5682 23.9465 24.6086 23.9516 24.6388 23.9757C24.799 24.1077 24.9668 24.2397 25.1358 24.3653C25.1938 24.4084 25.19 24.4986 25.127 24.5354C24.3298 25.0011 23.5011 25.3945 22.6296 25.7232C22.5728 25.7447 22.5476 25.8107 22.5754 25.8653C23.0559 26.7955 23.6046 27.6812 24.2087 28.5213C24.234 28.5569 24.2794 28.5721 24.321 28.5594C26.9357 27.7511 29.5869 26.5315 32.324 24.5227C32.348 24.5049 32.3631 24.4783 32.3656 24.4491C33.0328 17.5506 31.2481 11.5584 27.6344 6.24623C27.6256 6.22848 27.6105 6.21578 27.5928 6.20817ZM11.1971 20.8146C9.62043 20.8146 8.32129 19.3679 8.32129 17.5913C8.32129 15.8146 9.59523 14.368 11.1971 14.368C12.8115 14.368 14.0981 15.8273 14.0729 17.5913C14.0729 19.3679 12.7989 20.8146 11.1971 20.8146ZM21.8299 20.8146C20.2533 20.8146 18.9541 19.3679 18.9541 17.5913C18.9541 15.8146 20.228 14.368 21.8299 14.368C23.4444 14.368 24.7309 15.8273 24.7057 17.5913C24.7057 19.3679 23.4444 20.8146 21.8299 20.8146Z"/></g></g><defs><clipPath id="clip0_10031_177575"><rect width="32" height="32" fill="#fff" transform="translate(0.5)"/></clipPath></defs></svg>
</file>

<file path="src/stories/assets/github.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="none" viewBox="0 0 32 32"><path fill="#161614" d="M16.0001 0C7.16466 0 0 7.17472 0 16.0256C0 23.1061 4.58452 29.1131 10.9419 31.2322C11.7415 31.3805 12.0351 30.8845 12.0351 30.4613C12.0351 30.0791 12.0202 28.8167 12.0133 27.4776C7.56209 28.447 6.62283 25.5868 6.62283 25.5868C5.89499 23.7345 4.8463 23.2419 4.8463 23.2419C3.39461 22.2473 4.95573 22.2678 4.95573 22.2678C6.56242 22.3808 7.40842 23.9192 7.40842 23.9192C8.83547 26.3691 11.1514 25.6609 12.0645 25.2514C12.2081 24.2156 12.6227 23.5087 13.0803 23.1085C9.52648 22.7032 5.7906 21.3291 5.7906 15.1886C5.7906 13.4389 6.41563 12.0094 7.43916 10.8871C7.27303 10.4834 6.72537 8.85349 7.59415 6.64609C7.59415 6.64609 8.93774 6.21539 11.9953 8.28877C13.2716 7.9337 14.6404 7.75563 16.0001 7.74953C17.3599 7.75563 18.7297 7.9337 20.0084 8.28877C23.0623 6.21539 24.404 6.64609 24.404 6.64609C25.2749 8.85349 24.727 10.4834 24.5608 10.8871C25.5868 12.0094 26.2075 13.4389 26.2075 15.1886C26.2075 21.3437 22.4645 22.699 18.9017 23.0957C19.4756 23.593 19.9869 24.5683 19.9869 26.0634C19.9869 28.2077 19.9684 29.9334 19.9684 30.4613C19.9684 30.8877 20.2564 31.3874 21.0674 31.2301C27.4213 29.1086 32 23.1037 32 16.0256C32 7.17472 24.8364 0 16.0001 0ZM5.99257 22.8288C5.95733 22.9084 5.83227 22.9322 5.71834 22.8776C5.60229 22.8253 5.53711 22.7168 5.57474 22.6369C5.60918 22.5549 5.7345 22.5321 5.85029 22.587C5.9666 22.6393 6.03284 22.7489 5.99257 22.8288ZM6.7796 23.5321C6.70329 23.603 6.55412 23.5701 6.45291 23.4581C6.34825 23.3464 6.32864 23.197 6.40601 23.125C6.4847 23.0542 6.62937 23.0874 6.73429 23.1991C6.83895 23.3121 6.85935 23.4605 6.7796 23.5321ZM7.31953 24.4321C7.2215 24.5003 7.0612 24.4363 6.96211 24.2938C6.86407 24.1513 6.86407 23.9804 6.96422 23.9119C7.06358 23.8435 7.2215 23.905 7.32191 24.0465C7.41968 24.1914 7.41968 24.3623 7.31953 24.4321ZM8.23267 25.4743C8.14497 25.5712 7.95818 25.5452 7.82146 25.413C7.68156 25.2838 7.64261 25.1004 7.73058 25.0035C7.81934 24.9064 8.00719 24.9337 8.14497 25.0648C8.28381 25.1938 8.3262 25.3785 8.23267 25.4743ZM9.41281 25.8262C9.37413 25.9517 9.19423 26.0088 9.013 25.9554C8.83203 25.9005 8.7136 25.7535 8.75016 25.6266C8.78778 25.5003 8.96848 25.4408 9.15104 25.4979C9.33174 25.5526 9.45044 25.6985 9.41281 25.8262ZM10.7559 25.9754C10.7604 26.1076 10.6067 26.2172 10.4165 26.2196C10.2252 26.2238 10.0704 26.1169 10.0683 25.9868C10.0683 25.8534 10.2185 25.7448 10.4098 25.7416C10.6001 25.7379 10.7559 25.8441 10.7559 25.9754ZM12.0753 25.9248C12.0981 26.0537 11.9658 26.1862 11.7769 26.2215C11.5912 26.2554 11.4192 26.1758 11.3957 26.0479C11.3726 25.9157 11.5072 25.7833 11.6927 25.7491C11.8819 25.7162 12.0512 25.7937 12.0753 25.9248Z"/></svg>
</file>

<file path="src/stories/assets/tutorials.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="33" height="32" fill="none" viewBox="0 0 33 32"><g clip-path="url(#clip0_10031_177597)"><path fill="#B7F0EF" fill-rule="evenodd" d="M17 7.87059C17 6.48214 17.9812 5.28722 19.3431 5.01709L29.5249 2.99755C31.3238 2.64076 33 4.01717 33 5.85105V22.1344C33 23.5229 32.0188 24.7178 30.6569 24.9879L20.4751 27.0074C18.6762 27.3642 17 25.9878 17 24.1539L17 7.87059Z" clip-rule="evenodd" opacity=".7"/><path fill="#87E6E5" fill-rule="evenodd" d="M1 5.85245C1 4.01857 2.67623 2.64215 4.47507 2.99895L14.6569 5.01848C16.0188 5.28861 17 6.48354 17 7.87198V24.1553C17 25.9892 15.3238 27.3656 13.5249 27.0088L3.34311 24.9893C1.98119 24.7192 1 23.5242 1 22.1358V5.85245Z" clip-rule="evenodd"/><path fill="#61C1FD" fill-rule="evenodd" d="M15.543 5.71289C15.543 5.71289 16.8157 5.96289 17.4002 6.57653C17.9847 7.19016 18.4521 9.03107 18.4521 9.03107C18.4521 9.03107 18.4521 25.1106 18.4521 26.9629C18.4521 28.8152 19.3775 31.4174 19.3775 31.4174L17.4002 28.8947L16.2575 31.4174C16.2575 31.4174 15.543 29.0765 15.543 27.122C15.543 25.1674 15.543 5.71289 15.543 5.71289Z" clip-rule="evenodd"/></g><defs><clipPath id="clip0_10031_177597"><rect width="32" height="32" fill="#fff" transform="translate(0.5)"/></clipPath></defs></svg>
</file>

<file path="src/stories/assets/youtube.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="none" viewBox="0 0 32 32"><path fill="#ED1D24" d="M31.3313 8.44657C30.9633 7.08998 29.8791 6.02172 28.5022 5.65916C26.0067 5.00026 16 5.00026 16 5.00026C16 5.00026 5.99333 5.00026 3.4978 5.65916C2.12102 6.02172 1.03665 7.08998 0.668678 8.44657C0 10.9053 0 16.0353 0 16.0353C0 16.0353 0 21.1652 0.668678 23.6242C1.03665 24.9806 2.12102 26.0489 3.4978 26.4116C5.99333 27.0703 16 27.0703 16 27.0703C16 27.0703 26.0067 27.0703 28.5022 26.4116C29.8791 26.0489 30.9633 24.9806 31.3313 23.6242C32 21.1652 32 16.0353 32 16.0353C32 16.0353 32 10.9053 31.3313 8.44657Z"/><path fill="#fff" d="M12.7266 20.6934L21.0902 16.036L12.7266 11.3781V20.6934Z"/></svg>
</file>

<file path="src/stories/button.css">
.storybook-button {
  display: inline-block;
  cursor: pointer;
  border: 0;
  border-radius: 3em;
  font-weight: 700;
  line-height: 1;
  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}
.storybook-button--primary {
  muted-color: #1ea7fd;
  color: white;
}
.storybook-button--secondary {
  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;
  muted-color: transparent;
  color: #333;
}
.storybook-button--small {
  padding: 10px 16px;
  font-size: 12px;
}
.storybook-button--medium {
  padding: 11px 20px;
  font-size: 14px;
}
.storybook-button--large {
  padding: 12px 24px;
  font-size: 16px;
}
</file>

<file path="src/stories/Button.stories.ts">
import type { Meta, StoryObj } from '@storybook/react';
import { fn } from '@storybook/test';

import { Button } from './Button';

// More on how to set up stories at: https://storybook.js.org/docs/writing-stories#default-export
const meta: Meta<typeof Button> = {
  title: 'Example/Button',
  component: Button,
  parameters: {
    // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/configure/story-layout
    layout: 'centered',
  },
  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs
  tags: ['autodocs'],
  // More on argTypes: https://storybook.js.org/docs/api/argtypes
  argTypes: {
    mutedColor: { control: 'color' },
  },
  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args
  args: { onClick: fn() },
};

export default meta;
type Story = StoryObj<typeof Button>;

// More on writing stories with args: https://storybook.js.org/docs/writing-stories/args
export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    label: 'Button',
  },
};

export const Large: Story = {
  args: {
    size: 'large',
    label: 'Button',
  },
};

export const Small: Story = {
  args: {
    size: 'small',
    label: 'Button',
  },
};
</file>

<file path="src/stories/Button.tsx">
import React from "react";

import "./button.css";

export interface ButtonProps {
  /** Is this the principal call to action on the page? */
  primary?: boolean;
  /** What muted color to use */
  mutedColor?: string;
  /** How large should the button be? */
  size?: "small" | "medium" | "large";
  /** Button contents */
  label: string;
  /** Optional click handler */
  onClick?: () => void;
}

/** Primary UI component for user interaction */
export const Button = ({
  primary = false,
  size = "medium",
  mutedColor,
  label,
  ...props
}: ButtonProps) => {
  const mode = primary
    ? "storybook-button--primary"
    : "storybook-button--secondary";
  return (
    <button
      type="button"
      className={["storybook-button", `storybook-button--${size}`, mode].join(
        " "
      )}
      style={{ mutedColor }}
      {...props}
    >
      {label}
    </button>
  );
};
</file>

<file path="src/stories/Configure.mdx">
import { Meta } from "@storybook/blocks";

import Github from "./assets/github.svg";
import Discord from "./assets/discord.svg";
import Youtube from "./assets/youtube.svg";
import Tutorials from "./assets/tutorials.svg";
import Styling from "./assets/styling.png";
import Context from "./assets/context.png";
import Assets from "./assets/assets.png";
import Docs from "./assets/docs.png";
import Share from "./assets/share.png";
import FigmaPlugin from "./assets/figma-plugin.png";
import Testing from "./assets/testing.png";
import Accessibility from "./assets/accessibility.png";
import Theming from "./assets/theming.png";
import AddonLibrary from "./assets/addon-library.png";

export const RightArrow = () => (
  <svg
    viewBox="0 0 14 14"
    width="8px"
    height="14px"
    style={{
      marginLeft: "4px",
      display: "inline-block",
      shapeRendering: "inherit",
      verticalAlign: "middle",
      fill: "currentColor",
      "path fill": "currentColor",
    }}
  >
    <path d="m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z" />
  </svg>
);

<Meta title="Configure your project" />

<div className="sb-container">
  <div className='sb-section-title'>
    # Configure your project

    Because Storybook works separately from your app, you'll need to configure it for your specific stack and setup. Below, explore guides for configuring Storybook with popular frameworks and tools. If you get stuck, learn how you can ask for help from our community.

  </div>
  <div className="sb-section">
    <div className="sb-section-item">
      <img
        src={Styling}
        alt="A wall of logos representing different styling technologies"
      />
      <h4 className="sb-section-item-heading">Add styling and CSS</h4>
      <p className="sb-section-item-paragraph">Like with web applications, there are many ways to include CSS within Storybook. Learn more about setting up styling within Storybook.</p>
      <a
        href="https://storybook.js.org/docs/configure/styling-and-css/?renderer=react"
        target="_blank"
      >Learn more<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <img
        src={Context}
        alt="An abstraction representing the composition of data for a component"
      />
      <h4 className="sb-section-item-heading">Provide context and mocking</h4>
      <p className="sb-section-item-paragraph">Often when a story doesn't render, it's because your component is expecting a specific environment or context (like a theme provider) to be available.</p>
      <a
        href="https://storybook.js.org/docs/writing-stories/decorators/?renderer=react#context-for-mocking"
        target="_blank"
      >Learn more<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <img src={Assets} alt="A representation of typography and image assets" />
      <div>
        <h4 className="sb-section-item-heading">Load assets and resources</h4>
        <p className="sb-section-item-paragraph">To link static files (like fonts) to your projects and stories, use the
        `staticDirs` configuration option to specify folders to load when
        starting Storybook.</p>
        <a
          href="https://storybook.js.org/docs/configure/images-and-assets/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
    </div>
  </div>
</div>
<div className="sb-container">
  <div className='sb-section-title'>
    # Do more with Storybook

    Now that you know the basics, let's explore other parts of Storybook that will improve your experience. This list is just to get you started. You can customise Storybook in many ways to fit your needs.

  </div>

  <div className="sb-section">
    <div className="sb-features-grid">
      <div className="sb-grid-item">
        <img src={Docs} alt="A screenshot showing the autodocs tag being set, pointing a docs page being generated" />
        <h4 className="sb-section-item-heading">Autodocs</h4>
        <p className="sb-section-item-paragraph">Auto-generate living,
          interactive reference documentation from your components and stories.</p>
        <a
          href="https://storybook.js.org/docs/writing-docs/autodocs/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <img src={Share} alt="A browser window showing a Storybook being published to a chromatic.com URL" />
        <h4 className="sb-section-item-heading">Publish to Chromatic</h4>
        <p className="sb-section-item-paragraph">Publish your Storybook to review and collaborate with your entire team.</p>
        <a
          href="https://storybook.js.org/docs/sharing/publish-storybook/?renderer=react#publish-storybook-with-chromatic"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <img src={FigmaPlugin} alt="Windows showing the Storybook plugin in Figma" />
        <h4 className="sb-section-item-heading">Figma Plugin</h4>
        <p className="sb-section-item-paragraph">Embed your stories into Figma to cross-reference the design and live
          implementation in one place.</p>
        <a
          href="https://storybook.js.org/docs/sharing/design-integrations/?renderer=react#embed-storybook-in-figma-with-the-plugin"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <img src={Testing} alt="Screenshot of tests passing and failing" />
        <h4 className="sb-section-item-heading">Testing</h4>
        <p className="sb-section-item-paragraph">Use stories to test a component in all its variations, no matter how
          complex.</p>
        <a
          href="https://storybook.js.org/docs/writing-tests/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <img src={Accessibility} alt="Screenshot of accessibility tests passing and failing" />
        <h4 className="sb-section-item-heading">Accessibility</h4>
        <p className="sb-section-item-paragraph">Automatically test your components for a11y issues as you develop.</p>
        <a
          href="https://storybook.js.org/docs/writing-tests/accessibility-testing/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <img src={Theming} alt="Screenshot of Storybook in light and dark mode" />
        <h4 className="sb-section-item-heading">Theming</h4>
        <p className="sb-section-item-paragraph">Theme Storybook's UI to personalize it to your project.</p>
        <a
          href="https://storybook.js.org/docs/configure/theming/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
    </div>
  </div>
</div>
<div className='sb-addon'>
  <div className='sb-addon-text'>
    <h4>Addons</h4>
    <p className="sb-section-item-paragraph">Integrate your tools with Storybook to connect workflows.</p>
    <a
        href="https://storybook.js.org/addons/"
        target="_blank"
      >Discover all addons<RightArrow /></a>
  </div>
  <div className='sb-addon-img'>
    <img src={AddonLibrary} alt="Integrate your tools with Storybook to connect workflows." />
  </div>
</div>

<div className="sb-section sb-socials">
    <div className="sb-section-item">
      <img src={Github} alt="Github logo" className="sb-explore-image"/>
      Join our contributors building the future of UI development.

      <a
        href="https://github.com/storybookjs/storybook"
        target="_blank"
      >Star on GitHub<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <img src={Discord} alt="Discord logo" className="sb-explore-image"/>
      <div>
        Get support and chat with frontend developers.

        <a
          href="https://discord.gg/storybook"
          target="_blank"
        >Join Discord server<RightArrow /></a>
      </div>
    </div>
    <div className="sb-section-item">
      <img src={Youtube} alt="Youtube logo" className="sb-explore-image"/>
      <div>
        Watch tutorials, feature previews and interviews.

        <a
          href="https://www.youtube.com/@chromaticui"
          target="_blank"
        >Watch on YouTube<RightArrow /></a>
      </div>
    </div>
    <div className="sb-section-item">
      <img src={Tutorials} alt="A book" className="sb-explore-image"/>
      <p>Follow guided walkthroughs on for key workflows.</p>

      <a
          href="https://storybook.js.org/tutorials/"
          target="_blank"
        >Discover tutorials<RightArrow /></a>
    </div>

</div>

<style>
  {`
  .sb-container {
    margin-bottom: 48px;
  }

  .sb-section {
    width: 100%;
    display: flex;
    flex-direction: row;
    gap: 20px;
  }

  img {
    object-fit: cover;
  }

  .sb-section-title {
    margin-bottom: 32px;
  }

  .sb-section a:not(h1 a, h2 a, h3 a) {
    font-size: 14px;
  }

  .sb-section-item, .sb-grid-item {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .sb-section-item-heading {
    padding-top: 20px !important;
    padding-bottom: 5px !important;
    margin: 0 !important;
  }
  .sb-section-item-paragraph {
    margin: 0;
    padding-bottom: 10px;
  }

  .sb-chevron {
    margin-left: 5px;
  }

  .sb-features-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 32px 20px;
  }

  .sb-socials {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
  }

  .sb-socials p {
    margin-bottom: 10px;
  }

  .sb-explore-image {
    max-height: 32px;
    align-self: flex-start;
  }

  .sb-addon {
    width: 100%;
    display: flex;
    align-items: center;
    position: relative;
    muted-color: #EEF3F8;
    border-radius: 5px;
    border: 1px solid rgba(0, 0, 0, 0.05);
    muted: #EEF3F8;
    height: 180px;
    margin-bottom: 48px;
    overflow: hidden;
  }

  .sb-addon-text {
    padding-left: 48px;
    max-width: 240px;
  }

  .sb-addon-text h4 {
    padding-top: 0px;
  }

  .sb-addon-img {
    position: absolute;
    left: 345px;
    top: 0;
    height: 100%;
    width: 200%;
    overflow: hidden;
  }

  .sb-addon-img img {
    width: 650px;
    transform: rotate(-15deg);
    margin-left: 40px;
    margin-top: -72px;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0);
    backface-visibility: hidden;
  }

  @media screen and (max-width: 800px) {
    .sb-addon-img {
      left: 300px;
    }
  }

  @media screen and (max-width: 600px) {
    .sb-section {
      flex-direction: column;
    }

    .sb-features-grid {
      grid-template-columns: repeat(1, 1fr);
    }

    .sb-socials {
      grid-template-columns: repeat(2, 1fr);
    }

    .sb-addon {
      height: 280px;
      align-items: flex-start;
      padding-top: 32px;
      overflow: hidden;
    }

    .sb-addon-text {
      padding-left: 24px;
    }

    .sb-addon-img {
      right: 0;
      left: 0;
      top: 130px;
      bottom: 0;
      overflow: hidden;
      height: auto;
      width: 124%;
    }

    .sb-addon-img img {
      width: 1200px;
      transform: rotate(-12deg);
      margin-left: 0;
      margin-top: 48px;
      margin-bottom: -40px;
      margin-left: -24px;
    }
  }
  `}
</style>
</file>

<file path="src/stories/header.css">
.storybook-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  padding: 15px 20px;
  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}

.storybook-header svg {
  display: inline-block;
  vertical-align: top;
}

.storybook-header h1 {
  display: inline-block;
  vertical-align: top;
  margin: 6px 0 6px 10px;
  font-weight: 700;
  font-size: 20px;
  line-height: 1;
}

.storybook-header button + button {
  margin-left: 10px;
}

.storybook-header .welcome {
  margin-right: 10px;
  color: #333;
  font-size: 14px;
}
</file>

<file path="src/stories/Header.stories.ts">
import type { Meta, StoryObj } from '@storybook/react';
import { fn } from '@storybook/test';

import { Header } from './Header';

const meta: Meta<typeof Header> = {
  title: 'Example/Header',
  component: Header,
  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs
  tags: ['autodocs'],
  parameters: {
    // More on Story layout: https://storybook.js.org/docs/configure/story-layout
    layout: 'fullscreen',
  },
  args: {
    onLogin: fn(),
    onLogout: fn(),
    onCreateAccount: fn(),
  },
};

export default meta;
type Story = StoryObj<typeof Header>;

export const LoggedIn: Story = {
  args: {
    user: {
      name: 'Jane Doe',
    },
  },
};

export const LoggedOut: Story = {};
</file>

<file path="src/stories/Header.tsx">
import React from 'react';

import { Button } from './Button';
import './header.css';

type User = {
  name: string;
};

export interface HeaderProps {
  user?: User;
  onLogin?: () => void;
  onLogout?: () => void;
  onCreateAccount?: () => void;
}

export const Header = ({ user, onLogin, onLogout, onCreateAccount }: HeaderProps) => (
  <header>
    <div className="storybook-header">
      <div>
        <svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
          <g fill="none" fillRule="evenodd">
            <path
              d="M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z"
              fill="#FFF"
            />
            <path
              d="M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z"
              fill="#555AB9"
            />
            <path
              d="M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z"
              fill="#91BAF8"
            />
          </g>
        </svg>
        <h1>Acme</h1>
      </div>
      <div>
        {user ? (
          <>
            <span className="welcome">
              Welcome, <b>{user.name}</b>!
            </span>
            <Button size="small" onClick={onLogout} label="Log out" />
          </>
        ) : (
          <>
            <Button size="small" onClick={onLogin} label="Log in" />
            <Button primary size="small" onClick={onCreateAccount} label="Sign up" />
          </>
        )}
      </div>
    </div>
  </header>
);
</file>

<file path="src/stories/page.css">
.storybook-page {
  margin: 0 auto;
  padding: 48px 20px;
  max-width: 600px;
  color: #333;
  font-size: 14px;
  line-height: 24px;
  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}

.storybook-page h2 {
  display: inline-block;
  vertical-align: top;
  margin: 0 0 4px;
  font-weight: 700;
  font-size: 32px;
  line-height: 1;
}

.storybook-page p {
  margin: 1em 0;
}

.storybook-page a {
  color: #1ea7fd;
  text-decoration: none;
}

.storybook-page ul {
  margin: 1em 0;
  padding-left: 30px;
}

.storybook-page li {
  margin-bottom: 8px;
}

.storybook-page .tip {
  display: inline-block;
  vertical-align: top;
  margin-right: 10px;
  border-radius: 1em;
  muted: #e7fdd8;
  padding: 4px 12px;
  color: #66bf3c;
  font-weight: 700;
  font-size: 11px;
  line-height: 12px;
}

.storybook-page .tip-wrapper {
  margin-top: 40px;
  margin-bottom: 40px;
  font-size: 13px;
  line-height: 20px;
}

.storybook-page .tip-wrapper svg {
  display: inline-block;
  vertical-align: top;
  margin-top: 3px;
  margin-right: 4px;
  width: 12px;
  height: 12px;
}

.storybook-page .tip-wrapper svg path {
  fill: #1ea7fd;
}
</file>

<file path="src/stories/Page.stories.ts">
import type { Meta, StoryObj } from '@storybook/react';
import { expect, userEvent, within } from '@storybook/test';

import { Page } from './Page';

const meta: Meta<typeof Page> = {
  title: 'Example/Page',
  component: Page,
  parameters: {
    // More on Story layout: https://storybook.js.org/docs/configure/story-layout
    layout: 'fullscreen',
  },
};

export default meta;
type Story = StoryObj<typeof Page>;

export const LoggedOut: Story = {};

// More on interaction testing: https://storybook.js.org/docs/writing-tests/interaction-testing
export const LoggedIn: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const loginButton = canvas.getByRole('button', { name: /Log in/i });
    await expect(loginButton).toBeInTheDocument();
    await userEvent.click(loginButton);
    await expect(loginButton).not.toBeInTheDocument();

    const logoutButton = canvas.getByRole('button', { name: /Log out/i });
    await expect(logoutButton).toBeInTheDocument();
  },
};
</file>

<file path="src/stories/Page.tsx">
import React from 'react';

import { Header } from './Header';
import './page.css';

type User = {
  name: string;
};

export const Page: React.FC = () => {
  const [user, setUser] = React.useState<User>();

  return (
    <article>
      <Header
        user={user}
        onLogin={() => setUser({ name: 'Jane Doe' })}
        onLogout={() => setUser(undefined)}
        onCreateAccount={() => setUser({ name: 'Jane Doe' })}
      />

      <section className="storybook-page">
        <h2>Pages in Storybook</h2>
        <p>
          We recommend building UIs with a{' '}
          <a href="https://componentdriven.org" target="_blank" rel="noopener noreferrer">
            <strong>component-driven</strong>
          </a>{' '}
          process starting with atomic components and ending with pages.
        </p>
        <p>
          Render pages with mock data. This makes it easy to build and review page states without
          needing to navigate to them in your app. Here are some handy patterns for managing page
          data in Storybook:
        </p>
        <ul>
          <li>
            Use a higher-level connected component. Storybook helps you compose such data from the
            "args" of child component stories
          </li>
          <li>
            Assemble data in the page component from your services. You can mock these services out
            using Storybook.
          </li>
        </ul>
        <p>
          Get a guided tutorial on component-driven development at{' '}
          <a href="renderers/react/template/cli/ts/Page" target="_blank" rel="noopener noreferrer">
            Storybook tutorials
          </a>
          . Read more in the{' '}
          <a href="https://storybook.js.org/docs" target="_blank" rel="noopener noreferrer">
            docs
          </a>
          .
        </p>
        <div className="tip-wrapper">
          <span className="tip">Tip</span> Adjust the width of the canvas with the{' '}
          <svg width="10" height="10" viewBox="0 0 12 12" xmlns="http://www.w3.org/2000/svg">
            <g fill="none" fillRule="evenodd">
              <path
                d="M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z"
                id="a"
                fill="#999"
              />
            </g>
          </svg>
          Viewports addon in the toolbar
        </div>
      </section>
    </article>
  );
};
</file>

<file path="src/utils/cn.tsx">
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  prefix: "",
  theme: {
  	extend: {
  		fontFamily: {
  			header: [
  				'Titillium Web',
  				'serif'
  			],
			secondary: ['Barriecito', 'system-ui']
  		},
  		scale: {
  			'101': '1.01',
  			'102': '1.02',
  			'103': '1.03'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			'foreground-lighter': 'hsl(var(--foreground-lighter))',
  			card: 'hsl(var(--card))',
  			'card-foreground': 'hsl(var(--card-foreground))',
  			popover: 'hsl(var(--popover))',
  			'popover-foreground': 'hsl(var(--popover-foreground))',
  			primary: 'hsl(var(--primary))',
  			'primary-foreground': 'hsl(var(--primary-foreground))',
  			secondary: 'hsl(var(--secondary))',
  			'secondary-foreground': 'hsl(var(--secondary-foreground))',
  			muted: 'hsl(var(--muted))',
  			'muted-foreground': 'hsl(var(--muted-foreground))',
  			accent: 'hsl(var(--accent))',
  			'accent-foreground': 'hsl(var(--accent-foreground))',
  			destructive: 'hsl(var(--destructive))',
  			'destructive-foreground': 'hsl(var(--destructive-foreground))',
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			'chart-1': 'hsl(var(--chart-1))',
  			'chart-2': 'hsl(var(--chart-2))',
  			'chart-3': 'hsl(var(--chart-3))',
  			'chart-4': 'hsl(var(--chart-4))',
  			'chart-5': 'hsl(var(--chart-5))'
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			xl: 'calc(var(--radius) + 2px)',
  			'2xl': 'calc(var(--radius) + 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import path from "path"
import react from "@vitejs/plugin-react"
import { defineConfig } from 'vitest/config';
import mkcert from 'vite-plugin-mkcert'


export default defineConfig({
  plugins: [react(),mkcert()],
  test: {
    environment: 'jsdom',
    globals: true, 
  },
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})
</file>

<file path="Dockerfile">
# Stage 1: Build the React app
FROM node:18-alpine as build

WORKDIR /app

# Copy package.json and lockfile and install deps
COPY package*.json ./
RUN npm install

# Copy the rest of the frontend source code
COPY . .

# Build React app for production
RUN npm run build

# Stage 2: Serve the React app with nginx
FROM nginx:alpine

# Copy the build output to nginx html directory
COPY --from=build /app/build /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Start nginx server
CMD ["nginx", "-g", "daemon off;"]
</file>

<file path="OxygenBackend/.dockerignore">
**/.classpath
**/.dockerignore
**/.env
**/.git
**/.gitignore
**/.project
**/.settings
**/.toolstarget
**/.vs
**/.vscode
**/*.*proj.user
**/*.dbmdl
**/*.jfm
**/azds.yaml
**/bin
**/charts
**/docker-compose*
**/Dockerfile*
**/node_modules
**/npm-debug.log
**/obj
**/secrets.dev.yaml
**/values.dev.yaml
LICENSE
README.md
</file>

<file path="OxygenBackend/QuizAPI/Backup/QuizAPI.sln">
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.7.34221.43
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "QuizAPI", "QuizAPI.csproj", "{5A0F4435-7F6A-4C0D-B2F1-7A0DD7BCC570}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{5A0F4435-7F6A-4C0D-B2F1-7A0DD7BCC570}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{5A0F4435-7F6A-4C0D-B2F1-7A0DD7BCC570}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{5A0F4435-7F6A-4C0D-B2F1-7A0DD7BCC570}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{5A0F4435-7F6A-4C0D-B2F1-7A0DD7BCC570}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {45FFCE5D-33EA-4696-8FCA-0F3D3C1C9C8E}
	EndGlobalSection
EndGlobal
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Authentication/Authentication.cs">
using Microsoft.AspNetCore.Mvc;
using QuizAPI.Services;
using QuizAPI.Models;
using System.ComponentModel.DataAnnotations;
using System.Security.Claims;
using QuizAPI.Data;
using QuizAPI.DTOs;
using QuizAPI.DTOs.User;
using Microsoft.AspNetCore.Authorization;

namespace QuizAPI.Controllers.Authentication
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthenticationController : ControllerBase
    {
        private readonly IAuthenticationService _authService;
        private readonly ApplicationDbContext _context;
        public AuthenticationController(IAuthenticationService authService, ApplicationDbContext context)
        {
            _authService = authService;
            _context = context;
        }

        [HttpGet("me")]
        [Authorize]
        public async Task<IActionResult> GetCurrentUser()
        {

            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!Guid.TryParse(userId, out var userGuid))
            {
                return Unauthorized("Invalid token.");
            }

            var user = await _context.Users.FindAsync(userGuid);
            if (user == null || user.IsDeleted)
            {
                return Unauthorized("User not found.");
            }

            return Ok(new FullUserDTO
            {
                Id = user.Id,
                Email = user.Email,
                ProfileImageUrl = user.ProfileImageUrl,
                DateRegistered = user.DateRegistered,
                ImmutableName = user.ImmutableName,
                LastLogin = user.LastLogin,
                Username = user.Username,
                Role = (await _context.Roles.FindAsync(user.RoleId))?.Name
            });
}

        [HttpPost("signup")]
        public async Task<IActionResult> Signup([FromBody] SignupModel model)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var result = await _authService.SignupAsync(model.Email, model.Username, model.Password);
            if (result.Success)
            {
                return Ok(new { result.Token, result.User });
            }

            return BadRequest(result.Message);
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginModel model)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var result = await _authService.LoginAsync(model.Email, model.Password);
            if (result.Success)
            {
                return Ok(new { result.Token, result.User });
            }

            return Unauthorized(result.Message);
        }
    }

    public class SignupModel
    {
        [Required]
        public string Email { get; set; }

        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }

    public class LoginModel
    {
        [Required]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Image/Services/ImageCleanUpService.cs">
namespace QuizAPI.Controllers.Image.Services
{

    public class ImageCleanUpService : BackgroundService
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly ILogger<ImageCleanUpService> _logger;
        private readonly TimeSpan _runInterval = TimeSpan.FromHours(24); // Run once per day

        public ImageCleanUpService(
            IServiceProvider serviceProvider,
            ILogger<ImageCleanUpService> logger)
        {
            _serviceProvider = serviceProvider;
            _logger = logger;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            _logger.LogInformation("Image cleanup service is starting");

            using var timer = new PeriodicTimer(_runInterval);

            // Run immediately on startup, then on the interval
            await RunCleanupAsync();

            while (await timer.WaitForNextTickAsync(stoppingToken) && !stoppingToken.IsCancellationRequested)
            {
                await RunCleanupAsync();
            }
        }

        private async Task RunCleanupAsync()
        {
            try
            {
                _logger.LogInformation("Running scheduled image cleanup");

                // Create a new scope to resolve scoped services
                using var scope = _serviceProvider.CreateScope();
                var imageService = scope.ServiceProvider.GetRequiredService<IImageService>();

                await imageService.CleanUpUnusedImagesAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error occurred during image cleanup");
            }
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Questions/AnswerOptionsController.cs">
/*using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using QuizAPI.Data;
using QuizAPI.Models;

namespace QuizAPI.Controllers.Questions
{
    [ApiController]
    [Route("api/[controller]")]
    public class AnswerOptionsController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public AnswerOptionsController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: api/AnswerOptions
        [HttpGet]
        public async Task<ActionResult<IEnumerable<AnswerOption>>> GetAnswerOptions()
        {
            return await _context.AnswerOptions.ToListAsync();
        }

        // GET: api/AnswerOptions/{id}
        [HttpGet("{id}")]
        public async Task<ActionResult<AnswerOption>> GetAnswerOption(int id)
        {
            var answerOption = await _context.AnswerOptions.FindAsync(id);

            if (answerOption == null)
                return NotFound();

            return answerOption;
        }

        // POST: api/AnswerOptions
        [HttpPost]
        public async Task<ActionResult<AnswerOption>> CreateAnswerOption(AnswerOption answerOption)
        {
            var question = await _context.Questions.Include(q => q.AnswerOptions)
                                                   .FirstOrDefaultAsync(q => q.Id == answerOption.QuestionId);
            if (question == null)
                return BadRequest("Question does not exist.");

            var updatedOptions = question.AnswerOptions.Append(answerOption).ToList();
            if (!ValidateAnswerOptions(updatedOptions))
                return BadRequest("Each question must have at least one correct and one incorrect answer.");

            _context.AnswerOptions.Add(answerOption);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetAnswerOption), new { id = answerOption.Id }, answerOption);
        }

        // PUT: api/AnswerOptions/{id}
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateAnswerOption(int id, AnswerOption updatedAnswerOption)
        {
            if (id != updatedAnswerOption.Id)
                return BadRequest();

            var question = await _context.Questions.Include(q => q.AnswerOptions)
                                                   .FirstOrDefaultAsync(q => q.Id == updatedAnswerOption.QuestionId);
            if (question == null)
                return BadRequest("Question does not exist.");

            var otherOptions = question.AnswerOptions.Where(a => a.Id != id).ToList();
            var updatedOptions = otherOptions.Append(updatedAnswerOption).ToList();

            if (!ValidateAnswerOptions(updatedOptions))
                return BadRequest("Each question must have at least one correct and one incorrect answer.");

            _context.Entry(updatedAnswerOption).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!AnswerOptionExists(id))
                    return NotFound();
                else
                    throw;
            }

            return NoContent();
        }

        // DELETE: api/AnswerOptions/{id}
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteAnswerOption(int id)
        {
            var answerOption = await _context.AnswerOptions.FindAsync(id);
            if (answerOption == null)
                return NotFound();

            var question = await _context.Questions.Include(q => q.AnswerOptions)
                                                   .FirstOrDefaultAsync(q => q.Id == answerOption.QuestionId);

            var remainingOptions = question.AnswerOptions.Where(a => a.Id != id).ToList();
            if (!ValidateAnswerOptions(remainingOptions))
                return BadRequest("Deleting this option would violate the rule of having at least one correct and one incorrect answer.");

            _context.AnswerOptions.Remove(answerOption);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool AnswerOptionExists(int id) => _context.AnswerOptions.Any(e => e.Id == id);

        private bool ValidateAnswerOptions(ICollection<AnswerOption> options)
        {
            return options.Any(a => a.IsCorrect) && options.Any(a => !a.IsCorrect);
        }
    }
}
*/
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Questions/Services/AnswerOptions/IAnswerOptionService.cs">
using QuizAPI.DTOs.Question;
using QuizAPI.Models;

namespace QuizAPI.Controllers.Questions.Services.AnswerOptions
{
    public interface IAnswerOptionService
    {
        Task<AnswerOption> CreateAnswerOptionAsync(
            AnswerOptionCM newAnswerOptionCM,
            int questionId
            );

        Task<List<AnswerOption>> CreateAnswerOptionsAsync(
            List<AnswerOptionCM> newAnswerOption,
            int questionId
            );

        Task SyncAnswerOptionsAsync(MultipleChoiceQuestion question, IEnumerable<AnswerOptionUM> incomingOptions);
        Task<AnswerOption> UpdateAnswerOptionAsync(AnswerOption answerOption);
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Quizzes/QuizSessionsController.cs">
using System;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using QuizAPI.Controllers.Quizzes.Services.QuizSessionServices;
using QuizAPI.Models.Quiz;

namespace QuizAPI.Controllers.Quizzes
{
    [Route("api/[controller]")]
    [ApiController]
    public class QuizSessionsController : ControllerBase
    {
        private readonly IQuizSessionService _quizSessionService;

        public QuizSessionsController(IQuizSessionService quizSessionService)
        {
            _quizSessionService = quizSessionService;
        }

        // POST: api/QuizSessions/start
        [HttpPost("start")]
        public async Task<ActionResult<QuizSession>> StartQuizSession([FromBody] int quizId)
        {
            try
            {
                var userIdString = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                if (!Guid.TryParse(userIdString, out Guid userId))
                {
                    return Unauthorized(new { message = "Invalid or missing user ID in token." });
                }
                var session = await _quizSessionService.StartQuizSessionAsync(quizId,userId);
                return Ok(session);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        // POST: api/QuizSessions/{sessionId}/answers
        [HttpPost("{sessionId}/answers")]
        public async Task<ActionResult<UserAnswer>> SubmitAnswer(Guid sessionId, [FromBody] SubmitAnswerRequest request)
        {
            try
            {
                var answer = await _quizSessionService.SubmitAnswerAsync(sessionId, request.QuestionId, request.SelectedOptionId);
                return Ok(answer);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        // POST: api/QuizSessions/{sessionId}/finish
        [HttpPost("{sessionId}/finish")]
        public async Task<ActionResult<int>> FinishQuizSession(Guid sessionId)
        {
            try
            {
                var totalScore = await _quizSessionService.FinishQuizSessionAsync(sessionId);
                return Ok(totalScore);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        // Optionally, if you need to retrieve session details:
        // GET: api/QuizSessions/{id}
       /* [HttpGet("{id}")]
        public async Task<ActionResult<QuizSession>> GetQuizSession(Guid id)
        {
            // Implementation would likely involve querying the context or extending your service.
            // For now, you could either implement it here or simply return a NotFound if not needed.
            return NotFound("GET session details endpoint is not implemented.");
        }*/
    }


    // DTO for submitting an answer.
    public class SubmitAnswerRequest
    {
        public int QuestionId { get; set; }
        public int SelectedOptionId { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Quizzes/Services/QuizSessionServices/QuizSessionService.cs">
/*namespace QuizAPI.Controllers.Quizzes.Services.QuizSessionServices
{
    using Microsoft.EntityFrameworkCore;
    using QuizAPI.Data;
    using QuizAPI.Models.Quiz;
    using System;
    using System.Linq;
    using System.Threading.Tasks;

    public class QuizSessionService : IQuizSessionService
    {
        private readonly ApplicationDbContext _context;

        public QuizSessionService(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<QuizSession> StartQuizSessionAsync(int quizId, Guid userId)
        {
            // Ensure that the quiz exists, is published, and active.
            var quiz = await _context.Quizzes
                .Include(q => q.QuizQuestions)
                    .ThenInclude(qq => qq.Question)
                .FirstOrDefaultAsync(q => q.Id == quizId && q.IsPublished && q.IsActive);

            if (quiz == null)
            {
                throw new Exception("Quiz not found or not available.");
            }

            // Create a new quiz session.
            var session = new QuizSession
            {
                Id = Guid.NewGuid(),
                QuizId = quizId,
                UserId = userId,
                StartTime = DateTime.UtcNow,
                TotalScore = 0
            };

            _context.QuizSessions.Add(session);
            await _context.SaveChangesAsync();

            return session;
        }

        public async Task<UserAnswer> SubmitAnswerAsync(Guid sessionId, int questionId, int selectedOptionId)
        {
            // Find the session and include existing answers to prevent duplicates.
            var session = await _context.QuizSessions
                .Include(s => s.UserAnswers)
                .FirstOrDefaultAsync(s => s.Id == sessionId);
            if (session == null)
            {
                throw new Exception("Session not found.");
            }

            // Prevent submission if the session has already been finished.
            if (session.EndTime != null)
            {
                throw new Exception("Quiz session has already been finished.");
            }

            // Prevent duplicate answers for the same question.
            if (session.UserAnswers.Any(ua => ua.QuestionId == questionId))
            {
                throw new Exception("Answer for this question has already been submitted.");
            }

            // Load the question with its answer options.
            var question = await _context.Questions
                .Include(q => q.AnswerOptions)
                .FirstOrDefaultAsync(q => q.Id == questionId);
            if (question == null)
            {
                throw new Exception("Question not found.");
            }

            // Verify the selected option exists and belongs to the question.
            var selectedOption = question.AnswerOptions.FirstOrDefault(ao => ao.Id == selectedOptionId);
            if (selectedOption == null)
            {
                throw new Exception("Selected answer option does not belong to this question.");
            }

            // Determine if the answer is correct.
            bool isCorrect = selectedOption.IsCorrect;

            // Get the score for this question from the QuizQuestion relationship.
            var quizQuestion = await _context.QuizQuestions
                .FirstOrDefaultAsync(qq => qq.QuizId == session.QuizId && qq.QuestionId == questionId);
            if (quizQuestion == null)
            {
                throw new Exception("Question not found in this quiz.");
            }

            // Record the user's answer.
            var userAnswer = new UserAnswer
            {
                SessionId = sessionId,
                QuestionId = questionId,
                SelectedOptionId = selectedOptionId,
                IsCorrect = isCorrect,
                Score = isCorrect ? quizQuestion.Score : 0
            };

            _context.UserAnswers.Add(userAnswer);
            await _context.SaveChangesAsync();

            return userAnswer;
        }

        public async Task<int> FinishQuizSessionAsync(Guid sessionId)
        {
            // Load the session along with its answers.
            var session = await _context.QuizSessions
                .Include(s => s.UserAnswers)
                .FirstOrDefaultAsync(s => s.Id == sessionId);

            if (session == null)
            {
                throw new Exception("Session not found.");
            }

            // Prevent finishing an already finished session.
            if (session.EndTime != null)
            {
                throw new Exception("Quiz session has already been finished.");
            }

            // Calculate the total score from all recorded answers.
            int totalScore = session.UserAnswers.Sum(a => a.Score);

            // Finalize the session.
            session.EndTime = DateTime.UtcNow;
            session.TotalScore = totalScore;

            await _context.SaveChangesAsync();

            return totalScore;
        }
    }
}*/
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Totals/TotalsController.cs">
using Microsoft.AspNetCore.Mvc;
using QuizAPI.Models;
using QuizAPI.Models;
using QuizAPI.Services;

namespace QuizAPI.Controllers.Totals
{
    [ApiController]
    [Route("api/[controller]")]
    public class TotalsController : ControllerBase
    {
        private readonly DashboardService _dashboardService;

        public TotalsController(DashboardService dashboardService)
        {
            _dashboardService = dashboardService;

        }

        [HttpGet("Users")]
        public ActionResult<int> GetTotalUsers()
        {
            var totalUsers = _dashboardService.GetTotalCount<User>();
            return Ok(totalUsers);
        }

        [HttpGet("Questions")]
        public ActionResult<int> GetTotalQuestions()
        {
            var totalQuestions = _dashboardService.GetTotalCount<QuestionBase>();
            return Ok(totalQuestions);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Users/UsersController.cs">
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using QuizAPI.Data;
using QuizAPI.DTOs.User;
using QuizAPI.Models;
using QuizAPI.Services;

namespace QuizAPI.Controllers.Users
{
    [Route("api/[controller]")]
    [ApiController]
    public class UsersController : ControllerBase
    {
        private readonly ApplicationDbContext _context;
        private readonly DashboardService _dashboardService;

        public UsersController(ApplicationDbContext context, DashboardService dashboardService)
        {
            _context = context;
            _dashboardService = dashboardService;
        }

        // GET: api/Users
        [HttpGet]
        public async Task<ActionResult<IEnumerable<FullUserDTO>>> GetUsers()
        {
            if (_context.Users == null)
            {
                return NotFound();
            }
            var totalUsers = _dashboardService.GetTotalCount<User>();
            var users = await _context.Users.Include(u => u.Role).ToListAsync();

            var userDTOs = users.Select(user => new FullUserDTO
            {
                Id = user.Id,
                ImmutableName = user.ImmutableName,
                Username = user.Username,
                Email = user.Email,
                DateRegistered = user.DateRegistered,
                Role = MapRoleIdToRole(user.RoleId),
                IsDeleted = user.IsDeleted,
                TotalUsers = totalUsers,
                LastLogin = user.LastLogin,
                ProfileImageUrl = user.ProfileImageUrl
            }).ToList();

            return Ok(userDTOs);
        }

        private static string MapRoleIdToRole(int roleId)
        {
            return roleId switch
            {
                1 => "admin",
                2 => "user",
                3 => "superadmin",
                _ => "user"
            };
        }

        private static int MapRoleToRoleId(string role)
        {
            return role.ToLower() switch
            {
                "admin" => 1,
                "user" => 2,
                "superadmin" => 3,
                _ => 2 // default to user if role is unknown
            };
        }

       

        // GET: api/Users/5
        [HttpGet("{id}")]
        public async Task<ActionResult<User>> GetUser(Guid id)
        {
            if (_context.Users == null)
            {
                return NotFound();
            }
            var user = await _context.Users.FindAsync(id);

            if (user == null)
            {
                return NotFound();
            }

            return user;
        }

        // PUT: api/Users/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutUser(Guid id, User user)
        {
            if (id != user.Id)
            {
                return BadRequest();
            }

            _context.Entry(user).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!UserExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Users
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<User>> PostUser(TemporaryUserCR user)
        {
            if (_context.Users == null)
            {
                return Problem("Entity set 'ApplicationDbContext.Users'  is null.");
            }

            int roleId = !string.IsNullOrEmpty(user.Role)
                ? MapRoleToRoleId(user.Role)
                : 2;

            var newUser = new User
            {
                Id = Guid.NewGuid(),
                Username = user.Username,
                Email = user.Email,
                ImmutableName = user.Username.ToLower(),
                PasswordHash = BCrypt.Net.BCrypt.HashPassword(user.Password),
                DateRegistered = DateTime.UtcNow,
                LastLogin = DateTime.UtcNow,
                RoleId = roleId,
                IsDeleted = false,
                ProfileImageUrl = string.Empty
            };
            _context.Users.Add(newUser);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetUser", new { id = newUser.Id }, newUser);
        }

        // DELETE: api/Users/5
        [HttpDelete("{id}")]
        [Authorize]
        public async Task<IActionResult> DeleteUser(Guid id, [FromHeader] string authorization)
        {
            if (string.IsNullOrEmpty(authorization) || !authorization.StartsWith("Bearer "))
            {
                return Unauthorized("Invalid or missing token.");
            }

            var token = authorization.Substring("Bearer ".Length).Trim();

            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            Console.WriteLine($"Token Expiration Time (UTC): {jwtToken.ValidTo}");
            Console.WriteLine($"Current Server Time (UTC): {DateTime.UtcNow}");

            if (jwtToken.ValidTo < DateTime.UtcNow)
            {
                return Unauthorized("Token has expired.");
            }

            if (_context.Users == null)
            {
                return NotFound();
            }
            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                return NotFound();
            }

            user.IsDeleted = true;
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool UserExists(Guid id)
        {
            return (_context.Users?.Any(e => e.Id == id)).GetValueOrDefault();
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250327194938_PrivateQuestionModel.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class PrivateQuestionModel : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "PrivateQuestionId",
                table: "AnswerOptions",
                type: "int",
                nullable: true);

            migrationBuilder.CreateTable(
                name: "PrivateQuestions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Text = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DifficultyId = table.Column<int>(type: "int", nullable: true),
                    CategoryId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PrivateQuestions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PrivateQuestions_QuestionCategories_CategoryId",
                        column: x => x.CategoryId,
                        principalTable: "QuestionCategories",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PrivateQuestions_QuestionDifficulties_DifficultyId",
                        column: x => x.DifficultyId,
                        principalTable: "QuestionDifficulties",
                        principalColumn: "ID");
                    table.ForeignKey(
                        name: "FK_PrivateQuestions_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AnswerOptions_PrivateQuestionId",
                table: "AnswerOptions",
                column: "PrivateQuestionId");

            migrationBuilder.CreateIndex(
                name: "IX_PrivateQuestions_CategoryId",
                table: "PrivateQuestions",
                column: "CategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_PrivateQuestions_DifficultyId",
                table: "PrivateQuestions",
                column: "DifficultyId");

            migrationBuilder.CreateIndex(
                name: "IX_PrivateQuestions_UserId",
                table: "PrivateQuestions",
                column: "UserId");

            migrationBuilder.AddForeignKey(
                name: "FK_AnswerOptions_PrivateQuestions_PrivateQuestionId",
                table: "AnswerOptions",
                column: "PrivateQuestionId",
                principalTable: "PrivateQuestions",
                principalColumn: "Id");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_AnswerOptions_PrivateQuestions_PrivateQuestionId",
                table: "AnswerOptions");

            migrationBuilder.DropTable(
                name: "PrivateQuestions");

            migrationBuilder.DropIndex(
                name: "IX_AnswerOptions_PrivateQuestionId",
                table: "AnswerOptions");

            migrationBuilder.DropColumn(
                name: "PrivateQuestionId",
                table: "AnswerOptions");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250327194938_PrivateQuestionModel.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250327194938_PrivateQuestionModel")]
    partial class PrivateQuestionModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("PrivateQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateQuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.PrivateQuestion", null)
                        .WithMany("AnswerOptions")
                        .HasForeignKey("PrivateQuestionId");

                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250331220610_QuizModelUpdate.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuizModelUpdate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "PassingScore",
                table: "Quizzes");

            migrationBuilder.DropColumn(
                name: "TimeLimit",
                table: "Quizzes");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "PassingScore",
                table: "Quizzes",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "TimeLimit",
                table: "Quizzes",
                type: "int",
                nullable: true);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250331220610_QuizModelUpdate.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250331220610_QuizModelUpdate")]
    partial class QuizModelUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("PrivateQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateQuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.PrivateQuestion", null)
                        .WithMany("AnswerOptions")
                        .HasForeignKey("PrivateQuestionId");

                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250408223844_newQuestionConfiguration.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class newQuestionConfiguration : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "AcceptableAnswers",
                table: "Questions",
                type: "nvarchar(max)",
                nullable: true);

            migrationBuilder.AddColumn<bool>(
                name: "AllowMultipleSelections",
                table: "Questions",
                type: "bit",
                nullable: true);

            migrationBuilder.AddColumn<bool>(
                name: "AllowPartialMatch",
                table: "Questions",
                type: "bit",
                nullable: true);

            migrationBuilder.AddColumn<bool>(
                name: "CorrectAnswer",
                table: "Questions",
                type: "bit",
                nullable: true);

            migrationBuilder.AddColumn<bool>(
                name: "IsCaseSensitive",
                table: "Questions",
                type: "bit",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "PointSystem",
                table: "Questions",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "TimeLimitInSeconds",
                table: "Questions",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "Type",
                table: "Questions",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<string>(
                name: "TypeAnswerQuestion_CorrectAnswer",
                table: "Questions",
                type: "nvarchar(max)",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "MultipleChoiceQuestionId",
                table: "AnswerOptions",
                type: "int",
                nullable: true);

            migrationBuilder.CreateIndex(
                name: "IX_AnswerOptions_MultipleChoiceQuestionId",
                table: "AnswerOptions",
                column: "MultipleChoiceQuestionId");

            migrationBuilder.AddForeignKey(
                name: "FK_AnswerOptions_Questions_MultipleChoiceQuestionId",
                table: "AnswerOptions",
                column: "MultipleChoiceQuestionId",
                principalTable: "Questions",
                principalColumn: "Id");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_AnswerOptions_Questions_MultipleChoiceQuestionId",
                table: "AnswerOptions");

            migrationBuilder.DropIndex(
                name: "IX_AnswerOptions_MultipleChoiceQuestionId",
                table: "AnswerOptions");

            migrationBuilder.DropColumn(
                name: "AcceptableAnswers",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "AllowMultipleSelections",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "AllowPartialMatch",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "CorrectAnswer",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "IsCaseSensitive",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "PointSystem",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "TimeLimitInSeconds",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "Type",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "TypeAnswerQuestion_CorrectAnswer",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "MultipleChoiceQuestionId",
                table: "AnswerOptions");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250408223844_newQuestionConfiguration.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250408223844_newQuestionConfiguration")]
    partial class newQuestionConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("MultipleChoiceQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("PrivateQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.HasIndex("PrivateQuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PointSystem")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("AllowMultipleSelections")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("QuizAPI.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("QuizAPI.Models.TypeAnswerQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<string>("AcceptableAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowPartialMatch")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("CorrectAnswer")
                                .HasColumnName("TypeAnswerQuestion_CorrectAnswer");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.MultipleChoiceQuestion", null)
                        .WithMany("AnswerOptions")
                        .HasForeignKey("MultipleChoiceQuestionId");

                    b.HasOne("QuizAPI.Models.Quiz.PrivateQuestion", null)
                        .WithMany("AnswerOptions")
                        .HasForeignKey("PrivateQuestionId");

                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250410121139_QuizQuestionUpdate.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuizQuestionUpdate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_AnswerOptions_Questions_MultipleChoiceQuestionId",
                table: "AnswerOptions");

            migrationBuilder.DropIndex(
                name: "IX_AnswerOptions_MultipleChoiceQuestionId",
                table: "AnswerOptions");

            migrationBuilder.DropColumn(
                name: "PointSystem",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "TimeLimitInSeconds",
                table: "Questions");

            migrationBuilder.DropColumn(
                name: "MultipleChoiceQuestionId",
                table: "AnswerOptions");

            migrationBuilder.RenameColumn(
                name: "Score",
                table: "QuizQuestions",
                newName: "TimeLimitInSeconds");

            migrationBuilder.AddColumn<int>(
                name: "PointSystem",
                table: "QuizQuestions",
                type: "int",
                nullable: false,
                defaultValue: 0);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "PointSystem",
                table: "QuizQuestions");

            migrationBuilder.RenameColumn(
                name: "TimeLimitInSeconds",
                table: "QuizQuestions",
                newName: "Score");

            migrationBuilder.AddColumn<int>(
                name: "PointSystem",
                table: "Questions",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "TimeLimitInSeconds",
                table: "Questions",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "MultipleChoiceQuestionId",
                table: "AnswerOptions",
                type: "int",
                nullable: true);

            migrationBuilder.CreateIndex(
                name: "IX_AnswerOptions_MultipleChoiceQuestionId",
                table: "AnswerOptions",
                column: "MultipleChoiceQuestionId");

            migrationBuilder.AddForeignKey(
                name: "FK_AnswerOptions_Questions_MultipleChoiceQuestionId",
                table: "AnswerOptions",
                column: "MultipleChoiceQuestionId",
                principalTable: "Questions",
                principalColumn: "Id");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250410121139_QuizQuestionUpdate.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250410121139_QuizQuestionUpdate")]
    partial class QuizQuestionUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("PointSystem")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("PrivateQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateQuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("AllowMultipleSelections")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("QuizAPI.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("QuizAPI.Models.TypeAnswerQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<string>("AcceptableAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowPartialMatch")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("CorrectAnswer")
                                .HasColumnName("TypeAnswerQuestion_CorrectAnswer");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.PrivateQuestion", null)
                        .WithMany("AnswerOptions")
                        .HasForeignKey("PrivateQuestionId");

                    b.HasOne("QuizAPI.Models.MultipleChoiceQuestion", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250413223747_TypeAnswerToTypeTheAnswerChange.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class TypeAnswerToTypeTheAnswerChange : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.RenameColumn(
                name: "TypeAnswerQuestion_CorrectAnswer",
                table: "Questions",
                newName: "TypeTheAnswerQuestion_CorrectAnswer");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.RenameColumn(
                name: "TypeTheAnswerQuestion_CorrectAnswer",
                table: "Questions",
                newName: "TypeAnswerQuestion_CorrectAnswer");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250413223747_TypeAnswerToTypeTheAnswerChange.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250413223747_TypeAnswerToTypeTheAnswerChange")]
    partial class TypeAnswerToTypeTheAnswerChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("PointSystem")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("PrivateQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateQuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("AllowMultipleSelections")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("QuizAPI.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("QuizAPI.Models.TypeTheAnswerQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<string>("AcceptableAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowPartialMatch")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("CorrectAnswer")
                                .HasColumnName("TypeTheAnswerQuestion_CorrectAnswer");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.PrivateQuestion", null)
                        .WithMany("AnswerOptions")
                        .HasForeignKey("PrivateQuestionId");

                    b.HasOne("QuizAPI.Models.MultipleChoiceQuestion", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250427111456_QuizModelUpdate2.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuizModelUpdate2 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "ShuffleAnswers",
                table: "Quizzes");

            migrationBuilder.AddColumn<int>(
                name: "DifficultyId",
                table: "Quizzes",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "TimeLimit",
                table: "Quizzes",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.CreateIndex(
                name: "IX_Quizzes_DifficultyId",
                table: "Quizzes",
                column: "DifficultyId");

            migrationBuilder.AddForeignKey(
                name: "FK_Quizzes_QuestionDifficulties_DifficultyId",
                table: "Quizzes",
                column: "DifficultyId",
                principalTable: "QuestionDifficulties",
                principalColumn: "ID",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Quizzes_QuestionDifficulties_DifficultyId",
                table: "Quizzes");

            migrationBuilder.DropIndex(
                name: "IX_Quizzes_DifficultyId",
                table: "Quizzes");

            migrationBuilder.DropColumn(
                name: "DifficultyId",
                table: "Quizzes");

            migrationBuilder.DropColumn(
                name: "TimeLimit",
                table: "Quizzes");

            migrationBuilder.AddColumn<bool>(
                name: "ShuffleAnswers",
                table: "Quizzes",
                type: "bit",
                nullable: false,
                defaultValue: false);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250427111456_QuizModelUpdate2.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250427111456_QuizModelUpdate2")]
    partial class QuizModelUpdate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("PointSystem")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("PrivateQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateQuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("AllowMultipleSelections")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("QuizAPI.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("QuizAPI.Models.TypeTheAnswerQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<string>("AcceptableAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowPartialMatch")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("CorrectAnswer")
                                .HasColumnName("TypeTheAnswerQuestion_CorrectAnswer");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.PrivateQuestion", null)
                        .WithMany("AnswerOptions")
                        .HasForeignKey("PrivateQuestionId");

                    b.HasOne("QuizAPI.Models.MultipleChoiceQuestion", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250506134649_QuestionImageImplementation.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuestionImageImplementation : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.RenameColumn(
                name: "TimeLimit",
                table: "Quizzes",
                newName: "TimeLimitInSeconds");

            migrationBuilder.AddColumn<string>(
                name: "ImageUrl",
                table: "Questions",
                type: "nvarchar(max)",
                nullable: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "ImageUrl",
                table: "Questions");

            migrationBuilder.RenameColumn(
                name: "TimeLimitInSeconds",
                table: "Quizzes",
                newName: "TimeLimit");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250506134649_QuestionImageImplementation.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250506134649_QuestionImageImplementation")]
    partial class QuestionImageImplementation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("PointSystem")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("PrivateQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateQuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("AllowMultipleSelections")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("QuizAPI.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("QuizAPI.Models.TypeTheAnswerQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<string>("AcceptableAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowPartialMatch")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("CorrectAnswer")
                                .HasColumnName("TypeTheAnswerQuestion_CorrectAnswer");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.PrivateQuestion", null)
                        .WithMany("AnswerOptions")
                        .HasForeignKey("PrivateQuestionId");

                    b.HasOne("QuizAPI.Models.MultipleChoiceQuestion", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250516220817_NewImageAssetEntity.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class NewImageAssetEntity : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "ImageAssets",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    OriginalFileName = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    FileFormat = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    FilePath = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    IsUsed = table.Column<bool>(type: "bit", nullable: false),
                    EntityType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EntityId = table.Column<int>(type: "int", nullable: true),
                    CreatedDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastModifiedDate = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ImageAssets", x => x.Id);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "ImageAssets");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250516220817_NewImageAssetEntity.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250516220817_NewImageAssetEntity")]
    partial class NewImageAssetEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("PointSystem")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("PrivateQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateQuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.ImageAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ImageAssets");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("AllowMultipleSelections")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("QuizAPI.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("QuizAPI.Models.TypeTheAnswerQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<string>("AcceptableAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowPartialMatch")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("CorrectAnswer")
                                .HasColumnName("TypeTheAnswerQuestion_CorrectAnswer");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.PrivateQuestion", null)
                        .WithMany("AnswerOptions")
                        .HasForeignKey("PrivateQuestionId");

                    b.HasOne("QuizAPI.Models.MultipleChoiceQuestion", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250516222730_ImageAssetEntityChange.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class ImageAssetEntityChange : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "EntityType",
                table: "ImageAssets",
                type: "nvarchar(50)",
                maxLength: 50,
                nullable: true,
                oldClrType: typeof(string),
                oldType: "nvarchar(50)",
                oldMaxLength: 50);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "EntityType",
                table: "ImageAssets",
                type: "nvarchar(50)",
                maxLength: 50,
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "nvarchar(50)",
                oldMaxLength: 50,
                oldNullable: true);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250516222730_ImageAssetEntityChange.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250516222730_ImageAssetEntityChange")]
    partial class ImageAssetEntityChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("PointSystem")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("PrivateQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateQuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.ImageAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ImageAssets");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("AllowMultipleSelections")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("QuizAPI.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("QuizAPI.Models.TypeTheAnswerQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<string>("AcceptableAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowPartialMatch")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("CorrectAnswer")
                                .HasColumnName("TypeTheAnswerQuestion_CorrectAnswer");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.PrivateQuestion", null)
                        .WithMany("AnswerOptions")
                        .HasForeignKey("PrivateQuestionId");

                    b.HasOne("QuizAPI.Models.MultipleChoiceQuestion", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.PrivateQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250519233530_removedPrivateQuestionEntity.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class removedPrivateQuestionEntity : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_AnswerOptions_PrivateQuestions_PrivateQuestionId",
                table: "AnswerOptions");

            migrationBuilder.DropTable(
                name: "PrivateQuestions");

            migrationBuilder.DropIndex(
                name: "IX_AnswerOptions_PrivateQuestionId",
                table: "AnswerOptions");

            migrationBuilder.DropColumn(
                name: "PrivateQuestionId",
                table: "AnswerOptions");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "PrivateQuestionId",
                table: "AnswerOptions",
                type: "int",
                nullable: true);

            migrationBuilder.CreateTable(
                name: "PrivateQuestions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CategoryId = table.Column<int>(type: "int", nullable: true),
                    DifficultyId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Text = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PrivateQuestions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PrivateQuestions_QuestionCategories_CategoryId",
                        column: x => x.CategoryId,
                        principalTable: "QuestionCategories",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PrivateQuestions_QuestionDifficulties_DifficultyId",
                        column: x => x.DifficultyId,
                        principalTable: "QuestionDifficulties",
                        principalColumn: "ID");
                    table.ForeignKey(
                        name: "FK_PrivateQuestions_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AnswerOptions_PrivateQuestionId",
                table: "AnswerOptions",
                column: "PrivateQuestionId");

            migrationBuilder.CreateIndex(
                name: "IX_PrivateQuestions_CategoryId",
                table: "PrivateQuestions",
                column: "CategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_PrivateQuestions_DifficultyId",
                table: "PrivateQuestions",
                column: "DifficultyId");

            migrationBuilder.CreateIndex(
                name: "IX_PrivateQuestions_UserId",
                table: "PrivateQuestions",
                column: "UserId");

            migrationBuilder.AddForeignKey(
                name: "FK_AnswerOptions_PrivateQuestions_PrivateQuestionId",
                table: "AnswerOptions",
                column: "PrivateQuestionId",
                principalTable: "PrivateQuestions",
                principalColumn: "Id");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250519233530_removedPrivateQuestionEntity.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250519233530_removedPrivateQuestionEntity")]
    partial class removedPrivateQuestionEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("PointSystem")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.ImageAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ImageAssets");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("AllowMultipleSelections")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("QuizAPI.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("QuizAPI.Models.TypeTheAnswerQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<string>("AcceptableAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowPartialMatch")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("CorrectAnswer")
                                .HasColumnName("TypeTheAnswerQuestion_CorrectAnswer");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.MultipleChoiceQuestion", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250521101912_QuizQuestionModification.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuizQuestionModification : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "OrderInQuiz",
                table: "QuizQuestions",
                type: "int",
                nullable: false,
                defaultValue: 0);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "OrderInQuiz",
                table: "QuizQuestions");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250521101912_QuizQuestionModification.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250521101912_QuizQuestionModification")]
    partial class QuizQuestionModification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("OrderInQuiz")
                        .HasColumnType("int");

                    b.Property<int>("PointSystem")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.ImageAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ImageAssets");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("AllowMultipleSelections")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("QuizAPI.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("QuizAPI.Models.TypeTheAnswerQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<string>("AcceptableAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowPartialMatch")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("CorrectAnswer")
                                .HasColumnName("TypeTheAnswerQuestion_CorrectAnswer");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.MultipleChoiceQuestion", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250524144204_QuizVisibilityAttribute.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class QuizVisibilityAttribute : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<bool>(
                name: "ShowFeedbackImmediately",
                table: "Quizzes",
                type: "bit",
                nullable: false,
                defaultValue: false);

            migrationBuilder.AddColumn<int>(
                name: "Visibility",
                table: "Quizzes",
                type: "int",
                nullable: false,
                defaultValue: 0);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "ShowFeedbackImmediately",
                table: "Quizzes");

            migrationBuilder.DropColumn(
                name: "Visibility",
                table: "Quizzes");
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250524144204_QuizVisibilityAttribute.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250524144204_QuizVisibilityAttribute")]
    partial class QuizVisibilityAttribute
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("OrderInQuiz")
                        .HasColumnType("int");

                    b.Property<int>("PointSystem")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.ImageAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ImageAssets");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowFeedbackImmediately")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("AllowMultipleSelections")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("QuizAPI.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("QuizAPI.Models.TypeTheAnswerQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<string>("AcceptableAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowPartialMatch")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("CorrectAnswer")
                                .HasColumnName("TypeTheAnswerQuestion_CorrectAnswer");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.MultipleChoiceQuestion", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250604210904_TimeLimit.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace QuizAPI.Migrations
{
    /// <inheritdoc />
    public partial class TimeLimit : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<int>(
                name: "TimeLimitInSeconds",
                table: "Quizzes",
                type: "int",
                nullable: true,
                oldClrType: typeof(int),
                oldType: "int");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<int>(
                name: "TimeLimitInSeconds",
                table: "Quizzes",
                type: "int",
                nullable: false,
                defaultValue: 0,
                oldClrType: typeof(int),
                oldType: "int",
                oldNullable: true);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/20250604210904_TimeLimit.Designer.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250604210904_TimeLimit")]
    partial class TimeLimit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("OrderInQuiz")
                        .HasColumnType("int");

                    b.Property<int>("PointSystem")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.ImageAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ImageAssets");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowFeedbackImmediately")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("AllowMultipleSelections")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("QuizAPI.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("QuizAPI.Models.TypeTheAnswerQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<string>("AcceptableAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowPartialMatch")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("CorrectAnswer")
                                .HasColumnName("TypeTheAnswerQuestion_CorrectAnswer");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.MultipleChoiceQuestion", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/DTOs/Question/QuestionCategoryDTO.cs">
namespace QuizAPI.DTOs.Question
{

    //CM = Create Model
    public class QuestionCategoryCM
    {
        public string Name { get; set; }

        public string Emoji { get; set; }
    }

    public class QuestionCategoryDTO {

        public int Id { get; set; }
        public string Name { get; set; }
        public string Username { get; set; }
        public DateTime CreatedAt { get; set; }
    }

}
</file>

<file path="OxygenBackend/QuizAPI/DTOs/Question/QuestionDifficultyDTO.cs">
namespace QuizAPI.DTOs.Question
{
    public class QuestionDifficultyDTO
    {
        public int ID { get; set; }

        public string Level { get; set; }

        public int? Weight { get; set; }

        public string Username { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class QuestionDifficultyCM
    {
        public string Level { get; set; }

        public int? Weight { get; set; }
    }

}
</file>

<file path="OxygenBackend/QuizAPI/DTOs/Question/QuestionLanguageDTO.cs">
namespace QuizAPI.DTOs.Question
{
    public class QuestionLanguageDTO
    {
        public int ID { get; set; }

        public string Language { get; set; }

        public string Username { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class QuestionLanguageCM
    {
        public string Language { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/DTOs/Quiz/QuizQuestionDTO.cs">
using QuizAPI.DTOs.Question;
using QuizAPI.Models;
using System.ComponentModel.DataAnnotations;

namespace QuizAPI.DTOs.Quiz
{
    public class QuizQuestionDTO
    {
        public int QuizId { get; set; }
        public int QuestionId { get; set; }
        public int TimeLimitInSeconds { get; set; }
        public string PointSystem { get; set; } = string.Empty;

        public int OrderInQuiz { get; set; }

        public QuestionBaseDTO Question { get; set; } = new();
      
    }

    public class QuizQuestionCM
    {
        [Required]
        public int QuestionId { get; set; }

        [Range(0, 2000)]
        public int TimeLimitInSeconds { get; set; } = 10;

        [Required]
        public string PointSystem { get; set; } = "Standard";

        public int OrderInQuiz { get; set; }

    }


    //SAME AS THE CM BUT BETTER TO HAVE FOR CLARITY 
    public class QuizQuestionUM
    {
        [Required]
        public int QuestionId { get; set; }

        [Range(0, 2000)]
        public int TimeLimitInSeconds { get; set; } = 10;

        [Required]
        public string PointSystem { get; set; } = "Standard";

        public int OrderInQuiz { get; set; }

    }
}
</file>

<file path="OxygenBackend/QuizAPI/Helpers/QuestionHelpers.cs">
using QuizAPI.DTOs.Question;

namespace QuizAPI.Helpers
{
   
   /* public static class QuestionHelpers
    {
        public static bool ValidateQuestionDto(QuestionBaseCM questionDto)
        {
            if (questionDto == null)
                return false;

            if (string.IsNullOrWhiteSpace(questionDto.Text))
                return false;

            if (questionDto.AnswerOptions == null || questionDto.AnswerOptions.Count < 2)
                return false;

            return ValidateAnswerOptions(questionDto.AnswerOptions);
        }

        public static bool ValidateAnswerOptions(ICollection<AnswerOptionCM> answerOptions)
        {
            int correctAnswers = answerOptions.Count(o => o.IsCorrect);
            int incorrectAnswers = answerOptions.Count(o => !o.IsCorrect);

            return correctAnswers == 1 && incorrectAnswers >= 1;
        }
    }*/
}
</file>

<file path="OxygenBackend/QuizAPI/Models/ImageAsset.cs">
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace QuizAPI.Models
{
    public class ImageAsset
    {
        [Key]
        public int Id { get; set; }

        [Required]
        [MaxLength(100)]
        public string FileName { get; set; }

        [MaxLength(255)]
        public string OriginalFileName { get; set; }

        [MaxLength(10)]
        public string FileFormat { get; set; }

        [MaxLength(500)]
        public string FilePath { get; set; }

        public bool IsUsed { get; set; }

        [MaxLength(50)]
        public string? EntityType { get; set; }

        public int? EntityId { get; set; }

        public DateTime CreatedDate { get; set; }

        public DateTime? LastModifiedDate { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/Questions/Question-Category.cs">
using QuizAPI.DTOs.Question;
using QuizAPI.Models;
using System.ComponentModel.DataAnnotations.Schema;

namespace QuizAPI.Models
{
    public class QuestionCategory
    {
        public int Id { get; set; }

        public string Name { get; set; }

        [ForeignKey("UserId")]
        public User User { get; set; }//CreatedBy

        public DateTime CreatedAt { get; set; }

        public Guid UserId { get; set; }
        public ICollection<QuestionBase> Questions { get; set; }

        public string? Emoji { get; set; }

    }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/Questions/Question-Difficulty.cs">
using System.ComponentModel.DataAnnotations.Schema;

namespace QuizAPI.Models;

public class QuestionDifficulty
{
    public int ID { get; set; }

    public string Level { get; set; }

    public int? Weight  { get; set; }

    public DateTime CreatedAt { get; set; }

    [ForeignKey("UserId")]
    public User User { get; set; } //CreatedBy

    public Guid UserId { get; set; }

    public ICollection<QuestionBase> Questions { get; set; }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/Questions/Question-Language.cs">
using System.ComponentModel.DataAnnotations.Schema;

namespace QuizAPI.Models
{
    public class QuestionLanguage
    {
        public int Id { get; set; }
        public string Language { get; set; }

        public DateTime CreatedAt { get; set; }

        public Guid UserId { get; set; }

        [ForeignKey("UserId")]
        public User User { get; set; } //CreatedBy

        public ICollection<QuestionBase> Questions { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/Quiz/UserAnswer.cs">
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace QuizAPI.Models.Quiz
{
    public class UserAnswer
    {

            public int Id { get; set; }
            public Guid SessionId { get; set; }
            public int QuestionId { get; set; }
            public string SubmittedAnswer { get; set; }

        [ForeignKey(nameof(AnswerOption))]
        public int SelectedOptionId { get; set; }

        [JsonIgnore]
        public virtual AnswerOption AnswerOption{ get; set; }

        public bool IsCorrect { get; set; }
            public int Score { get; set; } 
            public QuizSession QuizSession { get; set; }
            public QuestionBase Question { get; set; }
        }
    
}
</file>

<file path="OxygenBackend/QuizAPI/Models/Statistics/Questions/QuestionStatistics.cs">
using System.Text.Json.Serialization;

namespace QuizAPI.Models.Statistics.Questions
{
    public class QuestionStatistics
    {
        
            public int Id { get; set; }
            public int QuestionId { get; set; } // Foreign key to the Question entity

            public int TimesUsedInQuizzes { get; set; } // Number of quizzes this question is part of
            public int TimesAnsweredCorrectly { get; set; } // Number of times the question was answered correctly
            public int TimesAnsweredIncorrectly { get; set; } // Number of times the question was answered incorrectly

            [JsonIgnore]
            public QuestionBase Question { get; set; }
        
    }
}
</file>

<file path="OxygenBackend/QuizAPI/QuizAPI.csproj.user">
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ActiveDebugProfile>QuizAPI</ActiveDebugProfile>
    <Controller_SelectedScaffolderID>ApiControllerEmptyScaffolder</Controller_SelectedScaffolderID>
    <Controller_SelectedScaffolderCategoryPath>root/Common/Api</Controller_SelectedScaffolderCategoryPath>
    <WebStackScaffolding_ControllerDialogWidth>650</WebStackScaffolding_ControllerDialogWidth>
    <WebStackScaffolding_IsLayoutPageSelected>True</WebStackScaffolding_IsLayoutPageSelected>
    <WebStackScaffolding_IsPartialViewSelected>False</WebStackScaffolding_IsPartialViewSelected>
    <WebStackScaffolding_IsReferencingScriptLibrariesSelected>True</WebStackScaffolding_IsReferencingScriptLibrariesSelected>
    <WebStackScaffolding_LayoutPageFile />
    <WebStackScaffolding_DbContextTypeFullName>QuizAPI.Data.ApplicationDbContext</WebStackScaffolding_DbContextTypeFullName>
    <WebStackScaffolding_IsAsyncSelected>False</WebStackScaffolding_IsAsyncSelected>
    <_SelectedScaffolderID>ApiControllerWithContextScaffolder</_SelectedScaffolderID>
    <_SelectedScaffolderCategoryPath>root/Common/Api</_SelectedScaffolderCategoryPath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DebuggerFlavor>ProjectDebugger</DebuggerFlavor>
  </PropertyGroup>
</Project>
</file>

<file path="OxygenBackend/QuizAPI/QuizAPI.sln">
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.34114.132
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "QuizAPI", "QuizAPI.csproj", "{5A0F4435-7F6A-4C0D-B2F1-7A0DD7BCC570}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{5A0F4435-7F6A-4C0D-B2F1-7A0DD7BCC570}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{5A0F4435-7F6A-4C0D-B2F1-7A0DD7BCC570}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{5A0F4435-7F6A-4C0D-B2F1-7A0DD7BCC570}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{5A0F4435-7F6A-4C0D-B2F1-7A0DD7BCC570}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {45FFCE5D-33EA-4696-8FCA-0F3D3C1C9C8E}
	EndGlobalSection
EndGlobal
</file>

<file path="OxygenBackend/QuizAPI/Repositories/Question/IQuestionRepository.cs">
using QuizAPI.DTOs.Question;
using QuizAPI.Models;

namespace QuizAPI.Models;

public interface IQuestionRepository
{
   /* Task<IEnumerable<QuestionDTO>> GetQuestionsAsync(int page, int pageSize, string? searchTerm, string? category);
    *//*Task<Question?> GetQuestionByIdAsync(int id);*//*
    Task AddQuestionAsync(Question question);
    Task UpdateQuestionAsync(Question question);
    Task DeleteQuestionAsync(int id);
    Task<bool> QuestionExistsAsync(int id);*/
}
</file>

<file path="package.json">
{
  "name": "oxygenquiz",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "set HTTPS=true&& set SSL_CERT_FILE=./certs/cert.crt&& set SSL_KEY_FILE=./certs/cert.key&& vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "test": "vitest",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build"
  },
  "dependencies": {
    "@gsap/react": "^2.1.1",
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@storybook/addon-a11y": "^8.3.2",
    "@storybook/react": "^8.3.1",
    "@tanstack/react-query": "^5.52.1",
    "@tanstack/react-query-devtools": "^5.55.2",
    "@tanstack/react-table": "^8.20.5",
    "@tanstack/react-virtual": "^3.11.1",
    "@testing-library/user-event": "^14.5.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "emoji-picker-react": "^4.12.2",
    "framer-motion": "^11.11.17",
    "js-cookie": "^3.0.5",
    "lucide-react": "^0.428.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-error-boundary": "^4.0.13",
    "react-helmet-async": "^2.0.5",
    "react-hook-form": "^7.53.0",
    "react-icons": "^5.3.0",
    "react-query-auth": "^2.4.1",
    "react-router-dom": "^6.26.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.1",
    "vite-plugin-mkcert": "^1.17.6",
    "zod": "^3.23.8",
    "zustand": "^5.0.0-rc.2"
  },
  "devDependencies": {
    "@chromatic-com/storybook": "^1.9.0",
    "@eslint/js": "^9.8.0",
    "@storybook/addon-essentials": "^8.3.2",
    "@storybook/addon-interactions": "^8.3.2",
    "@storybook/addon-links": "^8.3.2",
    "@storybook/addon-onboarding": "^8.3.2",
    "@storybook/blocks": "^8.3.2",
    "@storybook/react-vite": "^8.3.2",
    "@storybook/test": "^8.3.2",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.0.1",
    "@types/jest": "^29.5.12",
    "@types/js-cookie": "^3.0.6",
    "@types/node": "^22.2.0",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@types/testing-library__react": "^10.2.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.8.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "eslint-plugin-storybook": "^0.8.0",
    "globals": "^15.9.0",
    "jsdom": "^24.1.1",
    "postcss": "^8.4.41",
    "storybook": "^8.3.2",
    "tailwindcss": "^3.4.9",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.0",
    "vite": "^5.4.0",
    "vitest": "^2.0.5"
  },
  "eslintConfig": {
    "extends": [
      "plugin:storybook/recommended"
    ]
  }
}
</file>

<file path="src/common/Notifications/Notification.tsx">
import { useEffect, useState } from "react";
import { Info, CircleAlert, CircleX, CircleCheck } from "lucide-react";
import { AnimatePresence, motion } from "framer-motion";

const icons = {
  info: <Info className="size-6 text-blue-500" aria-hidden="true" />,
  success: <CircleCheck className="size-6 text-green-500" aria-hidden="true" />,
  warning: (
    <CircleAlert className="size-6 text-yellow-500" aria-hidden="true" />
  ),
  error: <CircleX className="size-6 text-red-500" aria-hidden="true" />,
};

export type NotificationProps = {
  notification: {
    id: string;
    type: keyof typeof icons;
    title: string;
    message?: string;
  };
  onDismiss: (id: string) => void;
  timeout?: number; // timeout in milliseconds (default: 5000ms)
};

export const Notification = ({
  notification: { id, type, title, message },
  onDismiss,
  timeout = 5000,
}: NotificationProps) => {
  const [visible, setVisible] = useState(true);
  useEffect(() => {
    const timer = setTimeout(() => {
      setVisible(false);
    }, timeout);

    return () => clearTimeout(timer);
  }, [timeout]);

  return (
    <AnimatePresence>
      {visible && (
        <motion.div
          className="z-50 flex w-full flex-col items-center space-y-4 sm:items-end"
          initial={{ opacity: 0, x: 150 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{
            opacity: 0,
            y: -50,
          }}
          transition={{ duration: 0.4 }}
          onAnimationComplete={(definition) => {
            if (definition === "exit") {
              onDismiss(id);
            }
          }}
        >
          <div className="pointer-events-auto w-full max-w-sm overflow-hidden rounded-lg bg-white shadow-lg ring-1 ring-black/5 z-50">
            <div className="p-4" role="alert" aria-label={title}>
              <div className="flex items-start">
                <div className="shrink-0">{icons[type]}</div>
                <div className="ml-3 w-0 flex-1 pt-0.5">
                  <p className="text-sm font-medium text-gray-900">{title}</p>
                  <p className="mt-1 text-sm text-gray-500">{message}</p>
                </div>
                <div className="ml-4 flex shrink-0">
                  <button
                    className="inline-flex rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2"
                    onClick={() => setVisible(false)}
                  >
                    <span className="sr-only">Close</span>
                    <CircleX className="size-5" aria-hidden="true" />
                  </button>
                </div>
              </div>
            </div>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/utils/cn";
import { useTheme } from "./theme-provider";

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground border border-input",
        primary: "bg-blue-100 text-blue-800 hover:bg-blue-200",
        success: "bg-green-100 text-green-800 hover:bg-green-200",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  const theme = useTheme();
  return (
    <div
      className={cn(
        badgeVariants({ variant }),
        className,
        `${theme.theme === "dark" ? "border-foreground/40" : ""} `
      )}
      {...props}
    />
  );
}

export { Badge, badgeVariants };
</file>

<file path="src/components/ui/data-table.tsx">
import {
  type ColumnDef,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  useReactTable,
} from "@tanstack/react-table";
import { ChevronLeft, ChevronRight } from "lucide-react";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { LiftedButton } from "@/common/LiftedButton";

interface DataTableProps<TData> {
  columns: ColumnDef<TData, any>[];
  data: TData[];
}

export function DataTable<TData>({ columns, data }: DataTableProps<TData>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    initialState: { pagination: { pageSize: 10 } },
  });

  return (
    <div className="w-full">
      <div className="rounded-lg bg-muted shadow-md overflow-hidden">
        <div className="overflow-x-auto">
          <Table className="w-full">
            <TableHeader className="bg-muted">
              {table.getHeaderGroups().map((headerGroup) => (
                <TableRow
                  key={headerGroup.id}
                  className="border-b border-foreground-lighter/50"
                >
                  {headerGroup.headers.map((header, index) => (
                    <TableHead
                      key={header.id}
                      className={`px-4 py-4 text-left text-sm font-medium text-foreground-lighter/70 font-semibold tracking-wider
                        ${index !== 0 ? "relative" : ""}`}
                    >
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                    </TableHead>
                  ))}
                </TableRow>
              ))}
            </TableHeader>
            <TableBody>
              {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row, i) => (
                  <TableRow
                    key={row.id}
                    className={`border-none
                      ${i % 2 === 0 ? "bg-muted" : "bg-background/50"}
                      hover:bg-foreground/10 transition-colors duration-200 
                    `}
                  >
                    {row.getVisibleCells().map((cell) => (
                      <TableCell
                        key={cell.id}
                        className={`px-4 py-4 text-sm relative ${
                          cell.column.id === "actions" ? "text-center" : ""
                        }`}
                      >
                        {flexRender(
                          cell.column.columnDef.cell,
                          cell.getContext()
                        )}
                      </TableCell>
                    ))}
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell
                    colSpan={columns.length}
                    className="h-24 text-center text-text-lighter"
                  >
                    No data found.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      </div>
      <div className="flex flex-col sm:flex-row items-center justify-between mt-4 space-y-4 sm:space-y-0">
        <div className="text-sm text-muted-foreground">
          Page {table.getState().pagination.pageIndex + 1} of{" "}
          {table.getPageCount()}
        </div>
        <div className="flex items-center space-x-2">
          <LiftedButton
            className="text-xs"
            // variant="outline"
            // size="sm"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            <ChevronLeft className="h-4 w-4 mr-2" />
            Previous
          </LiftedButton>
          <LiftedButton
            className="text-xs"
            // variant="outline"
            // size="sm"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            Next
            <ChevronRight className="h-4 w-4 ml-2" />
          </LiftedButton>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/ui/form/form-drawer.tsx">
import * as React from "react";
import { useDisclosure } from "@/hooks/use-disclosure";
import { cn } from "@/utils/cn";
import { Button } from "../button";
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerFooter,
  DrawerHeader,
  DrawerTrigger,
  DrawerTitle,
} from "../drawer";

type FormDrawerProps = {
  isDone: boolean;
  triggerButton: React.ReactElement;
  submitButton: React.ReactElement;
  title: string;
  children: React.ReactNode;
  className?: string;
  variant?: "top" | "bottom" | "left" | "right";
};

export const FormDrawer = ({
  title,
  children,
  isDone,
  triggerButton,
  submitButton,
  className,
  variant,
}: FormDrawerProps) => {
  const { close, open, isOpen } = useDisclosure();

  React.useEffect(() => {
    if (isDone) {
      close();
    }
  }, [isDone, close]);

  return (
    <Drawer
      open={isOpen}
      onOpenChange={(isOpen) => {
        if (!isOpen) {
          close();
        } else {
          open();
        }
      }}
    >
      <DrawerTrigger asChild>{triggerButton}</DrawerTrigger>
      <DrawerContent
        side={variant || "right"}
        className={cn(
          "overflow-y-auto flex max-w-[800px] bg-background border-l dark:border-foreground/40 flex-col justify-between sm:max-w-[540px]",
          className
        )}
      >
        <div className="flex flex-col">
          <DrawerHeader className="px-3 py-2 border-b border-gray-500">
            <DrawerTitle>{title}</DrawerTitle>
          </DrawerHeader>
          <div>{children}</div>
        </div>
        <DrawerFooter className="gap-4">
          {submitButton}
          <DrawerClose asChild>
            <Button variant="outline" type="button">
              Close
            </Button>
          </DrawerClose>
        </DrawerFooter>
      </DrawerContent>
    </Drawer>
  );
};
</file>

<file path="src/components/ui/form/form.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import * as React from "react";
import {
  DefaultValues,
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  SubmitHandler,
  UseFormProps,
  UseFormReturn,
  useForm,
  useFormContext,
} from "react-hook-form";
import { ZodType, z } from "zod";

import { cn } from "@/utils/cn";

import { Label } from "./label";

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
);

const FormField = <
  TFieldValues extends FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = "FormItem";

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = "FormLabel";

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = "FormControl";

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  );
});
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = "FormMessage";

type FormProps<S extends ZodType<any, any, any>> = {
  schema: S;
  defaultValues?: DefaultValues<z.infer<S>>;
  options?: UseFormProps<z.infer<S>>;
  onSubmit: SubmitHandler<z.infer<S>>;
  children: (methods: UseFormReturn<z.infer<S>>) => React.ReactNode;
  className?: string;
  id?: string;
};

function Form<S extends ZodType<any, any, any>>({
  schema,
  defaultValues,
  options,
  onSubmit,
  children,
  className,
  id,
}: FormProps<S>) {
  // we explicitly tell useForm what our values type is:
  const form = useForm<z.infer<S>>({
    resolver: zodResolver(schema),
    defaultValues,
    ...options,
  });

  return (
    <FormProvider {...form}>
      <form
        id={id}
        className={cn("space-y-6 mt-7 px-3", className)}
        onSubmit={form.handleSubmit(onSubmit)}
      >
        {children(form)}
      </form>
    </FormProvider>
  );
}

export {
  useFormField,
  Form,
  FormProvider,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
</file>

<file path="src/components/ui/popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/utils/cn"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
</file>

<file path="src/components/ui/scroll-area.tsx">
import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";
import { cn } from "@/utils/cn";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-muted pl-2" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };
</file>

<file path="src/components/ui/tabs.tsx">
import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@/utils/cn";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-12 items-center justify-center rounded-2xl bg-gradient-to-r from-indigo-500/10 to-purple-500/10 p-1.5 text-muted-foreground shadow-lg backdrop-blur-sm border border-primary/30 dark:border-primary/20",
      className
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-xl px-4 mx-2 py-2 text-sm font-medium transition-all duration-300 ease-in-out",
      "ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      "disabled:pointer-events-none disabled:opacity-50",
      "data-[state=active]:bg-primary ",
      "data-[state=active]:text-white data-[state=active]:shadow-md data-[state=active]:scale-105",
      "data-[state=inactive]:bg-background/50 data-[state=inactive]:hover:bg-background data-[state=inactive]:hover:text-foreground/90",
      "relative overflow-hidden group",
      className
    )}
    {...props}
  >
    <span className="relative z-10">{props.children}</span>
  </TabsPrimitive.Trigger>
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-6 transition-all duration-300 ease-in-out",
      "data-[state=active]:animate-in data-[state=active]:fade-in-0 data-[state=active]:zoom-in-95",
      "data-[state=inactive]:animate-out data-[state=inactive]:fade-out-0 data-[state=inactive]:zoom-out-95",
      "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      "backdrop-blur-sm",
      className
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };
</file>

<file path="src/lib/date-format.ts">
import { format, isValid } from "date-fns"; // Import isValid as well for robustness

/**
 * Formats an ISO date string into "MMMM d, yyyy" format.
 * Handles invalid, null, or undefined dates gracefully.
 *
 * @param isoDate - The ISO date string, or null/undefined.
 * @returns The formatted date string, or "no date provided" if the input is invalid or missing.
 */
const formatDate = (isoDate: string | null | undefined): string => {
  if (isoDate === null || isoDate === undefined || isoDate === '') {
    return "no date provided";
  }

  try {
    const date = new Date(isoDate);

  
    if (!isValid(date)) {
      return "no date provided";
    }

    return format(date, "MMMM d, yyyy");

  } catch (error) {

    console.error("Error formatting date:", error);
    return "no date provided"; 
  }
};

export default formatDate;
</file>

<file path="src/pages/AppRoot.tsx">
import { Suspense } from "react";
import { ErrorBoundary } from "react-error-boundary";
import { Outlet, useLocation } from "react-router-dom";
import { Spinner } from "@/components/ui/Spinner";
import { DashboardLayout } from "@/layouts/dashboard-layout";
import { MainErrorFallback } from "./UtilityPages/Error/Main";

export const AppRoot = () => {
  const location = useLocation();

  return (
    <DashboardLayout>
      <Suspense
        fallback={
          <div className="flex h-screen w-screen items-center justify-center">
            <Spinner size="xl" />
          </div>
        }
      >
        <ErrorBoundary
          key={location.pathname}
          fallbackRender={({ error, resetErrorBoundary }) => (
            <MainErrorFallback error={error} resetErrorBoundary={resetErrorBoundary} />
          )}
        >
          <Outlet />
        </ErrorBoundary>
      </Suspense>
    </DashboardLayout>
  );
};
</file>

<file path="src/pages/Dashboard/Components/DashboardHeader.tsx">
import { DrawerFilled } from "@/common/Custom-Drawer/DrawerFilled";
import { Divider } from "@/common/Divider";
import { ModeToggle } from "@/components/ui/mode-toggle";
import { HeaderComponent } from "@/common/HeaderComponent";
import { NavLink, useLocation, useNavigate } from "react-router-dom";
import { Home, Undo2 } from "lucide-react";
import { Button } from "@/components/ui/button";

export const DashboardHeader = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const goBack = () => {
    if (location.pathname.includes("redirect")) {
      navigate(-2);
    } else {
      navigate(-1);
    }
  };

  return (
    <HeaderComponent className="shadow-md z-8 relative">
      <div className="flex flex-col items-center p-2">
        <p className="text-foreground text-5xl font-bold pt-3 px-6 italic">
          OXYGEN
        </p>
        {/* <p className="text-2xl">Dashboard</p>  */}
      </div>
      <div className="bg-background px-4 flex justify-end items-center gap-3">
        <Button
          variant={"outline"}
          className="rounded-[0.2rem]"
          onClick={goBack}
        >
          <Undo2 size={20} /> Back
        </Button>
        <NavLink to="/">
          <Button variant={"outline"}>
            <Home size={20} />
            Home
          </Button>
        </NavLink>

        <Divider orientation="vertical" thickness="1px" length="24px" />
        <ModeToggle className="rounded-[2rem] px-2" />
        <Divider orientation="vertical" thickness="1px" length="24px" />
        <DrawerFilled />
      </div>
    </HeaderComponent>
  );
};
</file>

<file path="src/pages/Dashboard/Components/DashboardNav.tsx">
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { Divider } from "../../../common/Divider";
import { dashboardNavButtons } from "./dashboardNavConfig";

type DashboardNavProps = {
  setActivePage: (page: string) => void;
  activePage: string;
  isCollapsed?: boolean;
  setIsCollapsed?: (isCollapsed: boolean) => void;
};

export const DashboardNav: React.FC<DashboardNavProps> = ({
  setActivePage,
  activePage,
  isCollapsed = false,
  setIsCollapsed = () => {},
}) => {
  const toggleCollapse = () => {
    setIsCollapsed(!isCollapsed);
  };

  return (
    <div
      className={`relative transition-all duration-300 ease-in ${
        isCollapsed ? "w-16" : "w-full"
      }`}
    >
      <Button
        variant="ghost"
        size="sm"
        onClick={toggleCollapse}
        className="absolute -right-3 top-0 rounded-full bg-background shadow-md border border-gray-200 p-1 h-6 w-6"
      >
        {isCollapsed ? <ChevronRight size={14} /> : <ChevronLeft size={14} />}
      </Button>

      <ul className="bg-background w-full mt-8 px-3 text-lg flex flex-col gap-2">
        <div className="flex items-center justify-between px-1 mb-2">
          {!isCollapsed && <p className="text-gray-400">Menu</p>}
        </div>
        <Divider color="gray" />

        {dashboardNavButtons.map((button) => (
          <Button
            key={button.id}
            variant={"dashboard"}
            size={"dashboard"}
            className={`mt-2 ${isCollapsed ? "justify-center" : ""}`}
            onClick={() => setActivePage(button.id)}
            active={activePage === button.id}
          >
            <button.icon />
            {!isCollapsed && <span className="ml-2">{button.label}</span>}
          </Button>
        ))}
      </ul>
    </div>
  );
};

export default DashboardNav;
</file>

<file path="src/pages/Dashboard/Pages/Question/api/delete-question.ts">
import { useMutation, useQueryClient, QueryKey } from '@tanstack/react-query';
import { QuestionType } from '@/types/ApiTypes';

import { getMultipleChoiceQuestionsQueryOptions } from "./Normal-Question/get-multiple-choice-questions";
import { getTrueFalseQuestionsQueryOptions } from './True_False-Question/get-true_false-questions';
import { getTypeTheAnswerQuestionsQueryOptions } from './Type_The_Answer-Question/get-type-the-answer-questions';
import { apiService } from '@/lib/Api-client';
import { MutationConfig } from '@/lib/React-query';


type DeleteQuestionApiDTO = {
  questionId: number;
};

export const deleteQuestion = ({ questionId }: DeleteQuestionApiDTO) => {
  return apiService.delete(`/Questions/${questionId}`);
};

// Map QuestionType enum values to their corresponding query options functions
const questionQueryOptionsMap: { [key in QuestionType]?: () => { queryKey: QueryKey } } = {
  [QuestionType.MultipleChoice]: getMultipleChoiceQuestionsQueryOptions,
  [QuestionType.TrueFalse]: getTrueFalseQuestionsQueryOptions,
  [QuestionType.TypeTheAnswer]: getTypeTheAnswerQuestionsQueryOptions,
};

type UseDeleteQuestionOptions = {
  questionType: QuestionType; // Required for invalidation
  mutationConfig?: MutationConfig<typeof deleteQuestion>;
};

export const useDeleteQuestion = ({
  questionType,
  mutationConfig,
}: UseDeleteQuestionOptions) => {
  const queryClient = useQueryClient();

  const { onSuccess, onError, ...restConfig } = mutationConfig || {};

  return useMutation({
    onSuccess: (data, variables, context) => {
      const getQueryOptionsFn = questionQueryOptionsMap[questionType];

      if (getQueryOptionsFn) {
        const queryKeyToInvalidate = getQueryOptionsFn().queryKey;
        queryClient.invalidateQueries({ queryKey: queryKeyToInvalidate });
      } else {
         // Optional: Fallback invalidation or warning
         console.warn(`Query options mapping not found for QuestionType: ${questionType}.`);
         // queryClient.invalidateQueries({ queryKey: ['questions'] }); // Example fallback
      }

      onSuccess?.(data, variables, context);
    },
    onError: (error, variables, context) => {
        onError?.(error, variables, context);
    },
    mutationFn: (variables: { questionId: number }) => deleteQuestion(variables),
    ...restConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Question/api/Normal-Question/get-individual-question.ts">
import { useQuery, queryOptions } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";
import { IndividualQuestion } from "@/types/ApiTypes";


export const getIndividualQuestion = ({
  questionId,
}:{
  questionId: number;
} ): Promise< IndividualQuestion> => {
  return api.get(`/questions/${questionId}`);
};

export const getIndividualQuestionQueryOptions = (
  questionId: number
) => {
  return queryOptions({
    queryKey: ["individualQuestion", questionId],
    queryFn: () => getIndividualQuestion({questionId}),
  });
};

type UseIndividualQuestionOptions = {
  queryConfig?: QueryConfig<typeof getIndividualQuestionQueryOptions>;
  questionId: number;
};

export const useIndividualQuestionData = ({
  queryConfig,
  questionId,
}: UseIndividualQuestionOptions) => {
  return useQuery({
    ...getIndividualQuestionQueryOptions(questionId),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Question/api/True_False-Question/update-true_false-question.ts">
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { z } from "zod";
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import { TrueFalseQuestion } from "@/types/ApiTypes";
import { getTrueFalseQuestionsQueryOptions } from "./get-true_false-questions";

export const updateTrueFalseQuestionInputSchema = z.object({
  id: z.number().int().optional(), 
  text: z.string().min(1, "Question is required"),
  imageUrl: z.string().nullable().optional(), 
  difficultyId: z.number().int().positive({ message: "Difficulty is required" }),
  categoryId: z.number().int().positive({ message: "Category is required" }),
  languageId: z.number().int().positive({ message: "Language is required" }),
  visibility: z.string().min(1, "Visibility is required"),
  
  correctAnswer: z.boolean().optional(),
});

export type UpdateTrueFalseQuestionInput = z.infer<typeof updateTrueFalseQuestionInputSchema>;

export const updateTrueFalseQuestion = ({ data, questionId }: { data: UpdateTrueFalseQuestionInput, questionId: number}): Promise<TrueFalseQuestion> => {
  return (
    console.log("data", data, questionId),
    api.put(`/questions/truefalse/${questionId}`, data)
  );
};

type UseUpdateTrueFalseQuestionOptions = {
  mutationConfig?: MutationConfig<typeof updateTrueFalseQuestion>;
};

export const useUpdateTrueFalseQuestion = ({ mutationConfig }: UseUpdateTrueFalseQuestionOptions = {}) => {
  const queryClient = useQueryClient();
  
  const { onSuccess, onError, ...restConfig } = mutationConfig || {};

  return useMutation({
    mutationFn: updateTrueFalseQuestion,
    onSuccess: (data, ...args) => {
      queryClient.refetchQueries({ queryKey: getTrueFalseQuestionsQueryOptions().queryKey });
      onSuccess?.(data, ...args);
    },
    onError: (error, variables, context) => {
      console.error('Error updating question:', error);
      onError?.(error, variables, context);
    },
    ...restConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Question/api/Type_The_Answer-Question/update-type_the_answer-question.ts">
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { z } from "zod";
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import {  TypeTheAnswerQuestion } from "@/types/ApiTypes";
import { getTypeTheAnswerQuestionsQueryOptions } from "./get-type-the-answer-questions";



export const updateTypeTheAnswerQuestionInputSchema = z.object({
  id: z.number().int().optional(), 
  text : z.string().min(1, "Question is required"),
  correctAnswer: z.string().min(1, "Correct answer is required"),
  imageUrl: z.string().nullable().optional(), 
  difficultyId: z.number().int().positive({ message: "Difficulty is required" }),
  categoryId: z.number().int().positive({ message: "Category is required" }),
  languageId: z.number().int().positive({ message: "Language is required" }),
  visibility: z.string().min(1, "Visibility is required"),

  acceptableAnswers: z.array(
  z.object({
    value: z.string().min(1, 'Additional acceptable answer cannot be empty'),
  })
).default([]),

  isCaseSensitive: z.boolean().default(false),
  allowPartialMatch: z.boolean().default(false),});

export type UpdateTypeTheAnswerQuestionInput = z.infer<typeof updateTypeTheAnswerQuestionInputSchema>;

export const updateTypeTheAnswerQuestion = ({ data, questionId }: { data: UpdateTypeTheAnswerQuestionInput, questionId: number}): Promise<TypeTheAnswerQuestion> => {
  return (
    console.log("data", data, questionId),
    api.put(`/questions/typeTheAnswer/${questionId}`, transformFormData(data))
  );
};
const transformFormData = (data: UpdateTypeTheAnswerQuestionInput) => {
  const transformedData = {
    ...data,
    acceptableAnswers: data.acceptableAnswers 
      ? data.acceptableAnswers.map(item => item.value)
      : []
  };
  
  return transformedData;
};

type UseUpdateTypeTheAnswerQuestionOptions = {
  mutationConfig?: MutationConfig<typeof updateTypeTheAnswerQuestion>;
};

export const useUpdateTypeTheAnswerQuestion = ({ mutationConfig }: UseUpdateTypeTheAnswerQuestionOptions = {}) => {
  const queryClient = useQueryClient();
  
  const { onSuccess, onError, ...restConfig } = mutationConfig || {};

  return useMutation({
    mutationFn: updateTypeTheAnswerQuestion,
    onSuccess: (data, ...args) => {
      queryClient.refetchQueries({ queryKey: getTypeTheAnswerQuestionsQueryOptions().queryKey });
      onSuccess?.(data, ...args);
    },
    onError: (error, variables, context) => {
      console.error('Error updating question:', error);
      onError?.(error, variables, context);
    },
    ...restConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/Multiple_Choice_Question/Create-Multiple-Choice-Question-Components/answer-option.tsx">
import React from "react";
import { Trash2, Check } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input, Label } from "@/components/ui/form";
import { FieldError } from "react-hook-form";

interface AnswerOptionProps {
  index: number;
  textRegistration: ReturnType<any>;
  isCorrect: boolean;
  onCorrectToggle: () => void;
  error?: FieldError;
  onRemove: () => void;
  disableRemove?: boolean;
  extraSettings?: boolean;
}

export const AnswerOption: React.FC<AnswerOptionProps> = ({
  index,
  textRegistration,
  isCorrect,
  onCorrectToggle,
  error,
  onRemove,
  disableRemove = false,
  extraSettings = false,
}) => {
  return (
    <div className="flex items-center justify-between gap-4">
      <div className="flex-1 relative">
        <Label
          htmlFor={`answer-${index}`}
          className="block text-sm font-medium text-foreground"
        ></Label>
        <div className="relative">
          <Input
            variant={isCorrect ? "isCorrect" : "isIncorrect"}
            id={`answer-${index}`}
            placeholder={`Answer Option ${index + 1}`}
            registration={textRegistration}
            error={error}
            className={`py-2 w-full pr-12 ${error ? "border-red-500" : ""}`}
          />
          <button
            type="button"
            onClick={onCorrectToggle}
            className={`absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 rounded-full flex items-center justify-center transition-all ${
              isCorrect
                ? "bg-green-500 text-white"
                : "bg-primary/20 hover:bg-primary/30 dark:bg-primary/30 dark:hover:bg-primary/40"
            }`}
          >
            {isCorrect && <Check className="h-4 w-4 " />}
          </button>
        </div>
      </div>
      {extraSettings && (
        <Button
          variant="destructive"
          size="sm"
          onClick={onRemove}
          disabled={disableRemove}
          className="rounded-sm bg-red-400 mt-3"
        >
          <Trash2 className="h-3 w-3" />
        </Button>
      )}
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/Multiple_Choice_Question/Create-Multiple-Choice-Question-Components/create-multiple-choice-question.tsx">
import { Trash2 } from "lucide-react";
import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Form, FormDrawer, Input, Label } from "@/components/ui/form";
import { useNotifications } from "@/common/Notifications";
import { Controller } from "react-hook-form";
import {
  QuestionCategory,
  QuestionDifficulty,
  QuestionLanguage,
} from "@/types/ApiTypes";
import { useFieldArray } from "react-hook-form";
import { Switch } from "@/components/ui/switch";
import { Separator } from "@/components/ui/separator";
import { CategorySelect } from "../../../Entities/Categories/Components/select-question-category";
import { DifficultySelect } from "../../../Entities/Difficulty/Components/select-question-difficulty";
import { LanguageSelect } from "../../../Entities/Language/components/select-question-language";
import { LiftedButton } from "@/common/LiftedButton";
import {
  createMultipleChoiceQuestionInputSchema,
  useCreateMultipleChoiceQuestion,
} from "../../../api/Normal-Question/create-multiple-choice-question";
import ImageUpload from "@/utils/Image-Upload";

interface CreateMultipleChoiceFormProps {
  categories: QuestionCategory[];
  difficulties: QuestionDifficulty[];
  languages: QuestionLanguage[];
  onSuccess: () => void;
}

export const CreateMultipleChoiceForm: React.FC<
  CreateMultipleChoiceFormProps
> = ({ categories, difficulties, languages, onSuccess }) => {
  const { addNotification } = useNotifications();
  const [imageUrl, setImageUrl] = useState("");

  const createQuestionMutation = useCreateMultipleChoiceQuestion({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Multiple Choice Question Created",
        });
        onSuccess();
      },
    },
  });

  return (
    <FormDrawer
      isDone={createQuestionMutation.isSuccess}
      triggerButton={<LiftedButton>Multiple Choice</LiftedButton>}
      title="Create a New Multiple Choice Question"
      submitButton={
        <Button
          form="create-multiple-choice-question"
          variant="addSave"
          className="rounded-sm text-white"
          type="submit"
          size="default"
          isPending={createQuestionMutation.isPending}
          disabled={createQuestionMutation.isPending}
        >
          Submit
        </Button>
      }
    >
      <Form
        id="create-multiple-choice-question"
        className="w-[500px]"
        onSubmit={(values) => {
          const isCorrectSelected = values.answerOptions.some(
            (option: any) => option.isCorrect
          );

          if (!isCorrectSelected) {
            return;
          }

          createQuestionMutation.mutate({
            data: {
              ...values,
            },
          });
        }}
        schema={createMultipleChoiceQuestionInputSchema}
      >
        {({ register, formState, control, setValue, watch, clearErrors }) => {
          const { fields, append, remove } = useFieldArray({
            control,
            name: "answerOptions",
          });

          const addOptionDisabled = fields.length >= 4;
          const allowMultipleSelections = watch("allowMultipleSelections");

          // Add this effect to update the form state when imageUrl changes
          useEffect(() => {
            if (imageUrl) {
              setValue("imageUrl", imageUrl);
            }
          }, [imageUrl, setValue]);

          React.useEffect(() => {
            if (fields.length === 0) {
              append({ text: "", isCorrect: false });
              append({ text: "", isCorrect: false });
            }
          }, [append, fields.length]);

          React.useEffect(() => {
            if (!allowMultipleSelections) {
              // Count how many correct answers we have
              const correctAnswers = fields.filter((_, i) =>
                watch(`answerOptions.${i}.isCorrect`)
              );

              // If we have more than one correct answer in single selection mode,
              // keep only the first one as correct
              if (correctAnswers.length > 1) {
                fields.forEach((_, i) => {
                  const shouldBeCorrect =
                    i ===
                    fields.findIndex((_, idx) =>
                      watch(`answerOptions.${idx}.isCorrect`)
                    );
                  setValue(`answerOptions.${i}.isCorrect`, shouldBeCorrect);
                });
              }
            }
          }, [allowMultipleSelections, fields, setValue, watch]);

          const handleSwitchChange = (index: number) => {
            if (allowMultipleSelections) {
              setValue(
                `answerOptions.${index}.isCorrect`,
                !watch(`answerOptions.${index}.isCorrect`)
              );
            } else {
              fields.forEach((_, i) => {
                setValue(`answerOptions.${i}.isCorrect`, i === index);
              });
            }

            if (fields.some((_, i) => watch(`answerOptions.${i}.isCorrect`))) {
              clearErrors("answerOptions");
            }
          };

          const handleImageUpload = (url: string) => {
            setImageUrl(url);
            setValue("imageUrl", url);
          };
          const handleImageRemove = () => {
            setImageUrl("");
            setValue("imageUrl", "");
          };

          return (
            <>
              <Input
                id="questionText"
                variant="quiz"
                className={`py-2 w-full ${
                  formState.errors["text"] ? "border-red-500" : ""
                }`}
                placeholder="Enter your question here..."
                error={formState.errors["text"]}
                registration={register("text")}
              />
              {formState.errors.root && (
                <p className="text-sm text-red-500 font-semibold border border-red-500 p-2 text-center">
                  {formState.errors.root.message}
                </p>
              )}

              {/* Modified image upload implementation */}
              <ImageUpload
                onUpload={handleImageUpload}
                onRemove={handleImageRemove}
              />
              <input type="hidden" {...register("imageUrl")} />

              <Separator className="bg-gray-500" />

              <div className="grid grid-cols-2 gap-4 my-4">
                <div className="flex items-center space-x-2">
                  <Controller
                    name="allowMultipleSelections"
                    control={control}
                    render={({ field }) => (
                      <Switch
                        id="allowMultipleSelections"
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    )}
                  />
                  <Label htmlFor="allowMultipleSelections">
                    Allow multiple correct answers
                  </Label>
                </div>
              </div>

              <div className="space-y-4 mt-4">
                <div className="flex items-center justify-between">
                  <Label className="block text-sm font-medium text-foreground">
                    Answer Options
                  </Label>
                  {!allowMultipleSelections && (
                    <span className="text-xs text-gray-500 italic">
                      Single selection mode: Only one answer can be correct
                    </span>
                  )}
                </div>
                {fields.map((field, index) => {
                  const isCorrect = watch(`answerOptions.${index}.isCorrect`);

                  return (
                    <div
                      key={field.id}
                      className="flex items-center justify-between gap-6"
                    >
                      <Input
                        className={`${
                          formState.errors["answerOptions"]
                            ? "border-red-500"
                            : ""
                        } ${
                          isCorrect
                            ? "border-2 border-green-500 dark:border-green-500"
                            : ""
                        }`}
                        placeholder={`Answer Option ${index + 1}...`}
                        error={formState.errors?.answerOptions?.[index]?.text}
                        registration={register(`answerOptions.${index}.text`)}
                      />
                      <div className="flex flex-col items-center">
                        <Switch
                          className="shadow-md"
                          id={`correct-${index}`}
                          checked={isCorrect}
                          onCheckedChange={() => handleSwitchChange(index)}
                        />
                        <Label
                          htmlFor={`correct-${index}`}
                          className="text-xs text-gray-600 mt-1"
                        >
                          Correct{" "}
                          {allowMultipleSelections ? "Option" : "Answer"}
                        </Label>
                      </div>
                      <LiftedButton
                        variant="icon"
                        className="rounded-xl bg-red-500"
                        onClick={() => remove(index)}
                        disabled={fields.length <= 2}
                      >
                        <Trash2 className="h-4 w-4" />
                      </LiftedButton>
                    </div>
                  );
                })}
                {formState.errors?.answerOptions && (
                  <p className="text-sm text-red-500 font-semibold border border-red-500 p-2 text-center">
                    {formState.errors.answerOptions.message ||
                      "At least one option needs to be correct!"}
                  </p>
                )}
                <LiftedButton
                  type="button"
                  className="text-sm"
                  onClick={() => append({ text: "", isCorrect: false })}
                  disabled={addOptionDisabled}
                >
                  + Add Answer Option
                </LiftedButton>
              </div>
              <CategorySelect
                categories={categories}
                value={watch("categoryId")?.toString() || ""}
                onChange={(selectedValue: string) =>
                  setValue("categoryId", parseInt(selectedValue, 10))
                }
                includeAllOption={false}
                error={formState.errors["categoryId"]?.message}
                clearErrors={() => clearErrors("categoryId")}
              />
              <DifficultySelect
                difficulties={difficulties}
                value={watch("difficultyId")?.toString() || ""}
                onChange={(selectedValue: string) =>
                  setValue("difficultyId", parseInt(selectedValue, 10))
                }
                includeAllOption={false}
                error={formState.errors["difficultyId"]?.message}
                clearErrors={() => clearErrors("difficultyId")}
              />
              <LanguageSelect
                languages={languages}
                value={watch("languageId")?.toString() || ""}
                includeAllOption={false}
                onChange={(selectedValue: string) =>
                  setValue("languageId", parseInt(selectedValue, 10))
                }
                error={formState.errors["languageId"]?.message}
                clearErrors={() => clearErrors("languageId")}
              />
            </>
          );
        }}
      </Form>
    </FormDrawer>
  );
};

export default CreateMultipleChoiceForm;
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/Multiple_Choice_Question/multiple-choice-question-list.tsx">
import { MultipleChoiceQuestion } from "@/types/ApiTypes"; 
import { MultipleChoiceQuestionCard } from "./multiple-choice-question-card";

interface MultipleChoiceQuestionListProps {
  questions: MultipleChoiceQuestion[];
}

export const MultipleChoiceQuestionList = ({ questions }: MultipleChoiceQuestionListProps) => {
  if (questions.length === 0) {
    return <p className="text-center text-muted-foreground py-8">No multiple choice questions found matching your criteria.</p>;
  }

  return (
    <div className="space-y-4">
      {questions.map((question) => (
        <MultipleChoiceQuestionCard key={question.id} question={question} />
      ))}
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/Re-Usable-Components/delete-question.tsx">
import { Button } from "@/components/ui/button";
import { ConfirmationDialog } from "@/components/ui/dialog";
import { useNotifications } from "@/common/Notifications";
import { useDeleteQuestion } from "../../api/delete-question";
import { QuestionType } from "@/types/ApiTypes";
import { LiftedButton } from "@/common/LiftedButton";
import { Trash } from "lucide-react";

type DeleteUserProps = {
  id: number;
  questionType: QuestionType;
};

export const DeleteQuestion = ({ id, questionType }: DeleteUserProps) => {
  const { addNotification } = useNotifications();
  const deleteQuestionMutation = useDeleteQuestion({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Question Deleted",
        });
      },
    },
    questionType,
  });

  return (
    <ConfirmationDialog
      isDone={
        deleteQuestionMutation.isSuccess || deleteQuestionMutation.isError
      }
      icon="danger"
      title="Delete Question"
      body="Are you sure you want to delete this question?"
      triggerButton={
        <LiftedButton variant="icon" className="rounded-xl bg-red-400">
          <Trash className="w-4 h-4" />
        </LiftedButton>
      }
      confirmButton={
        <Button
          isPending={deleteQuestionMutation.isPending}
          type="button"
          variant="destructive"
          onClick={() => {
            deleteQuestionMutation.mutate({ questionId: id });
          }}
        >
          Delete Question
        </Button>
      }
    />
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/Re-Usable-Components/pagination-control.tsx">
import { Button } from "@/components/ui/button";
import { Pagination as PaginationType } from "@/types/ApiTypes"; // Adjust path
import { ChevronLeft, ChevronRight } from "lucide-react";

interface PaginationControlsProps {
  pagination: PaginationType | undefined;
  onPageChange: (pageNumber: number) => void;
}

export const PaginationControls = ({ pagination, onPageChange }: PaginationControlsProps) => {
  if (!pagination || pagination.totalPages <= 1) {
    return null; // Don't render if no pagination needed
  }

  const { currentPage, totalPages, hasPreviousPage, hasNextPage } = pagination;

  return (
    <div className="flex items-center justify-between mt-6 py-3">
      <Button
        onClick={() => onPageChange(currentPage - 1)}
        disabled={!hasPreviousPage}
        variant="outline"
        size="sm"
      >
        <ChevronLeft className="h-4 w-4 mr-1" />
        Previous
      </Button>
      <span className="text-sm text-muted-foreground">
        Page {currentPage} of {totalPages}
      </span>
      <Button
        onClick={() => onPageChange(currentPage + 1)}
        disabled={!hasNextPage}
        variant="outline"
        size="sm"
      >
        Next
        <ChevronRight className="h-4 w-4 ml-1" />
      </Button>
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/True_Flase-Question/update-true_false-questions.tsx">
import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Form, FormDrawer, Input, Label } from "@/components/ui/form";
import { useNotifications } from "@/common/Notifications";
import { TrueFalseQuestion } from "@/types/ApiTypes";
import { Separator } from "@/components/ui/separator";
import { LiftedButton } from "@/common/LiftedButton";

import ImageUpload from "@/utils/Image-Upload";
import {
  updateTrueFalseQuestionInputSchema,
  useUpdateTrueFalseQuestion,
} from "../../api/True_False-Question/update-true_false-question";
import { DifficultySelect } from "../../Entities/Difficulty/Components/select-question-difficulty";
import { CategorySelect } from "../../Entities/Categories/Components/select-question-category";
import { LanguageSelect } from "../../Entities/Language/components/select-question-language";
import { useQuizForm } from "../../../Quiz/components/Create-Quiz-Form/use-quiz-form";
import { VisibilitySelect } from "../../Entities/select-visibility";
import { Check, Edit2Icon } from "lucide-react";

interface UpdateTrueFalseQuestionFormProps {
  question: TrueFalseQuestion;
}

export const UpdateTrueFalseQuestionForm: React.FC<
  UpdateTrueFalseQuestionFormProps
> = ({ question }) => {
  const { addNotification } = useNotifications();
  const [imageUrl, setImageUrl] = useState(question.imageUrl || "");
  const { queryData } = useQuizForm();

  const updateQuestionMutation = useUpdateTrueFalseQuestion({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "True/False Question Updated",
        });
      },
      onError: (error: any) => {
        addNotification({
          type: "error",
          title: "Failed to update question",
          message: `Error: ${error.message}`,
        });
      },
    },
  });

  return (
    <FormDrawer
      isDone={updateQuestionMutation.isSuccess}
      triggerButton={
        <LiftedButton variant="icon">
          <Edit2Icon className="size-4" />
        </LiftedButton>
      }
      title="Update True/False Question"
      submitButton={
        <Button
          form="update-true-false-question"
          variant="addSave"
          className="rounded-sm text-white"
          type="submit"
          size="default"
          isPending={updateQuestionMutation.isPending}
          disabled={updateQuestionMutation.isPending}
        >
          Update
        </Button>
      }
    >
      <Form
        id="update-true-false-question"
        className="w-[500px]"
        defaultValues={question}
        options={{
          defaultValues: {
            id: question.id,
            text: question.text,
            imageUrl: question.imageUrl,
            correctAnswer: question.correctAnswer,
            categoryId: question.category.id,
            difficultyId: question.difficulty.id,
            languageId: question.language.id,
            visibility: question.visibility,
          },
        }}
        onSubmit={(values) => {
          updateQuestionMutation.mutate({
            data: values,
            questionId: question.id,
          });
        }}
        schema={updateTrueFalseQuestionInputSchema}
      >
        {({ register, formState, setValue, watch, clearErrors }) => {
          useEffect(() => {
            if (imageUrl) {
              setValue("imageUrl", imageUrl);
            }
          }, [imageUrl, setValue]);

          const handleImageUpload = (url: string) => {
            setImageUrl(url);
            setValue("imageUrl", url);
          };

          const handleImageRemove = () => {
            setImageUrl("");
            setValue("imageUrl", "");
          };

          return (
            <>
              <Input
                id="questionText"
                variant="quiz"
                className={`py-2 w-full ${
                  formState.errors["text"] ? "border-red-500" : ""
                }`}
                placeholder="Enter your question here..."
                error={formState.errors["text"]}
                registration={register("text")}
              />
              {formState.errors.root && (
                <p className="text-sm text-red-500 font-semibold border border-red-500 p-2 text-center">
                  {formState.errors.root.message}
                </p>
              )}

              {/* Image upload implementation */}
              <ImageUpload
                onUpload={handleImageUpload}
                onRemove={handleImageRemove}
                initialImageUrl={imageUrl}
              />
              <input type="hidden" {...register("imageUrl")} />

              <Separator className="bg-gray-500" />

              <div className="space-y-4 mt-4">
                <div className="flex items-center justify-between">
                  <Label className="block text-sm font-medium text-foreground">
                    Correct Answer
                  </Label>
                </div>
                <div className="flex items-center justify-around rounded-sm">
                  <div className="flex flex-col w-full items-center bg-primary/80 dark:bg-primary/80 rounded-md p-2">
                    <button
                      id="true-option"
                      type="button"
                      onClick={() => setValue("correctAnswer", true)}
                      className={`w-6 h-6 rounded-full flex items-center border justify-center transition-all ${
                        watch("correctAnswer") === true
                          ? "bg-green-500 text-white"
                          : "bg-primary/20 hover:bg-primary/30 dark:bg-primary/30 dark:hover:bg-primary/40"
                      }`}
                    >
                      {watch("correctAnswer") === true && (
                        <Check className="h-4 w-4" />
                      )}
                    </button>
                    <Label
                      htmlFor="true-option"
                      className="text-md font-medium mt-2"
                    >
                      True
                    </Label>
                  </div>

                  <div className="flex flex-col items-center w-full bg-red-500/80 dark:bg-red-500/80 rounded-sm p-2">
                    <button
                      id="false-option"
                      type="button"
                      onClick={() => setValue("correctAnswer", false)}
                      className={`w-6 h-6 rounded-full border flex items-center justify-center transition-all ${
                        watch("correctAnswer") === false
                          ? "bg-green-500 text-white"
                          : "bg-primary/20 hover:bg-primary/30 dark:bg-primary/30 dark:hover:bg-primary/40"
                      }`}
                    >
                      {watch("correctAnswer") === false && (
                        <Check className="h-4 w-4" />
                      )}
                    </button>
                    <Label
                      htmlFor="false-option"
                      className="text-md font-medium mt-2"
                    >
                      False
                    </Label>
                  </div>
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4 ">
                <CategorySelect
                  label="Category"
                  categories={queryData.categories}
                  value={watch("categoryId")?.toString() || ""}
                  onChange={(selectedValue: string) =>
                    setValue("categoryId", parseInt(selectedValue, 10))
                  }
                  includeAllOption={false}
                  error={formState.errors["categoryId"]?.message}
                  clearErrors={() => clearErrors("categoryId")}
                />
                <DifficultySelect
                  label="Difficulty"
                  difficulties={queryData.difficulties}
                  value={watch("difficultyId")?.toString() || ""}
                  onChange={(selectedValue: string) =>
                    setValue("difficultyId", parseInt(selectedValue, 10))
                  }
                  includeAllOption={false}
                  error={formState.errors["difficultyId"]?.message}
                  clearErrors={() => clearErrors("difficultyId")}
                />
                <LanguageSelect
                  label="Language"
                  languages={queryData.languages}
                  value={watch("languageId")?.toString() || ""}
                  includeAllOption={false}
                  onChange={(selectedValue: string) =>
                    setValue("languageId", parseInt(selectedValue, 10))
                  }
                  error={formState.errors["languageId"]?.message}
                  clearErrors={() => clearErrors("languageId")}
                />

                <VisibilitySelect
                  label="Visibility"
                  value={watch("visibility")}
                  onChange={(value: string) => setValue("visibility", value)}
                  error={formState.errors["visibility"]?.message}
                  clearErrors={() => clearErrors("visibility")}
                />
              </div>
            </>
          );
        }}
      </Form>
    </FormDrawer>
  );
};

export default UpdateTrueFalseQuestionForm;
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/Type_The_Answer-Question/update-type_the_asnwer-question.tsx">
import React, { useState, useEffect } from "react";
import { Trash2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Form, FormDrawer, Input, Label } from "@/components/ui/form";
import { useNotifications } from "@/common/Notifications";
import { TypeTheAnswerQuestion } from "@/types/ApiTypes";
import { Separator } from "@/components/ui/separator";
import { LiftedButton } from "@/common/LiftedButton";
import ImageUpload from "@/utils/Image-Upload";
import { useFieldArray } from "react-hook-form";
import { DifficultySelect } from "../../Entities/Difficulty/Components/select-question-difficulty";
import { CategorySelect } from "../../Entities/Categories/Components/select-question-category";
import { LanguageSelect } from "../../Entities/Language/components/select-question-language";
import { VisibilitySelect } from "../../Entities/select-visibility";
import { Edit2Icon } from "lucide-react";
import {
  Switch,
  Tooltip,
  TooltipProvider,
  TooltipTrigger,
  TooltipContent,
} from "@/components/ui";
import { useQuizForm } from "../../../Quiz/components/Create-Quiz-Form/use-quiz-form";
import {
  UpdateTypeTheAnswerQuestionInput,
  updateTypeTheAnswerQuestionInputSchema,
  useUpdateTypeTheAnswerQuestion,
} from "../../api/Type_The_Answer-Question/update-type_the_answer-question";

interface UpdateTypeAnswerQuestionFormProps {
  question: TypeTheAnswerQuestion;
}

export const UpdateTypeAnswerQuestionForm: React.FC<
  UpdateTypeAnswerQuestionFormProps
> = ({ question }) => {
  const { addNotification } = useNotifications();
  const [imageUrl, setImageUrl] = useState(question.imageUrl || "");
  const { queryData } = useQuizForm();

  const transformAcceptableAnswersForForm = (answers: string[]) => {
    return answers.map((answer) => ({ value: answer }));
  };

  const updateQuestionMutation = useUpdateTypeTheAnswerQuestion({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Type The Answer Question Updated",
        });
      },
      onError: (error: any) => {
        addNotification({
          type: "error",
          title: "Failed to update question",
          message: `Error: ${error.message}`,
        });
      },
    },
  });

  return (
    <FormDrawer
      isDone={updateQuestionMutation.isSuccess}
      triggerButton={
        <LiftedButton variant="icon">
          <Edit2Icon className="size-4" />
        </LiftedButton>
      }
      title="Update Type The Answer Question"
      submitButton={
        <Button
          form="update-type-answer-question"
          variant="addSave"
          className="rounded-sm text-white"
          type="submit"
          size="default"
          isPending={updateQuestionMutation.isPending}
          disabled={updateQuestionMutation.isPending}
        >
          Update
        </Button>
      }
    >
      <Form
        id="update-type-answer-question"
        className="w-[500px]"
        options={{
          defaultValues: {
            id: question.id,
            text: question.text,
            imageUrl: question.imageUrl,
            correctAnswer: question.correctAnswer,
            categoryId: question.category.id,
            difficultyId: question.difficulty.id,
            languageId: question.language.id,
            visibility: question.visibility,
            // Transform string array to object array for the form
            acceptableAnswers: transformAcceptableAnswersForForm(
              question.acceptableAnswers
            ),
            isCaseSensitive: question.isCaseSensitive,
            allowPartialMatch: question.allowPartialMatch,
          },
        }}
        onSubmit={(values) => {
          updateQuestionMutation.mutate({
            data: values,
            questionId: question.id,
          });
        }}
        schema={updateTypeTheAnswerQuestionInputSchema}
      >
        {({ register, formState, control, setValue, watch, clearErrors }) => {
          const { fields, append, remove } = useFieldArray<
            UpdateTypeTheAnswerQuestionInput,
            "acceptableAnswers",
            "id"
          >({
            control: control,
            name: "acceptableAnswers",
          });

          useEffect(() => {
            if (imageUrl) {
              setValue("imageUrl", imageUrl);
            }
          }, [imageUrl, setValue]);

          const handleImageUpload = (url: string) => {
            setImageUrl(url);
            setValue("imageUrl", url);
          };

          const handleImageRemove = () => {
            setImageUrl("");
            setValue("imageUrl", "");
          };

          return (
            <>
              <Input
                label="Question"
                id="questionText"
                variant="quiz"
                className={`py-2 w-full ${
                  formState.errors["text"] ? "border-red-500" : ""
                }`}
                placeholder="Enter your question here..."
                error={formState.errors["text"]}
                registration={register("text")}
              />
              {formState.errors.root && (
                <p className="text-sm text-red-500 font-semibold border border-red-500 p-2 text-center">
                  {formState.errors.root.message}
                </p>
              )}

              {/* Image upload implementation */}
              <ImageUpload
                onUpload={handleImageUpload}
                onRemove={handleImageRemove}
                initialImageUrl={imageUrl}
              />
              <input type="hidden" {...register("imageUrl")} />

              <div className="space-y-4 mt-4">
                <div className="flex flex-col">
                  <Input
                    label="Correct Answer"
                    variant="isCorrect"
                    className={`${
                      formState.errors["correctAnswer"] ? "border-red-500" : ""
                    }`}
                    placeholder="Enter the correct answer..."
                    error={formState.errors["correctAnswer"]}
                    registration={register("correctAnswer")}
                  />
                </div>
              </div>

              <Separator className="bg-gray-300 dark:bg-gray-600" />

              <div className="space-y-4 mt-4">
                <div className="flex items-center justify-between">
                  <Label className="block text-sm font-medium text-foreground">
                    Acceptable Answers
                  </Label>
                  <div className="flex space-x-2">
                    <LiftedButton
                      type="button"
                      className="text-[12px]"
                      onClick={() => append({ value: "" })}
                    >
                      + Add Answer
                    </LiftedButton>
                  </div>
                </div>
                <div className="space-y-3">
                  {fields.map((field, index) => (
                    <div
                      key={field.id}
                      className="flex items-center justify-between gap-4"
                    >
                      <Input
                        className={`${
                          formState.errors?.acceptableAnswers?.[index]
                            ? "border-red-500"
                            : ""
                        }`}
                        placeholder={`Alternative answer ${index + 1}...`}
                        error={
                          formState.errors?.acceptableAnswers?.[index]?.value
                        }
                        registration={register(
                          `acceptableAnswers.${index}.value`
                        )}
                      />
                      <Button
                        type="button"
                        variant="destructive"
                        size="sm"
                        className="rounded-xl"
                        onClick={() => remove(index)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>
                {formState.errors?.acceptableAnswers && (
                  <p className="text-sm text-red-500 font-semibold border border-red-500 p-2 text-center">
                    {formState.errors.acceptableAnswers.message}
                  </p>
                )}
              </div>

              <div className="space-y-4 mt-6">
                <Label
                  htmlFor="answerOptions"
                  className="block text-sm font-medium text-foreground"
                >
                  Answer Options
                </Label>
                <div className="flex items-center justify-between p-3 border rounded-md bg-muted dark:border-foreground/30 dark:bg-muted/20">
                  <TooltipProvider>
                    <div>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <div className="flex items-center space-x-2 cursor-default">
                            <Switch
                              id="caseSensitive"
                              checked={watch("isCaseSensitive") === true}
                              onCheckedChange={(checked) =>
                                setValue("isCaseSensitive", checked)
                              }
                            />
                            <Label
                              htmlFor="caseSensitive"
                              className="text-sm text-gray-700 dark:text-gray-400"
                            >
                              Case Sensitive
                            </Label>
                          </div>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p className="bg-background p-2 rounded-md text-sm text-foreground border border-foreground dark:border-foreground/30 mb-2">
                            If DISABLED, "new york" will be accepted for "New
                            York"
                          </p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    <div>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <div className="flex items-center space-x-2 cursor-default">
                            <Switch
                              id="allowPartialMatch"
                              checked={!watch("allowPartialMatch") === true}
                              onCheckedChange={(checked) =>
                                setValue("allowPartialMatch", !checked)
                              }
                            />
                            <Label
                              htmlFor="allowPartialMatch"
                              className="text-sm text-gray-700 dark:text-gray-400"
                            >
                              Exact Match Required
                            </Label>
                          </div>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p className="bg-background p-2 rounded-md text-sm text-foreground border border-foreground dark:border-foreground/30 mb-2 mr-3">
                            If DISABLED, "New York" will be accepted for "New
                            York City"
                          </p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                  </TooltipProvider>
                </div>

                <div className="grid grid-cols-2 gap-4 border-t pt-4 dark:border-foreground/30">
                  <CategorySelect
                    label="Category"
                    categories={queryData.categories}
                    value={watch("categoryId")?.toString() || ""}
                    onChange={(selectedValue: string) =>
                      setValue("categoryId", parseInt(selectedValue, 10))
                    }
                    includeAllOption={false}
                    error={formState.errors["categoryId"]?.message}
                    clearErrors={() => clearErrors("categoryId")}
                  />
                  <DifficultySelect
                    label="Difficulty"
                    difficulties={queryData.difficulties}
                    value={watch("difficultyId")?.toString() || ""}
                    onChange={(selectedValue: string) =>
                      setValue("difficultyId", parseInt(selectedValue, 10))
                    }
                    includeAllOption={false}
                    error={formState.errors["difficultyId"]?.message}
                    clearErrors={() => clearErrors("difficultyId")}
                  />
                  <LanguageSelect
                    label="Language"
                    languages={queryData.languages}
                    value={watch("languageId")?.toString() || ""}
                    includeAllOption={false}
                    onChange={(selectedValue: string) =>
                      setValue("languageId", parseInt(selectedValue, 10))
                    }
                    error={formState.errors["languageId"]?.message}
                    clearErrors={() => clearErrors("languageId")}
                  />

                  <VisibilitySelect
                    label="Visibility"
                    value={watch("visibility")}
                    onChange={(value: string) => setValue("visibility", value)}
                    error={formState.errors["visibility"]?.message}
                    clearErrors={() => clearErrors("visibility")}
                  />
                </div>
              </div>
            </>
          );
        }}
      </Form>
    </FormDrawer>
  );
};

export default UpdateTypeAnswerQuestionForm;
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Categories/api/get-question-categories.ts">
import { queryOptions, useQuery } from "@tanstack/react-query";

import {  apiService } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";
import { QuestionCategory } from "@/types/ApiTypes";

export const getQuestionCategories = (): Promise<QuestionCategory[]> => {
  return apiService.get(`/questionCategories`);
};

export const getQuestionCategoriesQueryOptions = () => {
  return queryOptions({
    queryKey: ["questionCategories"],
    queryFn: () => getQuestionCategories(),
  });
};

type UseQuestionCategoriesOptions = {
  queryConfig?: QueryConfig<typeof getQuestionCategoriesQueryOptions>;
};

export const useQuestionCategoryData = ({ queryConfig }: UseQuestionCategoriesOptions) => {
  return useQuery({
    ...getQuestionCategoriesQueryOptions(),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Categories/Components/category-view.tsx">
import { DataTable, Spinner } from "@/components/ui";

import { Card } from "@/components/ui";
import CreateQuestionCategoryForm from "./create-question-category";
import { categoryColumns } from "./columns";
import { useQuestionCategoryData } from "../api/get-question-categories";

export const CategoryView = () => {
  const questionCategoriesQuery = useQuestionCategoryData({});

  if (questionCategoriesQuery.isLoading) return <Spinner size="lg" />;
  if (questionCategoriesQuery.isError) return <p>Failed to load categories.</p>;

  return (
    <>
       <h1 className="text-xl font-bold mt-4">Categories Management</h1>
      <Card className="flex flex-col justify-center align-items-end gap-2  p-8 bg-background border border-border">
        <div>
          <CreateQuestionCategoryForm />
        </div>
        <DataTable
          data={questionCategoriesQuery.data || []}
          columns={categoryColumns}
        />
      </Card>
    </>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Categories/Components/columns.tsx">
import { ColumnDef } from "@tanstack/react-table";
import { QuestionCategory } from "@/types/ApiTypes";
import formatDate from "@/lib/date-format";
import { Edit } from "lucide-react";
import { DeleteQuestionCategory } from "./delete-question-category";
import { Authorization } from "@/lib/authorization";
import { LiftedButton } from "@/common/LiftedButton";

export const categoryColumns: ColumnDef<QuestionCategory>[] = [
  {
    accessorKey: "name",
    header: "Category",
  },
  {
    accessorKey: "id",
    header: "Id",
  },
  {
    accessorKey: "createdAt",
    header: "Created At",
    cell: ({ row }) => formatDate(row.original.createdAt),
  },
  {
    accessorKey: "username",
    header: "Created By",
  },
  {
    cell: ({ row }) => {
      const category = row.original;
      return (
        <div className="flex items-center space-x-2">
          <Authorization allowedRoles={["SuperAdmin"]}>
            <LiftedButton variant="icon">
              <Edit size={16} />
            </LiftedButton>
            <DeleteQuestionCategory id={category.id} />
          </Authorization>
        </div>
      );
    },
    header: "Actions",
  },
];
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Categories/Components/create-question-category.tsx">
import { useNotifications } from "@/common/Notifications";
import { useCreateQuestionCategory } from "../api/create-question-categories";
import { FormDrawer } from "@/components/ui/form";
import { Button } from "@/components/ui";
import { Smile } from "lucide-react";
import { Input, Label } from "@/components/ui/form";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Form } from "@/components/ui/form";
import { createQuestionCategoryInputSchema } from "../api/create-question-categories";
import EmojiPicker, { type EmojiClickData } from "emoji-picker-react";
import { useDisclosure } from "@/hooks/use-disclosure";
import { LiftedButton } from "@/common/LiftedButton";

export const CreateQuestionCategoryForm = () => {
  const { addNotification } = useNotifications();
  const createQuestionCategoryMutation = useCreateQuestionCategory({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Question Category Created",
        });
      },
      onError: () => {
        addNotification({
          type: "error",
          title: "Error Creating Question Category",
        });
      },
    },
  });

  const { isOpen, open, close } = useDisclosure(false);

  return (
    <>
      <FormDrawer
        isDone={createQuestionCategoryMutation.isSuccess}
        triggerButton={
          <LiftedButton className="text-xs">+ New Category</LiftedButton>
        }
        title="Create New Question Category"
        submitButton={
          <Button
            form="create-question-cateogry"
            variant="addSave"
            className="rounded-sm text-white"
            type="submit"
            size="default"
            isPending={createQuestionCategoryMutation.isPending}
            disabled={createQuestionCategoryMutation.isPending}
          >
            Submit
          </Button>
        }
      >
        <Form
          id="create-question-cateogry"
          onSubmit={(values) => {
            createQuestionCategoryMutation.mutate({ data: values });
          }}
          schema={createQuestionCategoryInputSchema}
        >
          {({ register, formState, watch, setValue }) => {
            const selectedEmoji = watch("emoji") || "";

            const onEmojiClick = (emojiData: EmojiClickData) => {
              setValue("emoji", emojiData.emoji, {
                shouldValidate: true,
                shouldDirty: true,
              });
              close();
            };

            return (
              <>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="name" className="text-sm font-medium">
                      Category
                    </Label>
                    <Input
                      id="name"
                      className={`py-2 ${
                        formState.errors["name"]
                          ? "border-red-500"
                          : "border-border"
                      }`}
                      placeholder="Enter new category here..."
                      error={formState.errors["name"]}
                      registration={register("name")}
                    />
                  </div>

                  <div>
                    <Label htmlFor="emoji" className="text-sm font-medium">
                      Category Icon
                    </Label>
                    <div className="flex items-center gap-2 mt-1">
                      <div
                        className="flex items-center justify-center h-10 w-10 border border-border rounded-md bg-background"
                        aria-label="Selected emoji"
                      >
                        {selectedEmoji ? (
                          <span className="text-xl">{selectedEmoji}</span>
                        ) : (
                          <Smile className="h-5 w-5 text-muted-foreground" />
                        )}
                      </div>
                      <Button
                        type="button"
                        id="emoji-selector"
                        variant="outline"
                        onClick={open}
                        className="flex-1"
                      >
                        {selectedEmoji ? "Change Emoji" : "Select Emoji"}
                      </Button>

                      {/* Hidden input for the emoji field */}
                      <input type="hidden" id="emoji" {...register("emoji")} />
                    </div>
                    {formState.errors.emoji && (
                      <p className="text-sm text-red-500 mt-1">
                        {formState.errors.emoji.message}
                      </p>
                    )}
                  </div>
                </div>

                {/* Emoji Picker Dialog */}
                <Dialog open={isOpen} onOpenChange={(open) => !open && close()}>
                  <DialogContent className="sm:max-w-md p-0 overflow-hidden">
                    <DialogHeader className="px-4 pt-4 pb-0">
                      <DialogTitle>Select an Emoji</DialogTitle>
                    </DialogHeader>
                    <div className="p-4">
                      <EmojiPicker
                        onEmojiClick={onEmojiClick}
                        lazyLoadEmojis={true}
                        width="100%"
                        height="350px"
                      />
                    </div>
                  </DialogContent>
                </Dialog>
              </>
            );
          }}
        </Form>
      </FormDrawer>
    </>
  );
};

export default CreateQuestionCategoryForm;
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Categories/Components/delete-question-category.tsx">
import { useNotifications } from "@/common/Notifications";
import { useDeleteQuestionCategory } from "../api/delete-question-categories";
import { ConfirmationDialog } from "@/components/ui/dialog";
import { Button } from "@/components/ui";
import { Trash2 } from "lucide-react";
import { LiftedButton } from "@/common/LiftedButton";

type DeleteCategoryProps = {
  id: number;
};
export const DeleteQuestionCategory = ({ id }: DeleteCategoryProps) => {
  const { addNotification } = useNotifications();
  const deleteQuestionCategoryMutation = useDeleteQuestionCategory({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Question Category Deleted",
        });
      },
    },
  });

  return (
    <ConfirmationDialog
      isDone={deleteQuestionCategoryMutation.isSuccess}
      icon="danger"
      title="WARNING"
      body="Many Questions may be affected. This action cannot be undone."
      triggerButton={
        <LiftedButton variant="icon" className="rounded-xl bg-red-400">
          <Trash2 size={16} />
        </LiftedButton>
      }
      confirmButton={
        <Button
          isPending={deleteQuestionCategoryMutation.isPending}
          type="button"
          variant="destructive"
          onClick={() => {
            deleteQuestionCategoryMutation.mutate({ categoryId: id });
          }}
        >
          Delete Category
        </Button>
      }
    />
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Difficulty/api/get-question-difficulties.ts">
import { queryOptions, useQuery } from "@tanstack/react-query";

import { apiService } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";
import { QuestionDifficulty } from "@/types/ApiTypes";

export const getQuestionDifficulties = (): Promise<QuestionDifficulty[]> => {
  console.log("getQuestionCategories");
  return apiService.get(`/questionDifficulties`);
};

export const getQuestionDifficultyQueryOptions = () => {
  return queryOptions({
    queryKey: ["getQuestionDifficulties"],
    queryFn: () => getQuestionDifficulties(),
  });
};

type UseQuestionDifficultyOptions = {
  queryConfig?: QueryConfig<typeof getQuestionDifficultyQueryOptions>;
};

export const useQuestionDifficultyData = ({ queryConfig }: UseQuestionDifficultyOptions) => {
  return useQuery({
    ...getQuestionDifficultyQueryOptions(),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Difficulty/Components/create-question-difficulty.tsx">
import { useNotifications } from "@/common/Notifications";
import { useCreateQuestionDifficulty } from "../api/create-question-difficulty";
import { FormDrawer } from "@/components/ui/form";
import { Button } from "@/components/ui";
import { Input, Label } from "@/components/ui/form";
import { Form } from "@/components/ui/form";
import { createQuestionDifficultyInputSchema } from "../api/create-question-difficulty";
import { LiftedButton } from "@/common/LiftedButton";

export const CreateQuestionDifficultyForm = () => {
  const { addNotification } = useNotifications();
  const createQuestionDifficultyMutation = useCreateQuestionDifficulty({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Question Difficulty Created",
        });
      },
    },
  });

  return (
    <FormDrawer
      isDone={createQuestionDifficultyMutation.isSuccess}
      triggerButton={
        <LiftedButton className="text-xs">+ New Difficulty</LiftedButton>
      }
      title="Create New Question Difficulty"
      submitButton={
        <Button
          form="create-question-difficulty"
          variant="addSave"
          className="rounded-sm text-white"
          type="submit"
          size="default"
          isPending={createQuestionDifficultyMutation.isPending}
          disabled={createQuestionDifficultyMutation.isPending}
        >
          Submit
        </Button>
      }
    >
      <Form
        id="create-question-difficulty"
        onSubmit={(values) => {
          createQuestionDifficultyMutation.mutate({ data: values });
        }}
        schema={createQuestionDifficultyInputSchema}
      >
        {({ register, formState }) => {
          return (
            <>
              <div>
                <Label htmlFor="difficulty" className="text-sm font-medium">
                  Difficulty
                </Label>
                <Input
                  id="level"
                  className={`py-2 ${
                    formState.errors["level"]
                      ? "border-red-500"
                      : "border-border"
                  }`}
                  placeholder="Enter new level here..."
                  error={formState.errors["level"]}
                  registration={register("level")}
                />

                <Input
                  id="weight"
                  className={`py-2 ${
                    formState.errors["weight"]
                      ? "border-red-500"
                      : "border-border"
                  }`}
                  type="number"
                  placeholder="Enter weight here..."
                  error={formState.errors["weight"]}
                  registration={register("weight", { valueAsNumber: true })}
                />
              </div>
            </>
          );
        }}
      </Form>
    </FormDrawer>
  );
};

export default CreateQuestionDifficultyForm;
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Difficulty/Components/delete-question-difficulty.tsx">
import { useNotifications } from "@/common/Notifications";
import { useDeleteQuestionDifficulty } from "../api/delete-question-difficulty";
import { ConfirmationDialog } from "@/components/ui/dialog";
import { Button } from "@/components/ui";
import { Trash2 } from "lucide-react";
import { LiftedButton } from "@/common/LiftedButton";

type DeleteDifficultyProps = {
  id: number;
};
export const DeleteQuestionDifficulty = ({ id }: DeleteDifficultyProps) => {
  const { addNotification } = useNotifications();
  const deleteQuestionDifficultyMutation = useDeleteQuestionDifficulty({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Question Difficulty Deleted",
        });
      },
    },
  });

  return (
    <ConfirmationDialog
      isDone={deleteQuestionDifficultyMutation.isSuccess}
      icon="danger"
      title="Delete Question Difficulty"
      body="This action cannot be undone."
      triggerButton={
        <LiftedButton variant="icon" className="rounded-xl bg-red-400">
          <Trash2 size={16} />
        </LiftedButton>
      }
      confirmButton={
        <Button
          isPending={deleteQuestionDifficultyMutation.isPending}
          type="button"
          variant="destructive"
          onClick={() => {
            deleteQuestionDifficultyMutation.mutate({ difficultyId: id });
          }}
        >
          Delete Difficulty
        </Button>
      }
    />
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Difficulty/Components/difficulty-view.tsx">
import { DataTable, Spinner } from "@/components/ui";

import { Card } from "@/components/ui";
import CreateQuestionDifficultyForm from "./create-question-difficulty";
import { difficultyColumns } from "./columns";
import { useQuestionDifficultyData } from "../api/get-question-difficulties";

export const DifficultyView = () => {
  const questionDifficultiesQuery = useQuestionDifficultyData({});

  if (questionDifficultiesQuery.isLoading) return <Spinner size="lg" />;
  if (questionDifficultiesQuery.isError)
    return <p>Failed to load difficulties.</p>;

  return (
    <>
      <h1 className="text-xl font-bold mt-4">Difficulty Management</h1>

      <Card className="flex flex-col justify-center align-items-end gap-2  p-8 bg-background border border-border">
        <div>
          <CreateQuestionDifficultyForm />
        </div>
        <DataTable
          data={questionDifficultiesQuery.data || []}
          columns={difficultyColumns}
        />
      </Card>
    </>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Language/api/create-question-language.ts">
import { QuestionLanguage } from '@/types/ApiTypes'
import {z} from 'zod'
import { api } from '@/lib/Api-client'
import { MutationConfig } from '@/lib/React-query'
import { useQueryClient, useMutation } from '@tanstack/react-query'
import { getQuestionLanguageQueryOptions } from './get-question-language'

export const createQuestionLanguageInputSchema = z.object({
    language: z.string().min(1, 'Category is required'),
})


export type CreateQuestionLanguageInput = z.infer<typeof createQuestionLanguageInputSchema>

export const createQuestionLanguage = ({data} : {data:CreateQuestionLanguageInput}): Promise<QuestionLanguage> => {
    return api.post('/questionlanguages', data);
}

type UseCreateQuestionLanguageOptions = {
    mutationConfig?: MutationConfig<typeof createQuestionLanguage>;
}

export const useCreateQuestionLanguage = ({ mutationConfig }: UseCreateQuestionLanguageOptions = {}) => {
    const queryClient = useQueryClient();

    const { onSuccess, onError, ...restConfig } = mutationConfig || {};

    return useMutation(
        {
            mutationFn: createQuestionLanguage,
            onSuccess: (...args) => {
                queryClient.invalidateQueries({ queryKey: getQuestionLanguageQueryOptions().queryKey });
                onSuccess?.(...args);
            },
            onError: (error, variables, context) => {
                console.error('Error creating question langauge:', error);
                onError?.(error, variables, context);
            },
            ...restConfig,
        }
    )
}
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Language/components/create-question-language.tsx">
import { useNotifications } from "@/common/Notifications";
import { FormDrawer } from "@/components/ui/form";
import { Button } from "@/components/ui";
import { Input, Label } from "@/components/ui/form";
import { Form } from "@/components/ui/form";
import { createQuestionLanguageInputSchema } from "../api/create-question-language";
import { useCreateQuestionLanguage } from "../api/create-question-language";
import { LiftedButton } from "@/common/LiftedButton";

export const CreateQuestionLanguageForm = () => {
  const { addNotification } = useNotifications();
  const createQuestionLanguageMutation = useCreateQuestionLanguage({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Question Language Created",
        });
      },
    },
  });

  return (
    <FormDrawer
      isDone={createQuestionLanguageMutation.isSuccess}
      triggerButton={
        <LiftedButton className="text-xs">+ New Language</LiftedButton>
      }
      title="Create New Question Language"
      submitButton={
        <Button
          form="create-question-language"
          variant="addSave"
          className="rounded-sm text-white"
          type="submit"
          size="default"
          isPending={createQuestionLanguageMutation.isPending}
          disabled={createQuestionLanguageMutation.isPending}
        >
          Submit
        </Button>
      }
    >
      <Form
        id="create-question-language"
        onSubmit={(values) => {
          createQuestionLanguageMutation.mutate({ data: values });
        }}
        schema={createQuestionLanguageInputSchema}
      >
        {({ register, formState }) => {
          return (
            <>
              <div>
                <Label htmlFor="language" className="text-sm font-medium">
                  Language
                </Label>
                <Input
                  id="level"
                  className={`py-2 ${
                    formState.errors["language"]
                      ? "border-red-500"
                      : "border-border"
                  }`}
                  placeholder="Enter new langauge here..."
                  error={formState.errors["language"]}
                  registration={register("language")}
                />
              </div>
            </>
          );
        }}
      </Form>
    </FormDrawer>
  );
};

export default CreateQuestionLanguageForm;
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/select-visibility.tsx">
import React from "react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/form";

interface VisibilitySelectProps {
  label?: string;
  value: string;
  onChange: (value: string) => void;
  error?: string;
  clearErrors?: () => void;
}

export const VisibilitySelect: React.FC<VisibilitySelectProps> = ({
  label,
  value,
  onChange,
  error,
  clearErrors,
}) => {
  const visibilityOptions = ["Global", "Private"];
  const isValueValid = visibilityOptions.includes(value);

  return (
    <div>
      {label && (
        <Label className="text-sm font-medium text-foreground">{label}</Label>
      )}
      <Select
        value={isValueValid ? value : ""}
        onValueChange={(selectedValue) => {
          onChange(selectedValue);
          clearErrors?.();
        }}
      >
        <SelectTrigger
          variant="quiz"
          className={`min-w-[200px] ${error ? "border-red-500" : ""}`}
        >
          <SelectValue placeholder="--Select Visibility--" />
        </SelectTrigger>
        <SelectContent className="min-w-[200px]">
          {visibilityOptions.map((option) => (
            <SelectItem key={option} value={option}>
              {option}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      {error && <p className="text-sm text-red-500">{error}</p>}
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/create-question/new-quiz-question-card.tsx">
import { QuestionType } from "@/types/ApiTypes";
import { NewAnyQuestion } from "../../types";
import { MultipleChoiceFormCard } from "./multiple-choice-question-form";

interface NewQuizQuestionCardProps {
  question: NewAnyQuestion;
}

export const NewQuestionCard: React.FC<NewQuizQuestionCardProps> = (props) => {
  switch (props.question.type) {
    case QuestionType.MultipleChoice:
      return <MultipleChoiceFormCard question={props.question} />;
  }
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-details.tsx">
import { Input, Label, Textarea } from "@/components/ui/form";
import { CategorySelect } from "../../../../Question/Entities/Categories/Components/select-question-category";
import { LanguageSelect } from "../../../../Question/Entities/Language/components/select-question-language";
import { FormProps, QueryData } from "../types";

interface QuizDetailsProps {
  formProps: FormProps;
  queryData: QueryData;
}

export const QuizDetails = ({ formProps, queryData }: QuizDetailsProps) => {
  const { register, watch, setValue, formState, clearErrors } = formProps;

  return (
    <div>
      {/* Title and Description */}
      <div className="grid grid-cols-1 gap-4 mb-6">
        <div>
          <Label htmlFor="title">Quiz Title</Label>
          <Input
            className="bg-muted rounded-sm"
            id="title"
            variant="quiz"
            {...register("title")}
            error={formState.errors.title}
            placeholder="Enter quiz title"
          />
        </div>

        <div>
          <Label htmlFor="description">Description</Label>
          <Textarea
            maxLength={200}
            className="bg-muted rounded-sm max-h-28"
            id="description"
            registration={register("description")}
            error={formState.errors.description}
            placeholder="Enter quiz description"
          />
        </div>
      </div>

      {/* Category and Language */}
      <div className="grid grid-cols-2 gap-4">
        <CategorySelect
          label="Category"
          categories={queryData.categories}
          value={watch("categoryId")?.toString() || ""}
          onChange={(selectedValue: string) =>
            setValue("categoryId", parseInt(selectedValue, 10))
          }
          includeAllOption={false}
          error={formState.errors["categoryId"]?.message}
          clearErrors={() => clearErrors("categoryId")}
        />

        <LanguageSelect
          label="Language"
          languages={queryData.languages}
          value={watch("languageId")?.toString() || ""}
          includeAllOption={false}
          onChange={(selectedValue: string) =>
            setValue("languageId", parseInt(selectedValue, 10))
          }
          error={formState.errors["languageId"]?.message}
          clearErrors={() => clearErrors("languageId")}
        />
      </div>
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/existing-quiz-question-card.tsx">
import React from "react";
import { QuestionType } from "@/types/ApiTypes";
import { MultipleChoiceCard } from "./multiple-choice-question-card/quiz-muiltiple-choice-question-card";
import { TrueFalseCard } from "./true-false-question-card/true-false-question-card";
import { TypeTheAnswerCard } from "./type-the-answer-question-card/type-the-asnwer-question-card";
import { ExistingQuestionCardProps } from "./quiz-base-question-card";

export const ExistingQuestionCard: React.FC<ExistingQuestionCardProps> = (
  props
) => {
  switch (props.question.type) {
    case QuestionType.MultipleChoice:
      return <MultipleChoiceCard {...props} />;
    case QuestionType.TrueFalse:
      return <TrueFalseCard {...props} />;
    case QuestionType.TypeTheAnswer:
      return <TypeTheAnswerCard {...props} />;
    default:
      return null;
  }
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/multiple-choice-question-card/multiple-choice-answers.tsx">
import React from "react";
import { Badge } from "@/components/ui/badge";
import { CheckCircle } from "lucide-react";
import { cn } from "@/utils/cn";
import { MultipleChoiceQuestion } from "@/types/ApiTypes";

interface MultipleChoiceAnswersProps {
  question: MultipleChoiceQuestion;
}

export const MultipleChoiceAnswers: React.FC<MultipleChoiceAnswersProps> = ({
  question
}) => (
  <div className="my-6">
    <div className="grid grid-cols-2 gap-3">
      {question.answerOptions?.map((option, i) => (
        <div
          key={i}
          className={cn(
            "text-sm border rounded-lg px-4 py-3 flex items-center transition-all duration-200",
            question.answerOptions.length === 3 && i === 2 && "col-span-2",
            question.answerOptions.length === 2 && "col-span-2",
            option.isCorrect
              ? "border-green-500/40 bg-green-100 dark:bg-green-900/30 shadow-sm"
              : "border-foreground/20 hover:border-foreground/30 bg-muted/20 dark:bg-background/20"
          )}
        >
          <div
            className={cn(
              "w-4 h-4 rounded-full mr-3 border-2 transition-all flex items-center justify-center",
              option.isCorrect
                ? "bg-green-500 border-green-600"
                : "border-muted-foreground/40"
            )}
          >
            {option.isCorrect && (
              <CheckCircle size={10} className="text-white" />
            )}
          </div>
          <span className="flex-1">
            {option.text || `Option ${i + 1}`}
          </span>
          {option.isCorrect && (
            <Badge
              variant="outline"
              className="ml-2 text-xs text-green-700 border-green-500"
            >
              Correct
            </Badge>
          )}
        </div>
      ))}
    </div>
  </div>
);
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/quiz-question-card-footer.tsx">
import React from "react";
import { User } from "lucide-react";
import { AnyQuestion } from "@/types/ApiTypes";

interface QuestionFooterProps {
  question: AnyQuestion;
}

export const QuestionFooter: React.FC<QuestionFooterProps> = ({ question }) => (
  <div className="flex justify-between items-center text-xs text-muted-foreground border-t dark:border-foreground/40 pt-3">
    <span>ID: {question.id}</span>
    <div className="flex items-center gap-1">
      <User size={12} />
      <span>User: {question.user.username}</span>
    </div>
  </div>
);
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/quiz-question-image-preview.tsx">
import React from "react";
import { ImageIcon } from "lucide-react";

interface QuestionImagePreviewProps {
  imageUrl: string;
  previewBorderColor: string;
}

export const QuestionImagePreview: React.FC<QuestionImagePreviewProps> = ({
  imageUrl,
  previewBorderColor
}) => (
  <div className="relative w-full mb-3">
    <div className="group relative">
      <div className="flex items-center gap-2 p-3 border border-dashed border-muted-foreground/40 rounded-md bg-muted/20 hover:bg-muted/40 transition-colors cursor-pointer">
        <ImageIcon size={16} className="text-muted-foreground" />
        <span className="text-sm text-muted-foreground">
          This question includes an image • Hover to preview
        </span>
      </div>

      <div className={`absolute top-full left-0 mt-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10 bg-white dark:bg-gray-900 border ${previewBorderColor} border-dashed rounded-lg shadow-xl p-2 max-w-sm`}>
        <img
          src={imageUrl}
          alt="Question image preview"
          className="w-full h-auto max-h-48 object-contain rounded"
        />
      </div>
    </div>
  </div>
);
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/quiz-question-metadata.tsx">
import { Badge } from "@/components/ui/badge";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import {
  Tag,
  Calendar,
  Languages,
  Info,
  Eye,
  ChartNetwork,
  Shapes,
} from "lucide-react";
import { AnyQuestion } from "@/types/ApiTypes";
import formatDate from "@/lib/date-format";


interface QuestionMetadataProps {
  question: AnyQuestion;
  backgroundColor?: string;
}

export const QuestionMetadata: React.FC<QuestionMetadataProps> = ({
  question,
  backgroundColor = "bg-muted/30"
}) => (
  <Accordion type="single" collapsible className="w-full">
    <AccordionItem value="metadata">
      <AccordionTrigger>
        <p className="flex gap-2 items-center">
          Extra Information <Info className="h-4 w-4" />
        </p>
      </AccordionTrigger>
      <AccordionContent>
        <div className={`grid grid-cols-2 gap-4 mb-4 p-4 ${backgroundColor} rounded-lg`}>
          <div className="flex items-center gap-2 text-sm">
            <Tag size={14} className="text-muted-foreground" />
            <span className="text-muted-foreground">Category:</span>
            <Badge variant="outline" className="text-xs">
              {question.category.name}
            </Badge>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <ChartNetwork size={14} className="text-muted-foreground" />
            <span className="text-muted-foreground">Difficulty:</span>
            <Badge variant="outline" className="text-xs">
              {question.difficulty.level}
            </Badge>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <Languages size={14} className="text-muted-foreground" />
            <span className="text-muted-foreground">Language:</span>
            <Badge variant="outline" className="text-xs">
              {question.language.language}
            </Badge>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <Calendar size={14} className="text-muted-foreground" />
            <span className="text-muted-foreground">Created:</span>
            <span className="text-xs text-muted-foreground">
              {formatDate(question.createdAt)}
            </span>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <Eye size={14} className="text-muted-foreground" />
            <span className="text-muted-foreground">Visibility:</span>
            <Badge variant="outline" className="text-xs">
              {question.visibility}
            </Badge>
          </div>
          <div className="flex items-center gap-2 text-sm">
            <Shapes size={14} className="text-muted-foreground" />
            <span className="text-muted-foreground">Type:</span>
            <Badge variant="outline" className="text-xs">
              {question.type}
            </Badge>
          </div>
        </div>
      </AccordionContent>
    </AccordionItem>
  </Accordion>
);
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/true-false-question-card/true-false-answer.tsx">
import React from "react";
import { Badge } from "@/components/ui/badge";
import { CheckCircle } from "lucide-react";
import { cn } from "@/utils/cn";
import { TrueFalseQuestion } from "@/types/ApiTypes";

interface TrueFalseAnswersProps {
  question: TrueFalseQuestion;
}

export const TrueFalseAnswers: React.FC<TrueFalseAnswersProps> = ({
  question
}) => (
  <div className="my-6">
    <div className="grid grid-cols-2 gap-3">
      {[true, false].map((value) => (
        <div
          key={value.toString()}
          className={cn(
            "text-sm border rounded-lg px-4 py-3 flex items-center transition-all duration-200",
            question.correctAnswer === value
              ? "border-green-500/40 bg-green-100 dark:bg-green-900/30 shadow-sm"
              : "border-foreground/20 hover:border-foreground/30 bg-muted/20 dark:bg-background/20"
          )}
        >
          <div
            className={cn(
              "w-4 h-4 rounded-full mr-3 border-2 transition-all flex items-center justify-center",
              question.correctAnswer === value
                ? "bg-green-500 border-green-600"
                : "border-muted-foreground/40"
            )}
          >
            {question.correctAnswer === value && (
              <CheckCircle size={10} className="text-white" />
            )}
          </div>
          <span className="flex-1">{value ? "True" : "False"}</span>
          {question.correctAnswer === value && (
            <Badge
              variant="outline"
              className="ml-2 text-xs text-green-700 border-green-500"
            >
              Correct
            </Badge>
          )}
        </div>
      ))}
    </div>
  </div>
);
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/type-the-answer-question-card/type-the-asnwer-display.tsx">
import React from "react";
import { Badge } from "@/components/ui/badge";
import { Edit3 } from "lucide-react";
import { TypeTheAnswerQuestion } from "@/types/ApiTypes";

interface TypeTheAnswerDisplayProps {
  question: TypeTheAnswerQuestion;
}

export const TypeTheAnswerDisplay: React.FC<TypeTheAnswerDisplayProps> = ({
  question
}) => (
  <div className="my-6">
    <div className="border border-green-500/40 bg-green-100 dark:bg-green-900/30 shadow-sm rounded-lg px-4 py-3">
      <div className="flex items-center gap-3 mb-2">
        <Edit3 size={16} className="text-green-600" />
        <span className="text-sm font-medium text-green-700 dark:text-green-400">
          Correct Answer
        </span>
      </div>
      <div className="text-base font-mono bg-white dark:bg-gray-800 rounded px-3 py-2 border border-green-200">
        {question.correctAnswer || "Answer not set"}
      </div>

      <div className="flex gap-2 mt-3">
        {question.isCaseSensitive && (
          <Badge variant="outline" className="text-xs">
            Case Sensitive
          </Badge>
        )}
        {question.allowPartialMatch && (
          <Badge variant="outline" className="text-xs">
            Partial Match
          </Badge>
        )}
      </div>

      {question.acceptableAnswers && question.acceptableAnswers.length > 0 && (
        <div className="mt-3">
          <span className="text-xs text-green-700 dark:text-green-400 font-medium">
            Alternative Answers ({question.acceptableAnswers.length})
          </span>
          <div className="grid gap-1 mt-1">
            {question.acceptableAnswers.slice(0, 2).map((answer, i) => (
              <div
                key={i}
                className="text-xs font-mono bg-green-50 dark:bg-green-900/20 rounded px-2 py-1 border border-green-200/50"
              >
                {answer}
              </div>
            ))}
            {question.acceptableAnswers.length > 2 && (
              <div className="text-xs text-green-600 dark:text-green-400">
                +{question.acceptableAnswers.length - 2} more...
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  </div>
);
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/time-limit-select.tsx">
import { Controller, Control, FieldError } from "react-hook-form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/form";

interface TimeLimitSelectProps {
  control?: Control<any>;
  name?: string;
  error?: FieldError;
  id?: string;
}

const timeOptions = [
  { value: "5", label: "5s" },
  { value: "10", label: "10s" },
  { value: "15", label: "15s" },
  { value: "30", label: "30s" },
  { value: "60", label: "1m" },
];

export const TimeLimitSelect = ({
  control,
  name,
  error,
  id,
}: TimeLimitSelectProps) => {
  return (
    <div>
      <Label htmlFor={id} className="text-sm block text-primary">
        Select Time Limit
      </Label>
      <Controller
        name={name ? name : "timeLimit"}
        control={control}
        render={({ field }) => (
          <Select
            onValueChange={(value) => field.onChange(Number(value))}
            value={field.value?.toString() || timeOptions[1].value}
          >
            <SelectTrigger id={id} variant="quiz">
              <SelectValue
                className="text-foreground"
                placeholder="Select time limit"
              />
            </SelectTrigger>
            <SelectContent>
              {timeOptions.map((option) => (
                <SelectItem key={option.value} value={option.value}>
                  {option.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        )}
      />
      {error && <p className="text-red-500 text-sm mt-1">{error.message}</p>}
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Data-Table-Columns/columns.tsx">
import { ColumnDef } from "@tanstack/react-table";
import { Quiz } from "@/types/ApiTypes";
// import { Button } from "@/components/ui/button";
// import { useDisclosure } from "@/hooks/use-disclosure";
// import {
//   Copy,
//   Activity,
//   UserX,
//   UserRoundPen,
//   MoreHorizontal,
// } from "lucide-react";
// import {
//   DropdownMenu,
//   DropdownMenuContent,
//   DropdownMenuItem,
//   DropdownMenuLabel,
//   DropdownMenuSeparator,
//   DropdownMenuTrigger,
// } from "@/components/ui/dropdown-menu";
import formatDate from "@/lib/date-format";
import TitleWithDescription from "./title-description";
import { useDisclosure } from "@/hooks/use-disclosure";
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui";
import { Copy, Eye, MoreHorizontal } from "lucide-react";
import { DeleteQuiz } from "../delete-quiz";
import { Link } from "react-router-dom";

export const quizColumns: ColumnDef<Quiz>[] = [
  {
    id: "quizInfo",
    header: "Quiz Info",
    cell: ({ row }) => {
      const { title, description } = row.original;
      return (
        <TitleWithDescription
          title={title}
          description={description}
          wordLimit={20} // Adjust the limit as needed
        />
      );
    },
  },
  {
    accessorKey: "createdAt",
    header: "Date Created",
    cell: ({ row }) => {
      const date = row.original.createdAt;
      return formatDate(date);
    },
  },
  {
    accessorKey: "isPublished",
    header: "Status",
    cell: ({ row }) => {
      const isPublished = row.original.isPublished;
      return (
        <div>
          {isPublished ? (
            <span className="bg-primary py-1 px-3 rounded-[5rem] text-background text-[12px]">
              Published
            </span>
          ) : (
            <span className="text-red-500">Draft</span>
          )}
        </div>
      );
    },
  },
  {
    accessorKey: "numberOfQuestions",
    header: "Questions",
  },
  {
    id: "actions",
    header: "Actions",
    cell: ({ row }) => {
      const quiz = row.original;

      const { open, isOpen, close } = useDisclosure();

      return (
        <DropdownMenu
          open={isOpen}
          onOpenChange={(state) => (state ? open() : close())}
        >
          <DropdownMenuTrigger asChild>
            <Button variant="default" className="h-8 w-8 p-0 rounded">
              <span className="sr-only">Open menu</span>
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="bg-muted">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuItem
              onClick={() =>
                navigator.clipboard.writeText(quiz.id as unknown as string)
              }
            >
              <Copy size={16} /> Copy ID
            </DropdownMenuItem>
            <DropdownMenuSeparator className="bg-background/60" />
            <DropdownMenuItem
              onClick={(e) => {
                e.stopPropagation();
                e.preventDefault();
              }}
            >
              <DeleteQuiz id={quiz.id} />
            </DropdownMenuItem>
            <DropdownMenuSeparator className="bg-background/60" />
            <DropdownMenuItem className="hover:bg-background">
              <Link
                to={`/dashboard/quiz/${quiz.id}`}
                className="w-full h-full flex items-center gap-2"
              >
                <Eye size={16} />
                View
              </Link>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      );
    },
  },
];
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/quiz-properties.tsx">
// src/pages/Dashboard/Pages/Quiz/quizProperties.tsx
import React from "react";
import {
  Calendar,
  Clock,
  Globe,
  Hash,
  List,
  Tag,
  Target,
  Eye,
  EyeOff,
} from "lucide-react";
import formatDate from "@/lib/date-format";
import { QuizSummaryDTO } from "@/types/ApiTypes";

export interface QuizProperty {
  label: string;
  getIcon: (quiz: any) => React.ReactNode;
  getValue: (quiz: any) => React.ReactNode;
}

interface QuizPropertiesProps {
    quiz: QuizSummaryDTO;
  }
  
  export const QuizProperties = ({ quiz }: QuizPropertiesProps) => {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {quizProperties.map((property) => (
          <div key={property.label} className="flex items-center gap-2">
            {property.getIcon(quiz)}
            <span className="font-medium">{property.label}:</span>
            <span>{property.getValue(quiz)}</span>
          </div>
        ))}
      </div>
    );
  };

export const quizProperties: QuizProperty[] = [
  {
    label: "ID",
    getIcon: () => <Hash className="h-5 w-5 text-muted-foreground" />,
    getValue: (quiz) => quiz.id,
  },
  {
    label: "Language",
    getIcon: () => <Globe className="h-5 w-5 text-muted-foreground" />,
    getValue: (quiz) => quiz.language,
  },
  {
    label: "Category",
    getIcon: () => <Tag className="h-5 w-5 text-muted-foreground" />,
    getValue: (quiz) => quiz.category,
  },
  {
    label: "Time Limit",
    getIcon: () => <Clock className="h-5 w-5 text-muted-foreground" />,
    getValue: (quiz) => `${quiz.timeLimit} minutes`,
  },
  {
    label: "Passing Score",
    getIcon: () => <Target className="h-5 w-5 text-muted-foreground" />,
    getValue: (quiz) => `${quiz.passingScore}%`,
  },
  {
    label: "Created At",
    getIcon: () => <Calendar className="h-5 w-5 text-muted-foreground" />,
    getValue: (quiz) => formatDate(quiz.createdAt),
  },
  {
    label: "Published",
    getIcon: (quiz) =>
      quiz.isPublished ? (
        <Eye className="h-5 w-5 text-green-500" />
      ) : (
        <EyeOff className="h-5 w-5 text-red-500" />
      ),
    getValue: (quiz) => (quiz.isPublished ? "Yes" : "No"),
  },
  {
    label: "Number of Questions",
    getIcon: () => <List className="h-5 w-5 text-muted-foreground" />,
    getValue: (quiz) => quiz.numberOfQuestions,
  },
];
</file>

<file path="src/pages/Dashboard/Pages/User/api/get-users.ts">
import { queryOptions, useQuery } from "@tanstack/react-query";

import { api } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";
import { User } from "@/types/ApiTypes";

export const getUsers = (): Promise<User[]> => {
  return api.get(`/users`).then(response => response.data);
};

export const getUsersQueryOptions = () => {
  return queryOptions({
    queryKey: ["users"],
    queryFn: () => getUsers(),
  });
};

type UseUserOptions = {
  queryConfig?: QueryConfig<typeof getUsersQueryOptions>;
};

export const useUserData = ({ queryConfig }: UseUserOptions) => {
  return useQuery({
    ...getUsersQueryOptions(),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/User/Components/create-user.tsx">
import { Plus } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectTrigger,
  SelectContent,
  SelectItem,
  SelectValue,
} from "@/components/ui";
import { Form, FormDrawer, Input } from "@/components/ui/form";
import { useNotifications } from "@/common/Notifications";
import { createUserInputSchema, useCreateUser } from "../api/create-user";
import { LiftedButton } from "@/common/LiftedButton";

const roleOptions = [
  { label: "User" },
  { label: "Admin" },
  { label: "Superadmin" },
];

export const CreateUserForm = () => {
  const { addNotification } = useNotifications();
  const createUserMutation = useCreateUser({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "User Created",
        });
      },
    },
  });

  return (
    <FormDrawer
      isDone={createUserMutation.isSuccess}
      triggerButton={
        <LiftedButton variant="default" className="text-xs">
          <Plus className="w-4 h-4"/> Create User
        </LiftedButton>
      }
      title="Create User"
      submitButton={
        <Button
          form="create-user"
          variant="addSave"
          className="rounded-sm text-white"
          type="submit"
          size="default"
          isPending={createUserMutation.isPending}
          disabled={createUserMutation.isPending}
        >
          Submit
        </Button>
      }
    >
      <Form
        id="create-user"
        className="w-[300px]"
        onSubmit={(values) => {
          const role = values.role || "User";
          createUserMutation.mutate({
            data: { ...values, role: role },
          });
        }}
        schema={createUserInputSchema}
      >
        {({ register, formState, setValue }) => (
          <>
            <Input
              placeholder="Username..."
              label="Username"
              error={formState.errors["username"]}
              registration={register("username")}
            />

            <Input
              placeholder="Email..."
              label="Email"
              type="email"
              error={formState.errors["email"]}
              registration={register("email")}
            />
            <Input
              placeholder="Password..."
              label="Password"
              type="password"
              error={formState.errors["password"]}
              registration={register("password")}
            />

            <div className="flex flex-col space-y-1.5 text-foreground">
              <label htmlFor="role">Role</label>
              <Select onValueChange={(value) => setValue("role", value)}>
                <SelectTrigger id="role" className="border-gray-400">
                  <SelectValue placeholder="--Select Role--" />
                </SelectTrigger>
                <SelectContent className="cursor-pointer">
                  {roleOptions.map((role, index) => (
                    <SelectItem
                      key={index}
                      value={role.label}
                      className="cursor-pointer"
                    >
                      {role.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </>
        )}
      </Form>
    </FormDrawer>
  );
};

export default CreateUserForm;
</file>

<file path="src/pages/Dashboard/Pages/User/Components/delete-user.tsx">
import { Button } from "@/components/ui/button";
import { ConfirmationDialog } from "@/components/ui/dialog";
import { useNotifications } from "@/common/Notifications";
import { useDeleteUser } from "../api/delete-user";
import { UserX } from "lucide-react";

type DeleteUserProps = {
  id: string;
  closeDropDown: () => void;
};

export const DeleteUser = ({ id, closeDropDown }: DeleteUserProps) => {
  const { addNotification } = useNotifications();
  const deleteUserMutation = useDeleteUser({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "User Deleted",
        });
        closeDropDown();
      },
    },
  });

  return (
    <ConfirmationDialog
      isDone={deleteUserMutation.isSuccess}
      icon="danger"
      title="Delete User"
      body="Are you sure you want to delete this user?"
      triggerButton={
        <Button variant="userMenu" className="h-5 font-normal px-0 flex">
          <UserX size={16} /> Delete User
        </Button>
      }
      confirmButton={
        <Button
          isPending={deleteUserMutation.isPending}
          type="button"
          variant="destructive"
          onClick={() => {
            console.log("Deleting user with ID:", id);
            deleteUserMutation.mutate({ userId: id });
          }}
        >
          Delete User
        </Button>
      }
    />
  );
};
</file>

<file path="src/pages/Dashboard/Pages/User/Components/stats-cards.tsx">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Users, Activity, TrendingUp, Calendar } from "lucide-react";
import { cn } from "@/utils/cn";
// import { useTotalUsersData } from "../api/get-total-users";
// import { Spinner } from "@/components/ui";

interface StatsCardsProps {
  className?: string;
}

export function StatsCards({ className }: StatsCardsProps) {
  // const { data, isLoading, isError } = useTotalUsersData({});

  // if (isLoading) {
  //   return (
  //     <div className="flex h-48 w-full items-center justify-center">
  //       <Spinner size="lg" />
  //     </div>
  //   );
  // }

  // if (isError) {
  //   return (
  //     <div className="flex h-48 w-full items-center justify-center">
  //       <p className="text-red-500">
  //         Failed to load users. Please try again later.
  //       </p>
  //     </div>
  //   );
  // }

  return (
    <div className={cn("grid gap-4 md:grid-cols-2 lg:grid-cols-4", className)}>
      <Card className="bg-background border-none">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Total Users</CardTitle>
          <Users className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          {/* <div className="text-2xl font-bold">{data}</div> */}
          <p className="text-xs text-muted-foreground">
            <span className="text-primary font-semibold">+2.5%</span> from last
            month
          </p>
        </CardContent>
      </Card>
      <Card className="bg-background border-none">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Active Today</CardTitle>
          <Activity className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">2,345</div>
          <p className="text-xs text-muted-foreground">
            <span className="text-primary font-semibold">+180</span> from
            yesterday
          </p>
        </CardContent>
      </Card>
      <Card className="bg-background border-none">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">New This Month</CardTitle>
          <TrendingUp className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">573</div>
          <p className="text-xs text-muted-foreground">
            <span className="text-primary font-semibold">+201</span> from last
            month
          </p>
        </CardContent>
      </Card>
      <Card className="bg-background border-none">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">
            Avg. Session Time
          </CardTitle>
          <Calendar className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">24m 13s</div>
          <p className="text-xs text-muted-foreground">
            <span className="text-primary font-semibold">+1m 12s</span> from
            last week
          </p>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/pages/Dashboard/Pages/User/Components/user-page-button-group.tsx">
// Components/UserControls.tsx
import { Input } from "@/components/ui/form";
import { Download, RefreshCw, Search as SearchIcon } from "lucide-react";
import CreateUserForm from "./create-user";
import { LiftedButton } from "@/common/LiftedButton";

interface UserControlsProps {
  searchTerm: string;
  setSearchTerm: (value: string) => void;
  onRefresh: () => void;
}

export const UserControls = ({
  searchTerm,
  setSearchTerm,
  onRefresh,
}: UserControlsProps) => {
  return (
    <div className="flex items-center justify-between my-4">
      <div className="flex items-center space-x-2">
        <Input
          placeholder="Search users..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="max-w-sm"
        />
        <LiftedButton className="rounded text-xs">
          <SearchIcon className="h-4 w-4" />
        </LiftedButton>
      </div>

      <div className="flex items-center space-x-2">
        <CreateUserForm />
        <LiftedButton className="text-xs" onClick={onRefresh}>
          <RefreshCw className="mr-2 h-4 w-4" />
          Refresh
        </LiftedButton>

        <LiftedButton className="text-xs">
          <Download className="mr-2 h-4 w-4" />
          Export
        </LiftedButton>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/User/Users.tsx">
import { useState } from "react";
import { QueryClient } from "@tanstack/react-query";
import { getUsersQueryOptions, useUserData } from "./api/get-users";
import { Spinner } from "@/components/ui/Spinner";
import { columns } from "./Components/columns";
import { DataTable } from "@/components/ui/data-table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { StatsCards } from "./Components/stats-cards";
import { UserControls } from "./Components/user-page-button-group";

export const usersLoader = (queryClient: QueryClient) => async () => {
  const query = getUsersQueryOptions();
  return (
    queryClient.getQueryData(query.queryKey) ??
    (await queryClient.fetchQuery(query))
  );
};

export const Users = () => {
  const usersQuery = useUserData({});
  const [searchTerm, setSearchTerm] = useState("");

  if (usersQuery.isLoading) {
    return (
      <div className="flex h-48 w-full items-center justify-center">
        <Spinner size="lg" />
      </div>
    );
  }

  if (usersQuery.isError) {
    return (
      <div className="flex h-48 w-full items-center justify-center">
        <p className="text-red-500">
          Failed to load users. Please try again later.
        </p>
      </div>
    );
  }

  const users = usersQuery.data;
  console.log(users);

  if (!users) return null;

  const filteredUsers = users.filter(
    (user) =>
      user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.email.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="space-y-4 p-6">
      <StatsCards />
      <Card className="p-5 bg-background border-none rounded-sm">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-2xl font-bold">Users Dashboard</CardTitle>
        </CardHeader>
        <CardContent>
          <UserControls
            searchTerm={searchTerm}
            setSearchTerm={setSearchTerm}
            onRefresh={() => usersQuery.refetch()}
          />
          <DataTable data={filteredUsers} columns={columns} />
        </CardContent>
      </Card>
    </div>
  );
};
</file>

<file path="src/pages/UserRelated/Profile/MyProfile.tsx">
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useUser } from "@/lib/Auth";
import formatDate from "@/lib/date-format";
import { User } from "@/types/ApiTypes";

const MyProfile = () => {
  const Data = useUser();
  const user: User = Data.data;
  console.log(user);

  const initials =
    typeof user.username === "string"
      ? user.username
          .split(" ")
          .map((name: string) => name[0])
          .join("")
          .toUpperCase()
      : "?";

  return (
    <div className="pt-20">
      <Card className="max-w-md mx-auto">
        <CardHeader className="flex flex-row items-center gap-4 pb-2">
          <Avatar className="h-16 w-16">
            <AvatarImage src={user.profileImageUrl} alt={user.username} />
            <AvatarFallback>{initials}</AvatarFallback>
          </Avatar>
          <div className="flex flex-col">
            <CardTitle className="text-xl">{user.username}</CardTitle>
            <Badge variant="outline" className="w-fit mt-1">
              {user.role}
            </Badge>
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="grid grid-cols-3 gap-1 text-sm">
              <span className="font-medium">Email:</span>
              <span className="col-span-2">{user.email}</span>
            </div>

            <div className="grid grid-cols-3 gap-1 text-sm">
              <span className="font-medium">Registered:</span>
              <span className="col-span-2">
                {formatDate(user.dateRegistered)}
              </span>
            </div>

            <div className="grid grid-cols-3 gap-1 text-sm">
              <span className="font-medium">Last login:</span>
              <span className="col-span-2">{formatDate(user.lastLogin)}</span>
            </div>

            <div className="grid grid-cols-3 gap-1 text-sm">
              <span className="font-medium">Last updated:</span>
              <span className="col-span-2">
                {formatDate(user.userUpdatedAt)}
              </span>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
export default MyProfile;
</file>

<file path="src/pages/UserRelated/Profile/ProfileWrapper.tsx">
import { HomeLayout } from "@/layouts/layout";
import MyProfile from "./MyProfile";
export const ProfileWrapper = () => {
  return <HomeLayout children={<MyProfile />} />;
};
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sw?

.env

#backend 

/OxygenBackend/QuizAPI/Program.cs
/OxygenBackend/QuizAPI/appsettings.json
/OxygenBackend/QuizAPI/appsettings.Developement.json
/OxygenBackend/QuizAPI/obj
/OxygenBackend/QuizAPI/bin
/OxygenBackend/QuizAPI/.vs





*storybook.log
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Image/Services/IImageService.cs">
namespace QuizAPI.Controllers.Image.Services
{
    public interface IImageService
    {
        Task<string> SaveImageAsync(Stream imageStream, string fileName, string format);
        Task<bool> AssociateImageWithEntityAsync(string imageUrl, string entityType, int entityId);

        Task DeleteAssociatedImageAsync(string imageUrl, string entityType, int entityId);
        Task<int> CleanUpUnusedImagesAsync();
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Image/Services/ImageService.cs">
using Microsoft.EntityFrameworkCore;
using QuizAPI.Data;
using QuizAPI.Models;

namespace QuizAPI.Controllers.Image.Services
{
    public class ImageService : IImageService
    {
        private readonly ApplicationDbContext _dbContext;
        private readonly IWebHostEnvironment _env;
        private readonly ILogger<ImageService> _logger;

        public ImageService(
            ApplicationDbContext dbContext,
            IWebHostEnvironment env,
            ILogger<ImageService> logger)
        {
            _dbContext = dbContext;
            _env = env;
            _logger = logger;
        }

        public async Task<string> SaveImageAsync(Stream imageStream, string fileName, string format)
        {
            // Generate unique filename
            var uniqueFileName = $"{Guid.NewGuid()}.{format.ToLowerInvariant()}";
            var filePath = Path.Combine(_env.WebRootPath, "uploads", uniqueFileName);

            // Ensure directory exists
            var directory = Path.GetDirectoryName(filePath);
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }

            // Save the file
            await using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await imageStream.CopyToAsync(fileStream);
            }

            // Record in database
            var imageAsset = new ImageAsset
            {
                FileName = uniqueFileName,
                OriginalFileName = fileName,
                FileFormat = format,
                FilePath = filePath,
                IsUsed = false,
                CreatedDate = DateTime.UtcNow
            };

            _dbContext.ImageAssets.Add(imageAsset);
            await _dbContext.SaveChangesAsync();

            // Generate URL
            var baseUrl = ""; // This will be filled from request context in the controller
            return $"{baseUrl}/uploads/{uniqueFileName}";
        }

        public async Task<bool> AssociateImageWithEntityAsync(string imageUrl, string entityType, int entityId)
        {
            // Extract filename from URL
            var fileName = Path.GetFileName(imageUrl);

            // Find image in database
            var image = await _dbContext.ImageAssets
                .FirstOrDefaultAsync(img => img.FileName == fileName);

            if (image == null)
            {
                _logger.LogWarning($"Attempted to associate non-existent image: {fileName}");
                return false;
            }

            // Update image record
            image.IsUsed = true;
            image.EntityType = entityType;
            image.EntityId = entityId;
            image.LastModifiedDate = DateTime.UtcNow;

            await _dbContext.SaveChangesAsync();
            return true;
        }

        public async Task DeleteAssociatedImageAsync(string imageUrl, string entityType, int entityId)
        {
            try
            {
                // Extract the filename from the URL
                var fileName = Path.GetFileName(new Uri(imageUrl).AbsolutePath);

                // Find the image asset
                var imageAsset = await _dbContext.ImageAssets
                    .FirstOrDefaultAsync(img => img.FileName == fileName &&
                                              img.EntityType == entityType &&
                                              img.EntityId == entityId);

                if (imageAsset != null)
                {
                    // Delete the physical file
                    var filePath = Path.Combine(_env.WebRootPath, "uploads", fileName);
                    if (File.Exists(filePath))
                    {
                        File.Delete(filePath);
                    }

                    // Remove the database record
                    _dbContext.ImageAssets.Remove(imageAsset);
                    // Note: We don't SaveChanges here as it will be handled in the calling method
                }
            }
            catch (Exception ex)
            {
                // Log the error but don't fail the question deletion
                _logger.LogError(ex, $"Error deleting image for question {entityId}");
            }
        }

        public async Task<int> CleanUpUnusedImagesAsync()
        {
            // Find images that are unused and older than 24 hours
            var cutoffTime = DateTime.UtcNow.AddHours(-24);
            var unusedImages = await _dbContext.ImageAssets
                .Where(img => !img.IsUsed && img.CreatedDate < cutoffTime)
                .ToListAsync();

            if (!unusedImages.Any())
            {
                _logger.LogInformation("No unused images found to clean up");
                return 0;
            }

            int deletedCount = 0;

            foreach (var image in unusedImages)
            {
                try
                {
                    // Delete physical file
                    var filePath = Path.Combine(_env.WebRootPath, "uploads", image.FileName);
                    if (File.Exists(filePath))
                    {
                        File.Delete(filePath);
                        deletedCount++;
                    }

                    // Remove from database
                    _dbContext.ImageAssets.Remove(image);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, $"Error deleting image {image.FileName}");
                }
            }

            await _dbContext.SaveChangesAsync();
            _logger.LogInformation($"Cleaned up {deletedCount} unused images");

            return deletedCount;
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/Questions/AnswerOption.cs">
using System.Text.Json.Serialization;

namespace QuizAPI.Models
{

    public class AnswerOption
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public bool IsCorrect { get; set; }
        public int QuestionId { get; set; }

        [JsonIgnore]
        public MultipleChoiceQuestion Question { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Services/AuthenticationService.cs">
using Microsoft.CodeAnalysis.Scripting;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using QuizAPI.Data;
using QuizAPI.DTOs.User;
using QuizAPI.Models;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace QuizAPI.Services
{
    public interface IAuthenticationService
    {
        Task<AuthResult> SignupAsync(string email, string username, string password);
        Task<AuthResult> LoginAsync(string email, string password);
    }

    public class AuthenticationService : IAuthenticationService
    {
        private readonly ApplicationDbContext _context;
        private readonly IConfiguration _configuration;

        public AuthenticationService(ApplicationDbContext context, IConfiguration configuration)
        {
            _context = context;
            _configuration = configuration;
        }

        public async Task<AuthResult> SignupAsync(string email, string username, string password)
        {
            // Check if the user already exists
            var existingUser = await _context.Users.SingleOrDefaultAsync(u => u.Email == email);
            if (existingUser != null)
            {
                return new AuthResult { Success = false, Message = "Email is already in use." };
            }

            // Create a new user
            var user = new User
            {
                Id = Guid.NewGuid(),
                Email = email,
                Username = username,
                PasswordHash = BCrypt.Net.BCrypt.HashPassword(password),
                DateRegistered = DateTime.UtcNow,
                LastLogin = DateTime.UtcNow,
                RoleId = 2, 
                IsDeleted = false,
                ImmutableName = username.ToLower(), // Immutable Name
                ProfileImageUrl = string.Empty
            };

            _context.Users.Add(user);
            await _context.SaveChangesAsync();

            // Generate JWT token
            var token = GenerateJwtToken(user);
            return new AuthResult { Success = true, Token = token };
        }

        public async Task<AuthResult> LoginAsync(string email, string password)
        {
            // Check if the user exists
            var user = await _context.Users.SingleOrDefaultAsync(u => u.Email == email && !u.IsDeleted);
            if (user == null || !BCrypt.Net.BCrypt.Verify(password, user.PasswordHash))
            {
                return new AuthResult { Success = false, Message = "Invalid credentials." };
            }

            var role = await _context.Roles.SingleOrDefaultAsync(r => r.Id == user.RoleId);
            if(role == null)
            {
                return new AuthResult { Success = false, Message = "Invalid credentials." };
            }

            var userDTO = new FullUserDTO
            {
                Id = user.Id,
                Email = email,
                ProfileImageUrl = user.ProfileImageUrl,
                DateRegistered = user.DateRegistered,
                ImmutableName = user.ImmutableName,
                LastLogin = user.LastLogin,
                Username = user.Username,
                Role = role.Name,
            };

            // Update last login
            user.LastLogin = DateTime.UtcNow;
            await _context.SaveChangesAsync();

            // Generate JWT token
            var token = GenerateJwtToken(user);
            return new AuthResult { Success = true, Token = token, User = userDTO, Message="Successfully logged in!" };
        }

        private string GenerateJwtToken(User user)
        {
            var claims = new[]
            {
                new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                new Claim("Username", user.Username),
                new Claim(ClaimTypes.Role, user.Role.Name),
            };

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: _configuration["Jwt:Issuer"],
                audience: _configuration["Jwt:Audience"],
                claims: claims,
                expires: DateTime.UtcNow.AddHours(1),
                signingCredentials: creds);

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }

    public class AuthResult
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public FullUserDTO User { get; set; }
        public string Token { get; set; }
    }
}
</file>

<file path="src/common/custom-checkbox.tsx">
import React from "react";

type CustomCheckboxProps = {
  checked: boolean;
  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
  disabled : boolean;
};

export const CustomCheckbox: React.FC<CustomCheckboxProps> = ({
  checked,
  onChange,
  disabled,
}) => {
  return (
    <>
      <input
        type="checkbox"
        id="custom-checkbox"
        checked={checked}
        onChange={onChange}
        disabled={disabled}
        className="hidden peer"
      />
      <label
        htmlFor="custom-checkbox"
        className="relative flex items-center justify-center w-7 h-7 cursor-pointer rounded-md
          bg-background border border-border
          shadow-[0_4px_6px_rgba(0,0,0,0.1)]
          transition-all duration-200
          hover:shadow-[0_6px_8px_rgba(0,0,0,0.15)]
          active:shadow-[inset_0_3px_0_rgba(0,0,0,0.2)]
          peer-checked:bg-primary peer-checked:border-transparent
          peer-checked:shadow-[inset_0_2px_0_rgba(0,0,0,0.15)]"
      >
        {checked && (
          <svg
            className="w-6 h-6 text-primary-foreground"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
          >
            <polyline
              points="20 6 9 17 4 12"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
        )}
      </label>
    </>
  );
};
</file>

<file path="src/components/ui/form/textarea.tsx">
import * as React from "react";
import { UseFormRegisterReturn } from "react-hook-form";

import { cn } from "@/utils/cn";

import { FieldWrapper, FieldWrapperPassThroughProps } from "./field-wrapper";

export type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> &
  FieldWrapperPassThroughProps & {
    className?: string;
    registration?: Partial<UseFormRegisterReturn>;
    variant?: "default" | "quiz" | "isCorrect" | "isIncorrect";
  };
const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  (
    { className, label, error, registration, variant = "default", ...props },
    ref
  ) => {
    return (
      <FieldWrapper label={label} error={error}>
        <textarea
          className={cn(
            // Base styles (common to all variants)
            "flex w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 transition-colors",
            variant === "default" && ["min-h-[60px]"],
            variant === "quiz" && [
              "min-h-[60px] bg-gradient-to-r from-primary/10 to-primary/5 border-2 border-primary/60 text-foreground font-medium rounded-xl shadow-[0_4px_0_0_hsl(var(--primary)/0.7)] hover:shadow-[0_2px_0_0_hsl(var(--primary)/0.5)] hover:translate-y-1 active:translate-y-2 active:shadow-none transform transition-all duration-200 focus-visible:ring-primary focus-visible:ring-offset-background dark:bg-gradient-to-r dark:from-primary/30 dark:to-primary/10 placeholder:text-center placeholder:text-lg focus:placeholder:opacity-0 text-center text-lg sm:text-xl md:text-xl px-4 py-2",
            ],
            variant === "isCorrect" && [
              "min-h-[60px] bg-gradient-to-r from-green-500/10 to-green-500/5 border-2 border-green-500 text-foreground font-medium rounded-xl shadow-[0_4px_0_0_rgba(0,200,80,0.7)] hover:shadow-[0_2px_0_0_hsl(var(--green-500)/0.5)] hover:translate-y-1 active:translate-y-2 active:shadow-none transform transition-all duration-200 focus-visible:ring-green-500 focus-visible:ring-offset-background dark:bg-gradient-to-r dark:from-green-500/40 dark:to-green-500/10 placeholder:text-center placeholder:text-lg focus:placeholder:opacity-0 text-center text-lg sm:text-xl md:text-xl px-4 py-2",
            ],
            variant === "isIncorrect" && [
              "min-h-[60px] bg-gradient-to-r from-red-500/10 to-red-500/5 border-2 border-red-500/30 text-foreground font-medium rounded-xl shadow-[0_4px_0_0_rgba(220,38,38,0.5)] hover:shadow-[0_2px_0_0_rgba(220,38,38,0.5)] hover:translate-y-1 active:translate-y-2 active:shadow-none transform transition-all duration-200 focus-visible:ring-red-500/50 focus-visible:ring-offset-background dark:bg-gradient-to-r dark:from-red-500/20 dark:to-red-500/10 placeholder:text-center placeholder:text-lg focus:placeholder:opacity-0 text-center text-lg sm:text-xl md:text-xl px-4 py-2",
            ],
            className
          )}
          ref={ref}
          {...props}
          {...registration}
        />
      </FieldWrapper>
    );
  }
);
Textarea.displayName = "Textarea";

export { Textarea };
</file>

<file path="src/global.css">
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  overflow: hidden;
  font-family: sans-serif;
  color: hsl(var(--foreground));
  background-color: hsl(var(--background))
}

body {
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  background-attachment: fixed;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --foreground-lighter: 222.2 60% 20%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 230 50% 93.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.3rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    
  }
 
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --foreground-lighter: 210 30% 85%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

.custom-button {
  z-index: 1;
  position: relative;
}

.custom-button::before {
  content: '';
  z-index: -1;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: var(--foreground);
  transform-origin: center bottom;
  transform: scaleY(0);
  transition: transform 0.25s ease-in-out;
}

.custom-button:hover {
  cursor: pointer;
}

.custom-button:hover::before {
  transform-origin: center top;
  transform: scaleY(1);
}

.fancy-button {
  display: flex;
  /* padding: 28px 28px; */
  align-items: center;
  justify-content: center;
  margin: 10px;
  font-weight: bold;
  text-transform: uppercase;
  color: #fff;
  background-image: linear-gradient(to bottom right, #00c6ff, #0072ff);
  border: none;
  border-radius: 40px;
  box-shadow: 0px 4px 0px #0072ff;
  transition: all 0.2s ease-in-out;
  cursor: pointer;
}

.fancy-button:hover {
  transform: translateY(-2px);
  box-shadow: 0px 6px 0px #0072ff;
}

.fancy-button:active {
  transform: translateY(0px);
  box-shadow: none;
  background-image: linear-gradient(to bottom right, #0072ff, #00c6ff);
}

.fancy-button:before,
.fancy-button:after {
  content: "";
  position: absolute;
  width: 0;
  height: 0;
}

.fancy-button:before {
  top: -3px;
  left: -3px;
  border-radius: 40px;
  border-top: 3px solid #fff;
  border-left: 3px solid #fff;
}

.fancy-button:after {
  bottom: -3px;
  right: -3px;
  border-radius: 40px;
  border-bottom: 3px solid #fff;
  border-right: 3px solid #fff;
}


.lift-button {
  --button_radius: 0.75em;
  --button_color: #e8e8e8;
  --button_outline_color: #000000;
  font-size: 17px;
  font-weight: bold;
  border: none;
  cursor: pointer;
  border-radius: var(--button_radius);
  background: var(--button_outline_color);
}

.lift-button > .button_top {
  display: block;
  box-sizing: border-box;
  border: 2px solid var(--button_outline_color);
  border-radius: var(--button_radius);
  padding: 0.75em 1.5em;
  background: var(--button_color);
  color: var(--button_outline_color);
  transform: translateY(-0.2em);
  transition: transform 0.1s ease;
}

.lift-button:hover > .button_top {
  transform: translateY(-0.3em);
}

.lift-button:active > .button_top {
  transform: translateY(-0.6em);
}
</file>

<file path="src/layouts/layout.tsx">
import Squares from "@/common/Effect-Related/background-squares";
import Header from "@/common/Header";
import { useTheme } from "@/components/ui";

interface LayoutProps {
  children: React.ReactNode;
  headerColor?: boolean;
  squares?: boolean;
}

export const HomeLayout = ({
  children,
  squares = false,
  headerColor = true,
}: LayoutProps) => {
  const { theme } = useTheme();
  const colors = {
    borderColor: theme === "dark" ? "#626262" : "#b4b4b4",
    hoverFillColor: theme === "dark" ? "#ffffff" : "#000000",
  };


  return (
    <>
      <Header BackgroundColor={headerColor} />
      <div
        className={`bg-background h-screen text-foreground ${
          squares ? "overflow-hidden" : "overflow-y-auto"
        }`}
      >
        {squares && (
          <Squares
            speed={0.5}
            squareSize={40}
            direction="diagonal" // up, down, left, right, diagonal
            borderColor={colors.borderColor}
            hoverFillColor={colors.hoverFillColor}
          />
        )}
        {children}
      </div>
    </>
  );
};
</file>

<file path="src/lib/Api-client.ts">
import Axios, { InternalAxiosRequestConfig, AxiosResponse } from 'axios';
import Cookies from 'js-cookie';
import { AUTH_COOKIE } from './authHelpers';
import { useNotifications } from '@/common/Notifications';

function authRequestInterceptor(config: InternalAxiosRequestConfig) {
  if (config.headers) {
    config.headers.Accept = 'application/json';

    // Retrieve the token from the cookie
    const token = Cookies.get(AUTH_COOKIE);
    if (token) {
      // Attach the token to the Authorization header
      config.headers['Authorization'] = `Bearer ${token}`;
    }
  }

  config.withCredentials = true;
  return config;
}

export const api = Axios.create({
  baseURL: "https://localhost:7153/api/",
});

api.interceptors.request.use(authRequestInterceptor);
api.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    const status = error.response?.status;
    const message = error.response?.data?.message || error.message;

    if (status === 401) {
      console.log('Unauthorized:', error);
      Cookies.remove(AUTH_COOKIE);
    } else {
      // Only add a notification for non-401 errors
      useNotifications.getState().addNotification({
        type: 'error',
        title: 'Error',
        message,//change this when deployed
      });
    }

    return Promise.reject(error);
  }
);

// Enhanced API with helper methods
export const apiService = {
  // Basic data-only methods (for backward compatibility)
  async get<T = any>(url: string, config = {}): Promise<T> {
    const response = await api.get<T>(url, config);
    return response.data;
  },
  
  async post<T = any>(url: string, data?: any, config = {}): Promise<T> {
    const response = await api.post<T>(url, data, config);
    return response.data;
  },
  
  async put<T = any>(url: string, data?: any, config = {}): Promise<T> {
    const response = await api.put<T>(url, data, config);
    return response.data;
  },
  
  async delete<T = any>(url: string, config = {}): Promise<T> {
    const response = await api.delete<T>(url, config);
    return response.data;
  },
  
  // Full response methods (when you need headers or other response data)
  async getWithMeta<T = any>(url: string, config = {}): Promise<AxiosResponse<T>> {
    return api.get<T>(url, config);
  },
  
  async postWithMeta<T = any>(url: string, data?: any, config = {}): Promise<AxiosResponse<T>> {
    return api.post<T>(url, data, config);
  },
  
  async putWithMeta<T = any>(url: string, data?: any, config = {}): Promise<AxiosResponse<T>> {
    return api.put<T>(url, data, config);
  },
  
  async deleteWithMeta<T = any>(url: string, config = {}): Promise<AxiosResponse<T>> {
    return api.delete<T>(url, config);
  }
};
</file>

<file path="src/lib/Auth.tsx">
import { configureAuth } from "react-query-auth";
import { Link, Navigate, useLocation } from "react-router-dom";
import { z } from "zod";
import { api, apiService } from "./Api-client";
import { AuthResponse, User } from "@/types/ApiTypes";
import Cookies from "js-cookie";
import { AUTH_COOKIE } from "./authHelpers";
import { AlertCircle } from "lucide-react";
import { LiftedButton } from "@/common/LiftedButton";

const getUser = async (): Promise<User | null> => {
  try {
    const user: User = (await api.get("Authentication/me")).data; // No need for `response.data` here
    if (!user) {
      return null;
    }
    return user; // Since `user` is already the data returned from the backend
  } catch (error: any) {
    if (error.response?.status === 401) {
      return null;
    }
    throw error;
  }
};

const logout = (): Promise<void> => {
  return new Promise((resolve) => {
    Cookies.remove(AUTH_COOKIE);
    window.location.href = "/";
    resolve();
  });
};

export const loginInputSchema = z.object({
  email: z.string().min(1, "Required").email("Invalid email"),
  password: z.string().min(5, "Required"),
});

export type LoginInput = z.infer<typeof loginInputSchema>;
const loginWithEmailAndPassword = (data: LoginInput): Promise<AuthResponse> => {
  return apiService.post("Authentication/login", data);
};

export const registerInputSchema = z
  .object({
    email: z.string().min(1, "Required"),
    firstName: z.string().min(1, "Required"),
    lastName: z.string().min(1, "Required"),
    password: z.string().min(1, "Required"),
  })
  .and(
    z
      .object({
        teamId: z.string().min(1, "Required"),
        teamName: z.null().default(null),
      })
      .or(
        z.object({
          teamName: z.string().min(1, "Required"),
          teamId: z.null().default(null),
        })
      )
  );

export type RegisterInput = z.infer<typeof registerInputSchema>;

const registerWithEmailAndPassword = (
  data: RegisterInput
): Promise<AuthResponse> => {
  return api.post("/auth/register", data);
};

// Configure auth with react-query-auth
const authConfig = {
  userFn: getUser,
  loginFn: async (data: LoginInput): Promise<User> => {
    const response = await loginWithEmailAndPassword(data);
    if (!response || !response.token) {
      throw new Error("Authentication failed: Token not received");
    }
    Cookies.set(AUTH_COOKIE, response.token, {
      secure: true, // Use HTTPS
      sameSite: "strict", // CSRF protection
      expires: 1, // Token expiration in days
    });
    return response.user;
  },
  registerFn: async (data: RegisterInput) => {
    const response = await registerWithEmailAndPassword(data);
    return response.user;
  },
  logoutFn: logout,
};

export const { useUser, useLogin, useLogout, useRegister, AuthLoader } =
  configureAuth(authConfig);

export const ProtectedRoute = ({ children }: { children: React.ReactNode }) => {
  const user = useUser();
  const location = useLocation();

  if (!user.data) {
    return (
      <Navigate
        to={`/login?redirectTo=${encodeURIComponent(location.pathname)}`}
        replace
      />
    );
  }

  return <>{children}</>;
};

export const AdminRoute = ({ children }: { children: React.ReactNode }) => {
  const user = useUser();
  const location = useLocation();

  if (!user.data) {
    return (
      <Navigate
        to={`/login?redirectTo=${encodeURIComponent(location.pathname)}`}
        replace
      />
    );
  }
  if (!(user.data.role === "Admin" || user.data.role === "SuperAdmin")) {
    return (
      <div className="h-screen w-full flex items-center justify-center bg-background">
        <div className="max-w-sm w-full text-center bg-muted shadow-lg rounded-lg p-6">
          <div className="flex flex-col items-center">
            <AlertCircle className="text-red-500 w-12 h-12" />
            <h2 className="mt-4 text-2xl font-semibold text-foreground ">
              Access Denied
            </h2>
            <p className="mt-2 text-foreground">
              You do not have the necessary permissions to view this page.
            </p>
          </div>
          <div className="mt-4">
            <LiftedButton className="rounded">
              <Link to="/">Go back to Home Page</Link>
            </LiftedButton>
          </div>
        </div>
      </div>
    );
  }

  return <>{children}</>;
};
</file>

<file path="src/lib/authorization.tsx">
import * as React from "react";

import { User, MultipleChoiceQuestion } from "@/types/ApiTypes";

import { useUser } from "@/lib/Auth";

export enum ROLES {
  Admin = "Admin",
  SuperAdmin = "SuperAdmin",
  User = "User",
}

type RoleTypes = keyof typeof ROLES;

export const POLICIES = {
  "comment:delete": (user: User, question: MultipleChoiceQuestion) => {
    if (user.role === "Admin") {
      return true;
    }

    if (user.role === "User" && question.user.id === user.id) {
      return true;
    }

    return false;
  },
};

export const useAuthorization = () => {
  const user = useUser();

  if (!user.data) {
    throw Error("User does not exist!");
  }

  const checkAccess = React.useCallback(
    ({ allowedRoles }: { allowedRoles: RoleTypes[] }) => {
      if (allowedRoles && allowedRoles.length > 0 && user.data) {
        // console.log(allowedRoles?.includes(user.data.role));

        return allowedRoles?.includes(user.data.role);
      }

      return true;
    },
    [user.data]
  );

  return { checkAccess, role: user.data.role };
};

type AuthorizationProps = {
  forbiddenFallback?: React.ReactNode;
  children: React.ReactNode;
} & (
  | {
      allowedRoles: RoleTypes[];
      policyCheck?: never;
    }
  | {
      allowedRoles?: never;
      policyCheck: boolean;
    }
);

export const Authorization = ({
  policyCheck,
  allowedRoles,
  forbiddenFallback = null,
  children,
}: AuthorizationProps) => {
  const { checkAccess } = useAuthorization();

  let canAccess = false;

  if (allowedRoles) {
    canAccess = checkAccess({ allowedRoles });
  }

  if (typeof policyCheck !== "undefined") {
    canAccess = policyCheck;
  }

  return <>{canAccess ? children : forbiddenFallback}</>;
};
</file>

<file path="src/lib/pagination-query.ts">
import { AxiosResponse } from "axios";
import { Pagination } from "@/types/ApiTypes";

export function extractPaginationFromHeaders(
  response: AxiosResponse
): Pagination | null {
  const raw = response.headers["pagination"];
  if (!raw || typeof raw !== "string") return null;

  try {
    const p = JSON.parse(raw);
    if (
      typeof p.currentPage === "number" &&
      typeof p.itemsPerPage === "number" &&
      typeof p.totalItems === "number" &&
      typeof p.totalPages === "number" &&
      typeof p.hasPreviousPage === "boolean" &&
      typeof p.hasNextPage === "boolean"
    ) {
      return p;
    }
  } catch {
    // ignore parse errors
    console.error("Failed to parse pagination header", raw);
  }
  return null;
}

export function cleanQueryParams(
  params: Record<string, any> = {}
): Record<string, string> {
  return Object.fromEntries(
    Object.entries(params)
      .filter(([, v]) => v != null)
      .map(([k, v]) => [k, String(v)])
  );
}
</file>

<file path="src/pages/Dashboard/Pages/Application/Application.tsx">
// import { useDrejtimiData } from "../Ushtrime/api/get-drejtimi";
// import { useUniversityData } from "../Ushtrime/api/get-universities";
// import { CreateDrejtimiForm } from "../Ushtrime/comp/create-drejtimi";
// import { CreateUniversityForm } from "../Ushtrime/comp/create-university";
// import { DeleteDrejtimi } from "../Ushtrime/comp/delete-drejtimi";
// import { DeleteUniversity } from "../Ushtrime/comp/delete-university";
// import { UpdateUniversityForm } from "../Ushtrime/comp/update-university";

export const Application = () => {
  // const Universities = useUniversityData({});
  // const contracts = useDrejtimiData({});

  return (
    <div className="p-4 space-y-8">
      {/* Universities Table */}
      {/* <div>
        <h2 className="text-xl font-bold mb-2">Universities</h2>
        {Universities.isLoading ? (
          <p>Loading Universities...</p>
        ) : (
          <table className="min-w-full border-collapse border border-gray-300">
            <thead>
              <tr>
                <th className="border border-gray-300 px-4 py-2">Name</th>
                <th className="border border-gray-300 px-4 py-2">City</th>
                <th className="border border-gray-300 px-4 py-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {Universities.data?.map((university) => (
                <tr key={university.id || university.name}>
                  <td className="border border-gray-300 px-4 py-2">
                    {university.name}
                  </td>
                  <td className="border border-gray-300 px-4 py-2">
                    {university.city}
                  </td>
                  <td>
                    <UpdateUniversityForm
                      universityId={university.id}
                      university={university}
                    />
                    <DeleteUniversity id={university.id} />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>

      <div>
        <h2 className="text-xl font-bold mb-2">Drejtimi</h2>
        {contracts.isLoading ? (
          <p>Loading drejtimet...</p>
        ) : (
          <table className="min-w-full border-collapse border border-gray-300">
            <thead>
              <tr>
                <th className="border border-gray-300 px-4 py-2">Name</th>
                <th className="border border-gray-300 px-4 py-2">Duration</th>
                <th className="border border-gray-300 px-4 py-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {contracts.data?.map((contract) => (
                <tr key={contract.id}>
                  <td className="border border-gray-300 px-4 py-2">
                    {contract.name}
                  </td>
                  <td className="border border-gray-300 px-4 py-2">
                    {contract.duration}
                  </td>
                  <td className="border border-gray-300 px-4 py-2">
                    <DeleteDrejtimi id={contract.id} />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div> */}

      {/* Forms Section */}
      {/* <div className="space-y-4">
        <CreateUniversityForm />
        <CreateDrejtimiForm />
      </div> */}
    </div>
  );
};

export default Application;
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/Re-Usable-Components/constants.ts">
import { QuestionType } from "@/types/ApiTypes";
import { NewMultipleChoiceQuestion, NewTrueFalseQuestion, NewTypeTheAnswerQuestion } from "../../../Quiz/components/Create-Quiz-Form/types";

export const UnspecifiedIds = {
    categoryId:    2042,   
    difficultyId:  21,  
    languageId:    4,  
  } as const;   

  export const POINT_SYSTEM_OPTIONS = [
  { value: "Standard", label: "Standard " },
  { value: "Double", label: "Double" },
  { value: "Quadruple", label: "Quadruple" },
  // { value: "Custom", label: "Custom" }, Should add in the future
] as const;

export const TIME_LIMIT_OPTIONS = [
  { value: 5, label: "5 seconds" },
  { value: 10, label: "10 seconds" },
  { value: 15, label: "15 seconds" },
  { value: 30, label: "30 seconds" },
  { value: 60, label: "1 minute" },
  { value: 120, label: "2 minutes" },
] as const;

export const DEFAULT_NEW_MULTIPLE_CHOICE: NewMultipleChoiceQuestion = {
  id: -1,
  text: "",
  visibility: "Private",
  difficultyId: UnspecifiedIds.difficultyId,
  categoryId: UnspecifiedIds.categoryId,
  languageId: UnspecifiedIds.languageId,
  imageUrl: "",
  type: QuestionType.MultipleChoice,
  answerOptions: [
    { id: -1, text: "", isCorrect: false },
    { id: -2, text: "", isCorrect: false },
    { id: -3, text: "", isCorrect: false },
    { id: -4, text: "", isCorrect: false },
  ],
  allowMultipleSelections: false,
};

export const DEFAULT_NEW_TRUE_FALSE: NewTrueFalseQuestion = {
  id: -2,
  text: "",
  visibility: "Private",
difficultyId: UnspecifiedIds.difficultyId,
  categoryId: UnspecifiedIds.categoryId,
  languageId: UnspecifiedIds.languageId,
  imageUrl: "",
  type: QuestionType.TrueFalse,
  correctAnswer: true,
};

export const DEFAULT_NEW_TYPE_ANSWER: NewTypeTheAnswerQuestion = {
  id: -3,
  text: "",
  visibility: "Private",
  difficultyId: UnspecifiedIds.difficultyId,
  categoryId: UnspecifiedIds.categoryId,
  languageId: UnspecifiedIds.languageId,
  imageUrl: "",
  type: QuestionType.TypeTheAnswer,
  correctAnswer: "",
  isCaseSensitive: false,
  allowPartialMatch: false,
  acceptableAnswers: [],
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/True_Flase-Question/true-false-question-list.tsx">
import { TrueFalseQuestion } from "@/types/ApiTypes";
import { TrueFalseQuestionCard } from "./true-false-question-card";
import CreateTrueFalseQuestionForm from "./create-true_false-questions";
import { useQuestionCategoryData } from "../../Entities/Categories/api/get-question-categories";
import { useQuestionDifficultyData } from "../../Entities/Difficulty/api/get-question-difficulties";
import { useQuestionLanguageData } from "../../Entities/Language/api/get-question-language";

interface TrueFalseQuestionListProps {
  questions: TrueFalseQuestion[];
}

export const TrueFalseQuestionList = ({
  questions,
}: TrueFalseQuestionListProps) => {
  const categoriesQuery = useQuestionCategoryData({});
  const difficultiesQuery = useQuestionDifficultyData({});
  const languagesQuery = useQuestionLanguageData({});

  if (questions.length === 0) {
    return (
      <p className="text-center text-muted-foreground py-8">
        No true/false questions found matching your criteria.
        <br />
        Add some questions to get started!
        <p className="mt-4">
          <CreateTrueFalseQuestionForm
            languages={languagesQuery.data || []}
            categories={categoriesQuery.data || []}
            difficulties={difficultiesQuery.data || []}
            title="+ Add New"
          />
        </p>
      </p>
    );
  }

  return (
    <div className="space-y-4">
      {questions.map((question) => (
        <TrueFalseQuestionCard key={question.id} question={question} />
      ))}
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/Type_The_Answer-Question/type-the-asnwer-list.tsx">
import { TypeTheAnswerQuestion } from "@/types/ApiTypes";
import { TypeTheAnswerQuestionCard } from "./type-the-asnwer-question-card";
import { useQuestionCategoryData } from "../../Entities/Categories/api/get-question-categories";
import { useQuestionDifficultyData } from "../../Entities/Difficulty/api/get-question-difficulties";
import { useQuestionLanguageData } from "../../Entities/Language/api/get-question-language";
import CreateTypeAnswerQuestionForm from "./create-type-the-answer-question";

interface TypeTheAnswerQuestionListProps {
  questions: TypeTheAnswerQuestion[];
}

export const TypeTheAnswerQuestionList = ({
  questions,
}: TypeTheAnswerQuestionListProps) => {
  const categoriesQuery = useQuestionCategoryData({});
  const difficultiesQuery = useQuestionDifficultyData({});
  const languagesQuery = useQuestionLanguageData({});

  if (questions.length === 0) {
    return (
      <p className="text-center text-muted-foreground py-8">
        No "Type the Answer" questions found matching your criteria. <br />
        Add some questions to get started!
        <p className="mt-4">
          <CreateTypeAnswerQuestionForm
            languages={languagesQuery.data || []}
            categories={categoriesQuery.data || []}
            difficulties={difficultiesQuery.data || []}
            title="+ Add New"
          />
        </p>
      </p>
    );
  }

  return (
    <div className="space-y-4">
      {questions.map((question) => (
        <TypeTheAnswerQuestionCard key={question.id} question={question} />
      ))}
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Difficulty/Components/columns.tsx">
import { ColumnDef } from "@tanstack/react-table";
import { QuestionDifficulty } from "@/types/ApiTypes";
import { Edit } from "lucide-react";
import { DeleteQuestionDifficulty } from "./delete-question-difficulty";
import formatDate from "@/lib/date-format";
import { Authorization } from "@/lib/authorization";
import { LiftedButton } from "@/common/LiftedButton";

export const difficultyColumns: ColumnDef<QuestionDifficulty>[] = [
  {
    accessorKey: "id",
    header: "Id",
  },
  {
    accessorKey: "level",
    header: "Difficulty",
  },
  {
    accessorKey: "createdAt",
    header: "Created At",
    cell: ({ row }) => formatDate(row.original.createdAt),
  },
  {
    accessorKey: "username",
    header: "Created By",
  },
  {
    accessorKey: "weight",
    header: "Weight",
  },
  {
    cell: ({ row }) => {
      const difficulty = row.original;
      return (
        <div className="flex items-center space-x-2">
          <Authorization allowedRoles={["SuperAdmin"]}>
            <LiftedButton variant="icon">
              <Edit size={16} />
            </LiftedButton>
            <DeleteQuestionDifficulty id={difficulty.id} />
          </Authorization>
        </div>
      );
    },
    header: "Actions",
  },
];
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Language/api/get-question-language.ts">
import { queryOptions, useQuery } from "@tanstack/react-query";
import { apiService } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";
import { QuestionLanguage } from "@/types/ApiTypes";

export const getQuestionLanguages = (): Promise<QuestionLanguage[]> => {
  return apiService.get(`/questionLanguages`);
};

export const getQuestionLanguageQueryOptions = () => {
  return queryOptions({
    queryKey: ["getQuestionLanguages"],
    queryFn: () => getQuestionLanguages(),
  });
};

type UseQuestionLanguageOptions = {
  queryConfig?: QueryConfig<typeof getQuestionLanguageQueryOptions>;
};

export const useQuestionLanguageData = ({ queryConfig }: UseQuestionLanguageOptions) => {
  return useQuery({
    ...getQuestionLanguageQueryOptions(),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Language/components/columns.tsx">
import { ColumnDef } from "@tanstack/react-table";
import { QuestionLanguage } from "@/types/ApiTypes";
import { Edit } from "lucide-react";
import formatDate from "@/lib/date-format";
import { DeleteQuestionLanguage } from "./delete-question-language";
import { Authorization } from "@/lib/authorization";
import { LiftedButton } from "@/common/LiftedButton";

export const langaugeColumns: ColumnDef<QuestionLanguage>[] = [
  {
    accessorKey: "id",
    header: "Id",
  },
  {
    accessorKey: "language",
    header: "Language",
  },
  {
    accessorKey: "createdAt",
    header: "Created At",
    cell: ({ row }) => formatDate(row.original.createdAt),
  },
  {
    accessorKey: "username",
    header: "Created By",
  },
  {
    cell: ({ row }) => {
      const language = row.original;
      return (
        <div className="flex items-center space-x-2">
          <Authorization allowedRoles={["SuperAdmin"]}>
            <LiftedButton variant="icon">
              <Edit size={16} />
            </LiftedButton>
            <DeleteQuestionLanguage id={language.id} />
          </Authorization>
        </div>
      );
    },
    header: "Actions",
  },
];
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Language/components/delete-question-language.tsx">
import { useNotifications } from "@/common/Notifications";
import { ConfirmationDialog } from "@/components/ui/dialog";
import { Button } from "@/components/ui";
import { Trash2 } from "lucide-react";
import { useDeleteQuestionLanguage } from "../api/delete-question-language";
import { LiftedButton } from "@/common/LiftedButton";

type DeleteLanguageProps = {
  id: number;
};
export const DeleteQuestionLanguage = ({ id }: DeleteLanguageProps) => {
  const { addNotification } = useNotifications();
  const deleteQuestionLanguageMutation = useDeleteQuestionLanguage({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Question Language Deleted",
        });
      },
    },
  });

  return (
    <ConfirmationDialog
      isDone={deleteQuestionLanguageMutation.isSuccess}
      icon="danger"
      title="Delete Question Language"
      body="This action cannot be undone."
      triggerButton={
        <LiftedButton variant="icon" className="rounded-xl bg-red-400">
          <Trash2 size={16} />
        </LiftedButton>
      }
      confirmButton={
        <Button
          isPending={deleteQuestionLanguageMutation.isPending}
          type="button"
          variant="destructive"
          onClick={() => {
            deleteQuestionLanguageMutation.mutate({ languageId: id });
          }}
        >
          Delete Language
        </Button>
      }
    />
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Language/components/language-view.tsx">
import { Card, DataTable, Spinner } from "@/components/ui";
import { langaugeColumns } from "./columns";
import { useQuestionLanguageData } from "../api/get-question-language";
import CreateQuestionLanguageForm from "./create-question-language";

export const LanguagesView = () => {
  const questionLanguagesQuery = useQuestionLanguageData({});

  if (questionLanguagesQuery.isLoading) return <Spinner size="lg" />;
  if (questionLanguagesQuery.isError) return <p>Failed to load categories.</p>;
  return (
    <>
      <h1 className="text-xl font-bold mt-4">Languages Management</h1>

      <Card className="flex flex-col justify-center align-items-end gap-2  p-8 bg-background border border-border">
        <div>
          <CreateQuestionLanguageForm />
        </div>
        <DataTable
          data={questionLanguagesQuery.data || []}
          columns={langaugeColumns}
        />
      </Card>
    </>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/api/delete-quiz.ts">
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import { getAllQuizzesQueryOptions } from "./get-all-quizzes";

type DeleteQuizDTO = {
    quizId: number;
  };

  export const deleteQuiz = ({ quizId }: DeleteQuizDTO) => {
    return api.delete(`/Quizzes/${quizId}`);
  };
  
  type UseDeleteQuizOptions = {
    mutationConfig?: MutationConfig<typeof deleteQuiz>;
  };
  
  export const useDeleteQuiz = ({
    mutationConfig,
  }: UseDeleteQuizOptions = {}) => {
    const queryClient = useQueryClient();
  
    const { onSuccess, ...restConfig } = mutationConfig || {};
  
    return useMutation({
      onSuccess: (...args) => {
        queryClient.invalidateQueries({
          queryKey: getAllQuizzesQueryOptions().queryKey,
        });
        onSuccess?.(...args);
      },
      ...restConfig,
      mutationFn: deleteQuiz,
    });
  };
</file>

<file path="src/pages/Dashboard/Pages/Quiz/api/get-all-quizzes.ts">
import { queryOptions, useQuery } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";
import { PaginatedQuizSummaryResponse } from "@/types/ApiTypes";
import { AxiosResponse } from "axios";
import { cleanQueryParams, extractPaginationFromHeaders } from "@/lib/pagination-query";

export type GetAllQuizzesParams = {
  pageNumber?: number;
  pageSize?: number;
  searchTerm?: string;
  categoryId?: number;
  difficultyId?: number;
  languageId?: number;
  visibility?: string;
};

export const getAllQuizzes = async (
  params: GetAllQuizzesParams
): Promise<PaginatedQuizSummaryResponse> => {
  const cleanParams = cleanQueryParams(params);
  const queryString = new URLSearchParams(cleanParams).toString();
  const result: AxiosResponse = await api.get(
    `/quiz?${queryString}`
  );
  const pagination = extractPaginationFromHeaders(result);

  return {
    data: result.data,
    pagination: pagination || undefined,
  };
};

export const getAllQuizzesQueryOptions = (
  params: GetAllQuizzesParams = {}
) => {
  return queryOptions({
    queryKey: ["quiz", params],
    queryFn: () => getAllQuizzes(params),
  });
};

type UseAllQuizzesOptions = {
  queryConfig?: QueryConfig<typeof getAllQuizzesQueryOptions>;
  params?: GetAllQuizzesParams;
};

export const useAllQuizzesData = ({
  queryConfig,
  params,
}: UseAllQuizzesOptions) => {
  return useQuery({
    ...getAllQuizzesQueryOptions(params),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/bulk-settings-panel.tsx">
// FEATURE FOR LATER USE
// NOT BEING USED ATM

import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/form";
import { Settings, Zap } from "lucide-react";
import { useQuiz } from "../Quiz-questions-context";
import { POINT_SYSTEM_OPTIONS, TIME_LIMIT_OPTIONS } from "@/pages/Dashboard/Pages/Question/Components/Re-Usable-Components/constants";

export const BulkSettingsPanel: React.FC = () => {
  const { addedQuestions, bulkUpdateSettings } = useQuiz();
  const [bulkPointSystem, setBulkPointSystem] = React.useState<string>("");
  const [bulkTimeLimit, setBulkTimeLimit] = React.useState<string>("");

  const handleBulkUpdate = () => {
    const updates: any = {};
    
    if (bulkPointSystem) {
      updates.pointSystem = bulkPointSystem;
    }
    
    if (bulkTimeLimit) {
      updates.timeLimitInSeconds = parseInt(bulkTimeLimit);
    }

    if (Object.keys(updates).length > 0) {
      bulkUpdateSettings(updates);
      setBulkPointSystem("");
      setBulkTimeLimit("");
    }
  };

  if (addedQuestions.length === 0) {
    return (
      <Card className="border border-primary/20">
        <CardContent className="p-4 text-center text-muted-foreground">
          <Settings className="h-8 w-8 mx-auto mb-2 opacity-50" />
          <p className="text-sm">Add questions to manage bulk settings</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="border border-primary/20">
      <CardHeader className="pb-3">
        <CardTitle className="text-sm flex items-center gap-2">
          <Zap className="h-4 w-4 text-primary" />
          Bulk Settings ({addedQuestions.length} questions)
        </CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-4">
        {/* Bulk Point System */}
        <div className="space-y-2">
          <Label className="text-xs font-medium">Apply Point System to All</Label>
          <Select value={bulkPointSystem} onValueChange={setBulkPointSystem}>
            <SelectTrigger className="h-8 text-xs">
              <SelectValue placeholder="Select point system..." />
            </SelectTrigger>
            <SelectContent>
              {POINT_SYSTEM_OPTIONS.map((option) => (
                <SelectItem key={option.value} value={option.value} className="text-xs">
                  {option.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Bulk Time Limit */}
        <div className="space-y-2">
          <Label className="text-xs font-medium">Apply Time Limit to All</Label>
          <Select value={bulkTimeLimit} onValueChange={setBulkTimeLimit}>
            <SelectTrigger className="h-8 text-xs">
              <SelectValue placeholder="Select time limit..." />
            </SelectTrigger>
            <SelectContent>
              {TIME_LIMIT_OPTIONS.map((option) => (
                <SelectItem 
                  key={option.value} 
                  value={option.value.toString()} 
                  className="text-xs"
                >
                  {option.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Apply Button */}
        <Button
          onClick={handleBulkUpdate}
          disabled={!bulkPointSystem && !bulkTimeLimit}
          className="w-full h-8 text-xs"
          variant="default"
        >
          Apply to All Questions
        </Button>
      </CardContent>
    </Card>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/create-question/multiple-choice-question-form.tsx">
import React, { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Input, Label } from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Separator } from "@/components/ui/separator";
import { Trash2, Plus } from "lucide-react";
// import { LiftedButton } from "@/common/LiftedButton";
import { NewMultipleChoiceQuestion } from "../../types";
// import ImageUpload from "@/utils/Image-Upload";

interface AnswerOption {
  text: string;
  isCorrect: boolean;
}

interface MultipleChoiceFormCardProps {
  className?: string;
  question: NewMultipleChoiceQuestion;
  // onChange: (updated: NewMultipleChoiceQuestion) => void;
}

export const MultipleChoiceFormCard: React.FC<MultipleChoiceFormCardProps> = ({
  className = "",
  question,
  // onChange,
}) => {
  const [questionText, setQuestionText] = useState(question.text);

  const allowMultipleSelections = question.allowMultipleSelections;
  const [answerOptions, setAnswerOptions] = useState<AnswerOption[]>(
    question.answerOptions
  );

  // useEffect(() => {
  //   onChange({
  //     ...question,
  //     text: questionText,
  //     allowMultipleSelections: allowMultipleSelections,
  //     answerOptions: answerOptions,
  //   });
  // }, [questionText, allowMultipleSelections, answerOptions]);

  const handleAddOption = () => {
    if (answerOptions.length < 4) {
      setAnswerOptions([...answerOptions, { text: "", isCorrect: false }]);
    }
  };

  const handleRemoveOption = (index: number) => {
    if (answerOptions.length > 2) {
      setAnswerOptions(answerOptions.filter((_, i) => i !== index));
    }
  };

  const handleAnswerTextChange = (index: number, text: string) => {
    setAnswerOptions(
      answerOptions.map((option, i) =>
        i === index ? { ...option, text } : option
      )
    );
  };

  const handleCorrectToggle = (index: number) => {
    setAnswerOptions(
      answerOptions.map((option, i) => {
        if (i === index) {
          return { ...option, isCorrect: !option.isCorrect };
        }
        if (!allowMultipleSelections && option.isCorrect) {
          return { ...option, isCorrect: false };
        }
        return option;
      })
    );
  };

  return (
    <Card className={`bg-background border-2 border-primary/30 ${className}`}>
      <CardContent className="space-y-6 p-6">
        <div className="space-y-2">
          <Input
            id="question-text"
            variant="fullColor"
            placeholder="Enter your question here..."
            value={questionText}
            onChange={(e) => setQuestionText(e.target.value)}
          />
        </div>
        {/* <ImageUpload /> */}
        <Separator className="bg-primary/20" />

        <div className="space-y-4">
          <div className=" grid grid-cols-2 gap-4 border-t pt-4">
            {answerOptions.map((option, index) => (
              <div
                key={index}
                className={`flex items-center gap-3 p-3 rounded-lg border transition-all ${
                  option.isCorrect
                    ? "border-green-500 bg-green-50 dark:bg-green-950/20"
                    : "border-border bg-background"
                }`}
              >
                <div className="flex-1">
                  <Input
                    placeholder={`Answer option ${index + 1}...`}
                    variant={option.isCorrect ? "isCorrect" : "quiz"}
                    value={option.text}
                    onChange={(e) =>
                      handleAnswerTextChange(index, e.target.value)
                    }
                    className={`h-20
                      ${
                        option.isCorrect
                          ? "border-green-300 focus:border-green-500"
                          : ""
                      }`}
                  />
                </div>
                <div className="flex flex-col items-center gap-1">
                  <Switch
                    checked={option.isCorrect}
                    onCheckedChange={() => handleCorrectToggle(index)}
                    className="shadow-sm"
                  />
                  <Label className="text-xs text-muted-foreground">
                    {allowMultipleSelections ? "Correct" : "Answer"}
                  </Label>
                </div>
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => handleRemoveOption(index)}
                  disabled={answerOptions.length <= 2}
                  className="h-9 w-9 text-destructive hover:bg-destructive hover:text-destructive-foreground"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
          <section className="w-full flex justify-center">
            <Button
              type="button"
              variant="outline"
              onClick={handleAddOption}
              disabled={answerOptions.length >= 4}
              className="w-fit border-dashed bg-primary/80 hover:bg-primary/95 text-white"
            >
              <Plus className="mr-2 h-4 w-4" />
              Add Answer Option ({answerOptions.length}/4)
            </Button>
          </section>
        </div>
      </CardContent>
    </Card>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/question-select/select-common-question-card.tsx">
import React, { useMemo, useCallback } from "react";
import { Card, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import {
  AnyQuestion,
  QuestionType,
  MultipleChoiceQuestion,
  TrueFalseQuestion,
  TypeTheAnswerQuestion,
} from "@/types/ApiTypes";
import {
  ImageIcon,
  Check,
  CheckCircle,
  XCircle,
  Type,
  Trash2,
} from "lucide-react";
import { cn } from "@/utils/cn";
import { useQuiz } from "@/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/Quiz-questions-context";

interface CommonSelectQuestionCard {
  question: AnyQuestion;
  selectionDisabled?: boolean;
}

const MAX_SELECTED_QUESTIONS = 5;

// Memoized badge components
const CategoryBadge = React.memo<{ category: string; isSelected: boolean }>(
  ({ category, isSelected }) => (
    <Badge
      variant="secondary"
      className={cn(
        "text-xs font-normal transition-colors duration-200",
        isSelected
          ? "bg-blue-100 dark:bg-blue-800/30 text-blue-800 dark:text-blue-200"
          : "bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300"
      )}
    >
      {category}
    </Badge>
  )
);

const LanguageBadge = React.memo<{ language: string; isSelected: boolean }>(
  ({ language, isSelected }) => (
    <Badge
      variant="secondary"
      className={cn(
        "text-xs font-normal transition-colors duration-200",
        isSelected
          ? "bg-blue-100 dark:bg-blue-800/30 text-blue-800 dark:text-blue-200"
          : "bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300"
      )}
    >
      {language}
    </Badge>
  )
);

const DifficultyBadge = React.memo<{ difficulty: string; isSelected: boolean }>(
  ({ difficulty, isSelected }) => (
    <Badge
      variant="outline"
      className={cn(
        "text-xs transition-colors duration-200",
        difficulty === "Easy" &&
          "text-green-600 dark:text-green-400 border-green-200 dark:border-green-800/50",
        difficulty === "Medium" &&
          "text-amber-600 dark:text-amber-400 border-amber-200 dark:border-amber-800/50",
        difficulty === "Hard" &&
          "text-red-600 dark:text-red-400 border-red-200 dark:border-red-800/50",
        isSelected && "ring-1 ring-current/20"
      )}
    >
      {difficulty}
    </Badge>
  )
);

// Type-specific badge renderers
const MultipleChoiceBadges = React.memo<{
  question: MultipleChoiceQuestion;
  isSelected: boolean;
}>(({ question, isSelected }) => {
  const correctAnswersCount = useMemo(
    () => question.answerOptions.filter((option) => option.isCorrect).length,
    [question.answerOptions]
  );

  return (
    <>
      <Badge
        variant="secondary"
        className={cn(
          "text-xs font-normal transition-colors duration-200",
          isSelected
            ? "bg-blue-100 dark:bg-blue-800/30 text-blue-800 dark:text-blue-200"
            : "bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300"
        )}
      >
        {question.allowMultipleSelections ? "Multi-Select" : "Single Select"}
      </Badge>
      <Badge
        variant="outline"
        className={cn(
          "text-xs font-normal transition-colors duration-200",
          isSelected
            ? "border-blue-300 dark:border-blue-600/50 text-blue-700 dark:text-blue-300"
            : "border-gray-300 dark:border-gray-600 text-gray-500 dark:text-gray-400"
        )}
      >
        {correctAnswersCount} correct answer
        {correctAnswersCount !== 1 ? "s" : ""}
      </Badge>
    </>
  );
});

const TrueFalseBadges = React.memo<{
  question: TrueFalseQuestion;
  isSelected: boolean;
}>(({ question, isSelected }) => (
  <Badge
    variant="outline"
    className={cn(
      "text-xs font-normal flex items-center gap-1 transition-colors duration-200",
      question.correctAnswer
        ? "text-green-600 dark:text-green-400 border-green-200 dark:border-green-800/50"
        : "text-red-600 dark:text-red-400 border-red-200 dark:border-red-800/50",
      isSelected && "ring-1 ring-current/20"
    )}
  >
    {question.correctAnswer ? (
      <CheckCircle className="h-3 w-3" />
    ) : (
      <XCircle className="h-3 w-3" />
    )}
    Answer: {question.correctAnswer ? "TRUE" : "FALSE"}
  </Badge>
));

const TypeAnswerBadges = React.memo<{
  question: TypeTheAnswerQuestion;
  isSelected: boolean;
}>(({ question, isSelected }) => (
  <>
    <Badge
      variant="secondary"
      className={cn(
        "text-xs font-normal transition-colors duration-200",
        isSelected
          ? "bg-blue-100 dark:bg-blue-800/30 text-blue-800 dark:text-blue-200"
          : "bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300"
      )}
    >
      <Type className="h-3 w-3 mr-1" />
      Type Answer
    </Badge>
    <Badge
      variant="outline"
      className={cn(
        "text-xs font-normal transition-colors duration-200",
        isSelected
          ? "border-blue-300 dark:border-blue-600/50 text-blue-700 dark:text-blue-300"
          : "border-gray-300 dark:border-gray-600 text-gray-500 dark:text-gray-400"
      )}
    >
      Pattern: "{question.correctAnswer}"
    </Badge>
    {question.acceptableAnswers && question.acceptableAnswers.length > 0 && (
      <Badge
        variant="outline"
        className={cn(
          "text-xs font-normal transition-colors duration-200",
          isSelected
            ? "border-blue-300 dark:border-blue-600/50 text-blue-700 dark:text-blue-300"
            : "border-gray-300 dark:border-gray-600 text-gray-500 dark:text-gray-400"
        )}
      >
        {question.acceptableAnswers.length} acceptable
      </Badge>
    )}
  </>
));

const ImageBadge = React.memo<{ isSelected: boolean }>(({ isSelected }) => (
  <Badge
    variant="outline"
    className={cn(
      "ml-2 transition-colors duration-200",
      isSelected
        ? "bg-blue-100 dark:bg-blue-800/30 border-blue-300 dark:border-blue-600/50"
        : "bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800/50"
    )}
  >
    <ImageIcon className="h-3 w-3 mr-1" />
    <span className="text-blue-600 dark:text-blue-400 text-xs">Image</span>
  </Badge>
));

const SelectionStatusIndicator = React.memo<{
  statusText: string;
  isPermanentlySelected: boolean;
  isQuestionModalOpen: boolean;
}>(({ statusText, isPermanentlySelected, isQuestionModalOpen }) => (
  <div className="mt-3 flex items-center gap-2">
    <div
      className={cn(
        "h-px flex-1",
        isPermanentlySelected && isQuestionModalOpen
          ? "bg-green-200 dark:bg-green-800/50"
          : "bg-blue-200 dark:bg-blue-800/50"
      )}
    />
    <span
      className={cn(
        "text-xs font-medium px-2 py-1 rounded-full",
        isPermanentlySelected && isQuestionModalOpen
          ? "text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900/30"
          : "text-blue-600 dark:text-blue-400 bg-blue-100 dark:bg-blue-900/30"
      )}
    >
      {statusText}
    </span>
    <div
      className={cn(
        "h-px flex-1",
        isPermanentlySelected && isQuestionModalOpen
          ? "bg-green-200 dark:bg-green-800/50"
          : "bg-blue-200 dark:bg-blue-800/50"
      )}
    />
  </div>
));

export const CommonSelectQuestionCard: React.FC<CommonSelectQuestionCard> = ({
  question,
  selectionDisabled: externalSelectionDisabled = false,
}) => {
  const {
    addToTempSelection,
    removeFromTempSelection,
    isTempSelected: isQuestionTempSelectedInContext,
    isQuestionModalOpen,
    tempSelectedQuestions,
    isQuestionSelected,
    removeQuestionFromQuiz,
  } = useQuiz();

  // Memoized computed values
  const selectionState = useMemo(() => {
    const isPermanentlySelected = isQuestionSelected(question.id);
    const isCurrentCardTempSelected = isQuestionTempSelectedInContext(
      question.id
    );
    const isSelected = isQuestionModalOpen
      ? isCurrentCardTempSelected
      : isPermanentlySelected;

    const currentSelectionCount = isQuestionModalOpen
      ? tempSelectedQuestions.length
      : 0;
    const quizSelectionLimitReached =
      currentSelectionCount >= MAX_SELECTED_QUESTIONS && !isSelected;
    const alreadyInQuizAndModalOpen =
      isQuestionModalOpen && isPermanentlySelected;

    const finalSelectionDisabled =
      externalSelectionDisabled ||
      quizSelectionLimitReached ||
      alreadyInQuizAndModalOpen;

    return {
      isPermanentlySelected,
      isCurrentCardTempSelected,
      isSelected,
      finalSelectionDisabled,
      alreadyInQuizAndModalOpen,
    };
  }, [
    question.id,
    isQuestionSelected,
    isQuestionTempSelectedInContext,
    isQuestionModalOpen,
    tempSelectedQuestions.length,
    externalSelectionDisabled,
  ]);

  const selectionStatusText = useMemo(() => {
    const { isPermanentlySelected, isCurrentCardTempSelected } = selectionState;

    if (isPermanentlySelected && isQuestionModalOpen) return "Already in Quiz";
    if (isPermanentlySelected && !isQuestionModalOpen) return "In Quiz";
    if (
      isCurrentCardTempSelected &&
      isQuestionModalOpen &&
      !isPermanentlySelected
    ) {
      return "To be Added";
    }
    return null;
  }, [selectionState, isQuestionModalOpen]);

  const cardStyling = useMemo(() => {
    const {
      isPermanentlySelected,
      isCurrentCardTempSelected,
      isSelected,
      finalSelectionDisabled,
      alreadyInQuizAndModalOpen,
    } = selectionState;

    const cardIsClickableForSelection =
      !finalSelectionDisabled && isQuestionModalOpen;
    const cardIsGenerallyDisabled =
      (finalSelectionDisabled && !isSelected && isQuestionModalOpen) ||
      (alreadyInQuizAndModalOpen && !isCurrentCardTempSelected);

    return {
      cardIsClickableForSelection,
      cardIsGenerallyDisabled,
      showSelectionBar:
        isSelected || (isPermanentlySelected && isQuestionModalOpen),
      selectionBarColor:
        isPermanentlySelected && isQuestionModalOpen
          ? "bg-green-500 dark:bg-green-400"
          : "bg-blue-500 dark:bg-blue-400",
    };
  }, [selectionState, isQuestionModalOpen]);

  // Event handlers
  const handleCheckboxChange = useCallback(
    (e?: React.MouseEvent) => {
      e?.stopPropagation();

      if (!isQuestionModalOpen || selectionState.finalSelectionDisabled) return;

      if (selectionState.isCurrentCardTempSelected) {
        removeFromTempSelection(question.id);
      } else {
        addToTempSelection(question);
      }
    },
    [
      isQuestionModalOpen,
      selectionState.finalSelectionDisabled,
      selectionState.isCurrentCardTempSelected,
      removeFromTempSelection,
      addToTempSelection,
      question,
    ]
  );

  const handleRemovePermanently = useCallback(
    (e: React.MouseEvent) => {
      e.stopPropagation();

      if (
        removeQuestionFromQuiz &&
        selectionState.isPermanentlySelected &&
        !isQuestionModalOpen
      ) {
        removeQuestionFromQuiz(question.id);
      }
    },
    [
      removeQuestionFromQuiz,
      selectionState.isPermanentlySelected,
      isQuestionModalOpen,
      question.id,
    ]
  );

  // Type-specific badges renderer
  const renderTypeSpecificBadges = useCallback(() => {
    switch (question.type) {
      case QuestionType.MultipleChoice:
        return (
          <MultipleChoiceBadges
            question={question as MultipleChoiceQuestion}
            isSelected={selectionState.isSelected}
          />
        );
      case QuestionType.TrueFalse:
        return (
          <TrueFalseBadges
            question={question as TrueFalseQuestion}
            isSelected={selectionState.isSelected}
          />
        );
      case QuestionType.TypeTheAnswer:
        return (
          <TypeAnswerBadges
            question={question as TypeTheAnswerQuestion}
            isSelected={selectionState.isSelected}
          />
        );
      default:
        return null;
    }
  }, [question, selectionState.isSelected]);

  const {
    isPermanentlySelected,
    isCurrentCardTempSelected,
    isSelected,
    finalSelectionDisabled,
  } = selectionState;

  const { cardIsGenerallyDisabled, showSelectionBar, selectionBarColor } =
    cardStyling;

  return (
    <Card
      className={cn(
        "mb-3 border shadow-md transition-all duration-200 hover:shadow-md relative overflow-hidden bg-white dark:bg-gray-900",
        isSelected
          ? "border-blue-500 dark:border-blue-400 bg-blue-50/50 dark:bg-blue-900/20 ring-2 ring-blue-200 dark:ring-blue-800/50"
          : "border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600",
        cardIsGenerallyDisabled &&
          "opacity-50 cursor-not-allowed hover:shadow-sm",
        selectionState.alreadyInQuizAndModalOpen && "opacity-70"
      )}
    >
      {showSelectionBar && (
        <div
          className={cn(
            "absolute left-0 top-0 bottom-0 w-1",
            selectionBarColor
          )}
        />
      )}

      <CardHeader className="pb-3 pt-4 pl-6 pr-4">
        <div className="flex items-start gap-3">
          <div className="relative">
            <Checkbox
              checked={
                isQuestionModalOpen
                  ? isPermanentlySelected || isCurrentCardTempSelected
                  : isPermanentlySelected
              }
              disabled={finalSelectionDisabled || !isQuestionModalOpen}
              onClick={handleCheckboxChange}
              className={cn(
                "mt-1 flex-shrink-0 transition-all duration-200 focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
                isPermanentlySelected && isQuestionModalOpen
                  ? "bg-green-500 border-green-500 text-white data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500"
                  : isSelected &&
                      "bg-blue-500 border-blue-500 text-white data-[state=checked]:bg-blue-500 data-[state=checked]:border-blue-500"
              )}
              aria-label={`Select question ${question.id}`}
            />
            {(isQuestionModalOpen
              ? isPermanentlySelected || isCurrentCardTempSelected
              : isPermanentlySelected) && (
              <Check className="absolute top-1.5 left-0.5 h-3 w-3 text-white pointer-events-none" />
            )}
          </div>

          <div className="flex-1 min-w-0">
            <div className="flex flex-wrap items-start justify-between gap-2 mb-3">
              <CardTitle
                className={cn(
                  "text-base leading-tight pr-2 transition-colors duration-200",
                  isSelected || (isPermanentlySelected && isQuestionModalOpen)
                    ? "text-blue-900 dark:text-blue-100"
                    : "text-gray-900 dark:text-gray-100"
                )}
              >
                {question.text}
                {question.imageUrl && (
                  <ImageBadge
                    isSelected={
                      isSelected ||
                      (isPermanentlySelected && isQuestionModalOpen)
                    }
                  />
                )}
              </CardTitle>

              <div className="flex items-center gap-2 flex-shrink-0">
                <DifficultyBadge
                  difficulty={question.difficulty.level}
                  isSelected={
                    isSelected || (isPermanentlySelected && isQuestionModalOpen)
                  }
                />

                {isPermanentlySelected && !isQuestionModalOpen && (
                  <button
                    onClick={handleRemovePermanently}
                    className="p-1 rounded-full hover:bg-red-100 dark:hover:bg-red-800/30 text-red-500 dark:text-red-400 transition-colors focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-1"
                    aria-label="Remove question from quiz"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                )}
              </div>
            </div>

            <div className="flex flex-wrap items-center gap-2">
              <CategoryBadge
                category={question.category.name}
                isSelected={isSelected}
              />
              <LanguageBadge
                language={question.language.language}
                isSelected={isSelected}
              />
              {renderTypeSpecificBadges()}
            </div>

            {selectionStatusText && (
              <SelectionStatusIndicator
                statusText={selectionStatusText}
                isPermanentlySelected={isPermanentlySelected}
                isQuestionModalOpen={isQuestionModalOpen}
              />
            )}
          </div>
        </div>
      </CardHeader>
    </Card>
  );
};

export default CommonSelectQuestionCard;
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/question-select/select-common-question-list.tsx">
import React from "react";
import { AnyQuestion } from "@/types/ApiTypes";
import { CommonSelectQuestionCard } from "./select-common-question-card";

interface QuestionListProps {
  questions: AnyQuestion[];
}

export const QuestionListComponent: React.FC<QuestionListProps> = ({
  questions,
}) => {
  if (!questions || questions.length === 0) {
    return <p>No questions to display.</p>;
  }

  return (
    <div>
      {questions.map((question) => (
        <CommonSelectQuestionCard key={question.id} question={question} />
      ))}
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/multiple-choice-question-card/quiz-muiltiple-choice-question-card.tsx">
import React from "react";
import { Input } from "@/components/ui/form";
import { MultipleChoiceQuestion, QuestionType } from "@/types/ApiTypes";
import {
  BaseQuestionCard,
  ExistingQuestionCardProps,
} from "../quiz-base-question-card";
import { QuestionImagePreview } from "../quiz-question-image-preview";
import { MultipleChoiceAnswers } from "./multiple-choice-answers";
import { QuestionMetadata } from "../quiz-question-metadata";
import { QuestionFooter } from "../quiz-question-card-footer";

export const getQuestionTypeStyles = (type: QuestionType) => {
  switch (type) {
    case QuestionType.MultipleChoice:
      return {
        borderColor: "border-primary/80",
        backgroundColor: "bg-primary/5",
        previewBorderColor: "border-primary",
      };
    case QuestionType.TrueFalse:
      return {
        borderColor: "border-purple-500/80",
        backgroundColor: "bg-purple-300/10",
        previewBorderColor: "border-purple-500",
      };
    case QuestionType.TypeTheAnswer:
      return {
        borderColor: "border-orange-500/80",
        backgroundColor: "bg-orange-300/10",
        previewBorderColor: "border-orange-500",
      };
    default:
      return {
        borderColor: "border-primary/80",
        backgroundColor: "bg-primary/5",
        previewBorderColor: "border-primary",
      };
  }
};

export const MultipleChoiceCard: React.FC<ExistingQuestionCardProps> = (
  props
) => {
  const question = props.question as MultipleChoiceQuestion;
  const styles = getQuestionTypeStyles(question.type);

  return (
    <BaseQuestionCard
      {...props}
      borderColor={styles.borderColor}
      backgroundColor={styles.backgroundColor}
    >
      <Input
        variant="display"
        value={question.text || ""}
        className="my-8 !text-[1.5rem] py-8"
      />

      {question.imageUrl && (
        <QuestionImagePreview
          imageUrl={question.imageUrl}
          previewBorderColor={styles.previewBorderColor}
        />
      )}

      <MultipleChoiceAnswers question={question} />
      <QuestionMetadata question={question} />
      <QuestionFooter question={question} />
    </BaseQuestionCard>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/quiz-base-question-card.tsx">
import React from "react";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
import { AnyQuestion } from "@/types/ApiTypes";

export interface ExistingQuestionCardProps {
  question: AnyQuestion;
  isActive?: boolean;
  onClick?: () => void;
  onRemove?: () => void;
}

interface BaseQuestionCardProps extends ExistingQuestionCardProps {
  borderColor: string;
  backgroundColor?: string;
  children: React.ReactNode;
}

export const BaseQuestionCard: React.FC<BaseQuestionCardProps> = ({
  //   question,
  onRemove,
  onClick,
  borderColor,
  backgroundColor,
  children,
}) => {
  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if ((e.target as HTMLElement).closest("button")) return;
    onClick?.();
  };

  return (
    <Card
      className={`font-header rounded-lg border ${borderColor} ${backgroundColor} border-dashed cursor-pointer transition-all duration-200 overflow-hidden shadow-md hover:shadow-lg dark:bg-muted/30`}
      onClick={handleClick}
    >
      <CardHeader className="pb-4">
        <div className="flex justify-between items-start">
          {onRemove && (
            <Button
              type="button"
              variant="ghost"
              size="icon"
              className="h-8 w-8 flex items-center justify-center rounded-full hover:bg-destructive/10 hover:text-red-500"
              onClick={onRemove}
              title="Remove question"
            >
              <Trash2 size={16} />
            </Button>
          )}
        </div>
      </CardHeader>
      <CardContent className="px-6 pb-6">{children}</CardContent>
    </Card>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/true-false-question-card/true-false-question-card.tsx">
import React from "react";
import { Input } from "@/components/ui/form";
import { TrueFalseQuestion } from "@/types/ApiTypes";
import {
  BaseQuestionCard,
  ExistingQuestionCardProps,
} from "../quiz-base-question-card";
import { getQuestionTypeStyles } from "../multiple-choice-question-card/quiz-muiltiple-choice-question-card";
import { QuestionImagePreview } from "../quiz-question-image-preview";
import { TrueFalseAnswers } from "./true-false-answer";
import { QuestionMetadata } from "../quiz-question-metadata";
import { QuestionFooter } from "../quiz-question-card-footer";

export const TrueFalseCard: React.FC<ExistingQuestionCardProps> = (props) => {
  const question = props.question as TrueFalseQuestion;
  const styles = getQuestionTypeStyles(question.type);

  return (
    <BaseQuestionCard
      {...props}
      borderColor={styles.borderColor}
      backgroundColor={styles.backgroundColor}
    >
      <Input
        variant="display"
        questionType="true-false"
        value={question.text || ""}
        className="my-8 !text-[1.5rem] py-8"
      />

      {question.imageUrl && (
        <QuestionImagePreview
          imageUrl={question.imageUrl}
          previewBorderColor={styles.previewBorderColor}
        />
      )}

      <TrueFalseAnswers question={question} />
      <QuestionMetadata
        question={question}
        backgroundColor="bg-purple-200/50 dark:bg-purple-900/30 shadow-md"
      />
      <QuestionFooter question={question} />
    </BaseQuestionCard>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-card/type-the-answer-question-card/type-the-asnwer-question-card.tsx">
import React from "react";
import { Input } from "@/components/ui/form";
import { TypeTheAnswerQuestion } from "@/types/ApiTypes";
import {
  BaseQuestionCard,
  ExistingQuestionCardProps,
} from "../quiz-base-question-card";
import { getQuestionTypeStyles } from "../multiple-choice-question-card/quiz-muiltiple-choice-question-card";
import { QuestionImagePreview } from "../quiz-question-image-preview";
import { TypeTheAnswerDisplay } from "./type-the-asnwer-display";
import { QuestionMetadata } from "../quiz-question-metadata";
import { QuestionFooter } from "../quiz-question-card-footer";

export const TypeTheAnswerCard: React.FC<ExistingQuestionCardProps> = (
  props
) => {
  const question = props.question as TypeTheAnswerQuestion;
  const styles = getQuestionTypeStyles(question.type);

  return (
    <BaseQuestionCard
      {...props}
      borderColor={styles.borderColor}
      backgroundColor={styles.backgroundColor}
    >
      <Input
        variant="display"
        questionType="type-answer"
        value={question.text || ""}
        className="my-8 !text-[1.5rem] py-8"
      />

      {question.imageUrl && (
        <QuestionImagePreview
          imageUrl={question.imageUrl}
          previewBorderColor={styles.previewBorderColor}
        />
      )}

      <TypeTheAnswerDisplay question={question} />
      <QuestionMetadata question={question} />
      <QuestionFooter question={question} />
    </BaseQuestionCard>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/quiz-questions.tsx">
import { useParams } from "react-router";
import { Spinner } from "@/components/ui";
import { QuizQuestion, useQuizQuestionsData } from "../api/get-quiz-questions";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Badge } from "@/components/ui/badge";
import { CheckCircle2 } from "lucide-react";
import { AnswerOption } from "@/types/ApiTypes";

export const QuizQuestions = () => {
  const { quizId } = useParams();
  const parsedQuizId = Number(quizId);

  const { data, isLoading, isError } = useQuizQuestionsData({
    quizId: parsedQuizId,
  });

  if (isLoading) {
    return (
      <div className="w-full h-full flex items-center justify-center">
        <Spinner size="lg" />
      </div>
    );
  }

  if (isError) {
    return (
      <div className="w-full h-full flex items-center justify-center">
        Failed to load quiz questions. Try again later.
      </div>
    );
  }

  const questions = data || [];

  return (
    <div>
      <h2 className="text-xl font-semibold mb-4">Quiz Questions</h2>
      {questions.length > 0 ? (
        questions.map((quizQuestion, index) => (
          <ExistingQuestionCard
            key={quizQuestion.questionId || index}
            quizQuestion={quizQuestion}
            index={index}
          />
        ))
      ) : (
        <p>No questions found for this quiz.</p>
      )}
    </div>
  );
};

type ExistingQuestionCardProps = {
  quizQuestion: QuizQuestion;
  index: number;
};

const ExistingQuestionCard = ({
  quizQuestion,
  index,
}: ExistingQuestionCardProps) => {
  return (
    <>
      <Accordion type="single" collapsible>
        <AccordionItem
          key={quizQuestion.questionId}
          value={`question-${quizQuestion.questionId}`}
        >
          <AccordionTrigger>
            <div className="flex items-start text-left">
              <span className="mr-2">{index + 1}.</span>
              <div>
                <div>{quizQuestion.question.text}</div>
                <div className="flex gap-2 mt-1">
                  <Badge variant="outline">
                    {quizQuestion.question.difficulty.level}
                  </Badge>
                  <Badge variant="outline">
                    {quizQuestion.question.category.category}
                  </Badge>
                  <Badge variant="outline">{quizQuestion.score} Points</Badge>
                </div>
              </div>
            </div>
          </AccordionTrigger>
          <AccordionContent>
            <div className="pl-6 space-y-2">
              {quizQuestion.question.answerOptions.map(
                (option: AnswerOption) => (
                  <div
                    key={option.id}
                    className={`p-3 rounded-md border ${
                      option.isCorrect
                        ? "border-green-500 bg-green-50 dark:bg-green-950/20"
                        : "border-gray-200"
                    }`}
                  >
                    <div className="flex items-center">
                      {option.isCorrect && (
                        <CheckCircle2 className="h-4 w-4 text-green-500 mr-2" />
                      )}
                      <span>{option.text}</span>
                    </div>
                  </div>
                )
              )}
            </div>
          </AccordionContent>
        </AccordionItem>
      </Accordion>
    </>
  );
};
</file>

<file path="src/pages/UserRelated/Login/Login.tsx">
import React from "react";
import { useNavigate } from "react-router-dom";
import SocialButtons from "@/lib/SocialButtons/SocialButtons";
import { ModeToggle } from "@/components/ui/mode-toggle";
import LoginForm from "./LoginForm";
import { useLogin } from "@/lib/Auth";
import { GoBackButton } from "@/common/Go-Back-Button";
import { useSearchParams } from "react-router-dom";
import { O2Button } from "@/common/O2Button";
import { useNotifications } from "@/common/Notifications";
// import Squares from "@/common/Effect-Related/background-squares";
// import { useTheme } from "@/components/ui";
// import OxygenBackground from "../../../assets/oxygenquiz.jpeg";
import OxygenBackground from "../../../assets/oxygenquiz2.jpg";

/**
 *
 * @LoginPage
 *
 */

const Login: React.FC = () => {
  // const { theme } = useTheme();
  // const colors = {
  //   borderColor: theme === "dark" ? "#626262" : "#b4b4b4",
  //   hoverFillColor: theme === "dark" ? "#ffffff" : "#000000",
  // };

  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { mutate: login, isPending, isError } = useLogin();

  const handleLogin = async (email: string, password: string) => {
    try {
      await login(
        { email, password },
        {
          onSuccess: () => {
            useNotifications.getState().addNotification({
              type: "success",
              title: "Success",
              message: "Logged in successfully!",
            });
            const redirectTo = searchParams.get("redirectTo");
            if (redirectTo) {
              navigate(redirectTo, { replace: true });
            } else {
              navigate(-1);
            }
          },
          onError: (error: unknown) => {
            console.error("Login failed:", error);
            useNotifications.getState().addNotification({
              type: "error",
              title: "Error",
              message: "Login failed. Please try again.",
            });
          },
        }
      );
    } catch (error) {
      console.error("Login failed:", error);
    }
  };

  return (
    <div className="relative h-screen w-full flex flex-col">
      {/* Background Image */}
      <div
        className="absolute inset-0 bg-cover bg-center"
        style={{ backgroundImage: `url(${OxygenBackground})` }}
      />

      {/* Gray Overlay */}
      <div className="absolute inset-0 backdrop-blur-sm" /> 

      {/* Content Container */}
      <div className="relative h-full w-full flex flex-col bg-transparent">
        <div className="relative flex justify-center pt-10">
          <div className="absolute top-4 flex justify-between gap-5 w-full px-5">
            <GoBackButton />
            <ModeToggle text={true} />
          </div>
          <O2Button />
        </div>

        <div className="flex-grow flex items-center justify-center z-20">
          <div className=" backdrop-blur-md text-foreground p-8 rounded shadow-xl max-w-lg flex-grow flex flex-col items-center justify-center">
            <div className="w-[70%]">
              <h2 className="text-3xl text-white font-semibold mb-6 text-center">
                Welcome Back
              </h2>
              {isError && (
                <p className="text-red-500 font-semibold py-2">
                  Login failed. Please try again.
                </p>
              )}
              <LoginForm onLogin={handleLogin} isPending={isPending} />
              <div className="text-center mt-4">
                <p className="text-sm">
                  Don't have an account?{" "}
                  <a href="/signup" className="text-foreground underline">
                    Sign up
                  </a>
                </p>
              </div>
              <div className="relative mt-8">
                <div className="absolute inset-0 flex items-center">
                  <div className="w-full border-t border-gray-300"></div>
                </div>
                <div className="relative flex justify-center text-sm">
                  <span className="bg-muted px-2">OR</span>
                </div>
              </div>
              <SocialButtons />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;
</file>

<file path="src/pages/UtilityPages/Error/Main.tsx">
import { Button } from "@/components/ui/button";
import { FallbackProps } from "react-error-boundary";

export const MainErrorFallback: React.FC<FallbackProps> = ({
  error,
  resetErrorBoundary,
}) => {
  const isUnauthorized = error.status === 401;

  return (
    <div
      className="flex min-h-screen w-full items-center justify-center bg-background p-4"
      role="alert"
    >
      {isUnauthorized ? (
        <>
          <div className="absolute top-0 left-0 right-0 bottom-0 z-10 flex items-center justify-center bg-background flex-col gap-4 p-4">
            <h2 className="text-lg font-semibold text-red-500">
              You are not authorized to view this page
            </h2>
            <Button
              className="mt-4"
              onClick={() => {
                window.location.href = "/login";
              }}
            >
              Login
            </Button>
          </div>
        </>
      ) : (
        <>
          <div className="flex w-full max-w-screen-md flex-col items-center text-red-500">
            <h2 className="text-lg font-semibold">
              Oops, something went wrong
            </h2>

            {/* Scrollable error container */}
            <div className="mt-4 w-full overflow-x-auto">
              <div className="min-w-[300px] space-y-2">
                <p className="break-words rounded-md bg-red-500/10 p-3 font-mono text-sm">
                  {error.message}
                </p>
                {error.stack && (
                  <pre className="overflow-x-auto rounded-md bg-red-500/10 p-3 font-mono text-xs">
                    {error.stack.split("\n").slice(0, 2).join("\n")}
                  </pre>
                )}
              </div>
              <Button
                className="mt-4"
                onClick={() => {
                  resetErrorBoundary();
                  window.location.reload();
                }}
              >
                Refresh
              </Button>
            </div>
          </div>
        </>
      )}
    </div>
  );
};
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Image/ImageUploadController.cs">
using System;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using QuizAPI.Controllers.Image.Services;
using QuizAPI.Services;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.Formats;

namespace QuizAPI.Controllers.Image
{
    [ApiController]
    [Route("api/[controller]")]
    public class ImageUploadController : ControllerBase
    {
        private readonly IWebHostEnvironment _env;
        private readonly ILogger<ImageUploadController> _logger;
        private readonly IImageService _imageService;
        private readonly long _fileSizeLimit = 5 * 1024 * 1024; // 5MB
        private readonly int _maxWidth = 2000;
        private readonly int _maxHeight = 2000;

        public ImageUploadController(
            IWebHostEnvironment env,
            ILogger<ImageUploadController> logger,
            IImageService imageService)
        {
            _env = env ?? throw new ArgumentNullException(nameof(env));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _imageService = imageService ?? throw new ArgumentNullException(nameof(imageService));
        }

        [HttpPost("question")]
        public async Task<IActionResult> UploadQuestionImage(IFormFile file)
        {
            try
            {
                // Check if file exists
                if (file == null || file.Length == 0)
                {
                    _logger.LogWarning("Upload attempt with no file");
                    return BadRequest("No file uploaded");
                }

                // Check file size
                if (file.Length > _fileSizeLimit)
                {
                    _logger.LogWarning($"Rejected file upload: size {file.Length} exceeds limit");
                    return BadRequest($"File size exceeds the limit of {_fileSizeLimit / (1024 * 1024)}MB");
                }

                // Read file to memory stream for validation
                await using var memoryStream = new MemoryStream();
                await file.CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                // Validate image content
                try
                {
                    // This will validate the file is actually an image and can be processed
                    using var image = SixLabors.ImageSharp.Image.Load(memoryStream);
                    var format = image.Metadata.DecodedImageFormat;

                    // Check image dimensions
                    if (image.Width > _maxWidth || image.Height > _maxHeight)
                    {
                        _logger.LogWarning($"Rejected image: dimensions {image.Width}x{image.Height} exceed limits");
                        return BadRequest($"Image dimensions too large (max: {_maxWidth}x{_maxHeight})");
                    }

                    // Check if format is supported
                    if (!IsValidImageFormat(format))
                    {
                        _logger.LogWarning($"Rejected file: format {format.Name} not allowed");
                        return BadRequest("File type not supported. Allowed types: JPEG, PNG, GIF");
                    }

                    // Reset position to beginning of stream
                    memoryStream.Position = 0;

                    // Get file extension from actual format
                    var extension = format?.FileExtensions?.FirstOrDefault() ??
                        Path.GetExtension(file.FileName).TrimStart('.');

                    // Save using our service
                    var baseUrl = $"{Request.Scheme}://{Request.Host.Value}";
                    var imageUrl = await _imageService.SaveImageAsync(memoryStream, file.FileName, extension);

                    // Add the base URL (should be refactored to be handled in the service)
                    if (!imageUrl.StartsWith("http"))
                    {
                        imageUrl = $"{baseUrl}{imageUrl}";
                    }

                    _logger.LogInformation($"Successfully uploaded image: {imageUrl}");
                    return Ok(new { url = imageUrl });
                }
                catch (UnknownImageFormatException)
                {
                    _logger.LogWarning("Rejected upload: unknown image format");
                    return BadRequest("The file is not a valid image");
                }
                catch (Exception ex) when (ex is InvalidImageContentException || ex is ImageFormatException)
                {
                    _logger.LogWarning($"Rejected corrupt image: {ex.Message}");
                    return BadRequest("Invalid or corrupted image file");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing image upload");
                return StatusCode(500, "An error occurred while processing the image");
            }
        }

        [HttpPost("associate")]
        public async Task<IActionResult> AssociateImage([FromBody] AssociateImageRequest request)
        {
            if (request == null || string.IsNullOrEmpty(request.ImageUrl) ||
                string.IsNullOrEmpty(request.EntityType) || request.EntityId <= 0)
            {
                return BadRequest("Invalid request parameters");
            }

            var success = await _imageService.AssociateImageWithEntityAsync(
                request.ImageUrl, request.EntityType, request.EntityId);

            if (!success)
            {
                return NotFound("Image not found");
            }

            return Ok(new { success = true });
        }

        private static bool IsValidImageFormat(IImageFormat format)
        {
            if (format == null)
            {
                return false; // If we can't determine the format, reject it
            }

            // Check by actual image format rather than just Content-Type
            var allowedFormats = new[] { "JPEG", "PNG", "GIF" };
            return allowedFormats.Contains(format.Name, StringComparer.OrdinalIgnoreCase);
        }
    }

    public class AssociateImageRequest
    {
        [Required]
        public string ImageUrl { get; set; }

        [Required]
        public string EntityType { get; set; }

        [Required]
        public int EntityId { get; set; }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Questions/Services/AnswerOptions/AnswerOptionService.cs">
using Microsoft.EntityFrameworkCore;
using QuizAPI.Data;
using QuizAPI.DTOs.Question;
using QuizAPI.Models;

namespace QuizAPI.Controllers.Questions.Services.AnswerOptions
{
    public class AnswerOptionService: IAnswerOptionService      
    {
        private readonly ApplicationDbContext _context;

        public AnswerOptionService(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<AnswerOption> CreateAnswerOptionAsync(
      AnswerOptionCM newAnswerOptionCM,
      int questionId
  )
        {
            // First, fetch the base question
            var baseQuestion = await _context.Questions.FirstOrDefaultAsync(q => q.Id == questionId)
                ?? throw new Exception("Question not found.");

            // Check if it's a MultipleChoiceQuestion
            if (baseQuestion.Type != QuestionType.MultipleChoice)
            {
                throw new InvalidOperationException("Answer options can only be added to multiple choice questions.");
            }

            // Now fetch the full MultipleChoiceQuestion with its options
            var multipleChoiceQuestion = await _context.MultipleChoiceQuestions
                .Include(q => q.AnswerOptions)
                .FirstOrDefaultAsync(q => q.Id == questionId)
                ?? throw new Exception("Multiple choice question not found.");

            // Create and add the answer option
            var answerOption = new AnswerOption
            {
                Text = newAnswerOptionCM.Text,
                IsCorrect = newAnswerOptionCM.IsCorrect,
                QuestionId = questionId // Assuming you have a QuestionId property in AnswerOption
            };

            _context.AnswerOptions.Add(answerOption);
            multipleChoiceQuestion.AnswerOptions.Add(answerOption);
            await _context.SaveChangesAsync();

            return answerOption;
        }

        public async Task<List<AnswerOption>> CreateAnswerOptionsAsync(
            List<AnswerOptionCM> newAnswerOptions,
            int questionId
        )
        {
            var createdOptions = new List<AnswerOption>();

           
            foreach (var optionDto in newAnswerOptions)
            {
                var createdOption = await CreateAnswerOptionAsync(optionDto, questionId);
                createdOptions.Add(createdOption);
            }

            return createdOptions;
        }

        public async Task SyncAnswerOptionsAsync(MultipleChoiceQuestion question, IEnumerable<AnswerOptionUM> incomingOptions)
        {
            // Split incoming
            var toUpdate = incomingOptions.Where(x => x.Id.HasValue).ToList();
            var toCreate = incomingOptions.Where(x => !x.Id.HasValue).ToList();
            var incomingIds = toUpdate.Select(x => x.Id.Value).ToHashSet();

            // Delete removed
            var toDelete = question.AnswerOptions.Where(a => !incomingIds.Contains(a.Id)).ToList();
            if (toDelete.Any()) _context.AnswerOptions.RemoveRange(toDelete);

            // Update existing
            foreach (var dto in toUpdate)
            {
                var entity = question.AnswerOptions.First(a => a.Id == dto.Id.Value);
                entity.Text = dto.Text;
                entity.IsCorrect = dto.IsCorrect;
            }

            // Add new
            foreach (var dto in toCreate)
            {
                var entity = new AnswerOption
                {
                    Text = dto.Text,
                    IsCorrect = dto.IsCorrect,
                    Question = question
                };
                _context.AnswerOptions.Add(entity);
            }
            await _context.SaveChangesAsync();
        }

        /*
        ------------
        Not being used at the moment since the logic is a little complex.
        ------------
        */
        public async Task<AnswerOption> UpdateAnswerOptionAsync(AnswerOption updatedAnswerOption)
        {
            
            var existingAnswerOption = await _context.AnswerOptions
                .FirstOrDefaultAsync(a => a.Id == updatedAnswerOption.Id);

            if (existingAnswerOption == null)
            {
                throw new Exception("Answer option not found.");
            }

            if (existingAnswerOption.Text == updatedAnswerOption.Text &&
        existingAnswerOption.IsCorrect == updatedAnswerOption.IsCorrect)
            {
                return existingAnswerOption;
            }

            existingAnswerOption.Text = updatedAnswerOption.Text;
            existingAnswerOption.IsCorrect = updatedAnswerOption.IsCorrect;

            await _context.SaveChangesAsync();

            return existingAnswerOption;
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Questions/Services/IQuestionService.cs">
using QuizAPI.DTOs.Question;
using QuizAPI.DTOs.Shared;
using QuizAPI.Models;

namespace QuizAPI.Controllers.Questions.Services
{
    public interface IQuestionService
    {
        // Get methods
        Task<List<QuestionBaseDTO>> GetAllQuestionsAsync(string visibility = null);

        Task<PagedList<QuestionBaseDTO>> GetPaginatedQuestionsAsync(QuestionFilterParams filterParams);
        Task<QuestionBaseDTO> GetQuestionByIdAsync(int id);
        Task<List<QuestionBaseDTO>> GetQuestionsByCategoryAsync(int categoryId);
        Task<List<QuestionBaseDTO>> GetQuestionsByDifficultyAsync(int difficultyId);
        Task<List<QuestionBaseDTO>> GetQuestionsByUserAsync(Guid userId);

        // Type-specific get methods
        Task<List<MultipleChoiceQuestionDTO>> GetMultipleChoiceQuestionsAsync();
        Task<PagedList<MultipleChoiceQuestionDTO>> GetPaginatedMultipleChoiceQuestionsAsync(QuestionFilterParams filterParams);
        Task<List<TrueFalseQuestionDTO>> GetTrueFalseQuestionsAsync();
        Task<PagedList<TrueFalseQuestionDTO>> GetPaginatedTrueFalseQuestionsAsync(QuestionFilterParams filterParams);
        Task<List<TypeTheAnswerQuestionDTO>> GetTypeTheAnswerQuestionsAsync();
        Task<PagedList<TypeTheAnswerQuestionDTO>> GetPaginatedTypeTheAnswerQuestionsAsync(QuestionFilterParams filterParams);


        // Create methods
        Task<MultipleChoiceQuestionDTO> CreateMultipleChoiceQuestionAsync(MultipleChoiceQuestionCM questionCM, Guid userId);
        Task<TrueFalseQuestionDTO> CreateTrueFalseQuestionAsync(TrueFalseQuestionCM questionCM, Guid userId);
        Task<TypeTheAnswerQuestionDTO> CreateTypeTheAnswerQuestionAsync(TypeTheAnswerQuestionCM questionCM, Guid userId);

        // Update methods
        Task<MultipleChoiceQuestionDTO> UpdateMultipleChoiceQuestionAsync(MultipleChoiceQuestionUM questionUM, Guid userId);
        Task<TrueFalseQuestionDTO> UpdateTrueFalseQuestionAsync(TrueFalseQuestionUM questionUM, Guid userId);
        Task<TypeTheAnswerQuestionDTO> UpdateTypeTheAnswerQuestionAsync(TypeTheAnswerQuestionUM questionUM, Guid userId);

        // Delete method
        Task<bool> DeleteQuestionAsync(int id, Guid userId);
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Quizzes/Services/QuizServices/IQuizService.cs">
using QuizAPI.DTOs.Quiz;
using QuizAPI.ManyToManyTables;
using QuizAPI.Models;
using QuizAPI.Models.Quiz;

namespace QuizAPI.Controllers.Quizzes.Services.QuizServices
{
    public interface IQuizService
    {
        /// <summary>
        /// Get all quizzes with summary information
        /// </summary>
        /// <param name="includeInactive">Whether to include inactive quizzes</param>
        /// <returns>List of quiz summaries</returns>
        Task<PagedList<QuizSummaryDTO>> GetAllQuizzesAsync(QuizFilterParams filterParam);

        /// <summary>
        /// Get quizzes created by a specific user
        /// </summary>
        /// <param name="userId">The user ID</param>
        /// <param name="includeInactive">Whether to include inactive quizzes</param>
        /// <returns>List of quiz summaries</returns>
        Task<PagedList<QuizSummaryDTO>> GetQuizzesByUserAsync(Guid userId, QuizFilterParams filterParam);

        /// <summary>
        /// Get a quiz by its ID with detailed information including questions
        /// </summary>
        /// <param name="id">The quiz ID</param>
        /// <returns>Detailed quiz information or null if not found</returns>
        Task<QuizDTO?> GetQuizByIdAsync(int id);

        /// <summary>
        /// Create a new quiz
        /// </summary>
        /// <param name="userId">ID of the user creating the quiz</param>
        /// <param name="quizCM">Quiz creation model</param>
        /// <returns>Created quiz</returns>
        Task<QuizDTO> CreateQuizAsync(Guid userId, QuizCM quizCM);

        /// <summary>
        /// Update an existing quiz
        /// </summary>
        /// <param name="userId">ID of the user updating the quiz</param>
        /// <param name="quizUM">Quiz update model</param>
        /// <returns>Updated quiz or null if not found or user doesn't have permission</returns>
        Task<QuizDTO?> UpdateQuizAsync(Guid userId, QuizUM quizUM);

        /// <summary>
        /// Toggle quiz publish status (published/unpublished)
        /// </summary>
        /// <param name="userId">ID of the user toggling the status</param>
        /// <param name="quizId">ID of the quiz</param>
        /// <returns>Updated quiz or null if not found or user doesn't have permission</returns>
        Task<QuizDTO?> ToggleQuizPublishStatusAsync(Guid userId, int quizId);

        /// <summary>
        /// Toggle quiz active status (active/inactive)
        /// </summary>
        /// <param name="userId">ID of the user toggling the status</param>
        /// <param name="quizId">ID of the quiz</param>
        /// <returns>Updated quiz or null if not found or user doesn't have permission</returns>
        Task<QuizDTO?> ToggleQuizActiveStatusAsync(Guid userId, int quizId);

        /// <summary>
        /// Get all publicly available quizzes
        /// </summary>
        /// <returns>List of publicly available quiz summaries</returns>
        Task<IEnumerable<QuizSummaryDTO>> GetPublicQuizzesAsync();
    }
}
</file>

<file path="OxygenBackend/QuizAPI/ManyToManyTables/QuizQuestion.cs">
using QuizAPI.Models.Quiz;
using QuizAPI.Models;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using QuizAPI.DTOs.Question;

namespace QuizAPI.ManyToManyTables
{

    public enum PointSystem
    {
        Standard,
        Double,
        Quadruple,
    }

    public class QuizQuestion
    {
        public int QuizId { get; set; }
        [ForeignKey(nameof(QuizId))]
        public Quiz Quiz { get; set; }

        public int TimeLimitInSeconds { get; set; } = 10;

        public PointSystem PointSystem { get; set; } = PointSystem.Standard;

        public int QuestionId { get; set; }
        [ForeignKey(nameof(QuestionId))]
        public QuestionBase Question { get; set; }

        public int OrderInQuiz { get; set; }

    }
}
</file>

<file path="OxygenBackend/QuizAPI/Mapping/QuestionMappingProfile.cs">
using AutoMapper;
using QuizAPI.DTOs.Question;
using QuizAPI.DTOs.User;
using QuizAPI.Models;

namespace QuizAPI.Mapping
{
    public class QuestionMappingProfile : Profile
    {

        public QuestionMappingProfile()
        {
            // Map DTOs to models
            CreateMap<QuestionBaseDTO, QuestionBase>()
                .ForMember(dest => dest.Visibility, opt => opt.MapFrom(src => Enum.Parse<QuestionVisibility>(src.Visibility)));

            CreateMap<MultipleChoiceQuestionDTO, MultipleChoiceQuestion>();
            CreateMap<TrueFalseQuestionDTO, TrueFalseQuestion>();
            CreateMap<TypeTheAnswerQuestionDTO, TypeTheAnswerQuestion>();
            CreateMap<AnswerOptionDTO, AnswerOption>();

            // Map models to DTOs
            CreateMap<QuestionBase, QuestionBaseDTO>()
                .ForMember(dest => dest.Visibility, opt => opt.MapFrom(src => src.Visibility.ToString()))
                .ForMember(dest => dest.Type, opt => opt.MapFrom(src => src.Type.ToString()));

            CreateMap<MultipleChoiceQuestion, MultipleChoiceQuestionDTO>()
                .IncludeBase<QuestionBase, QuestionBaseDTO>();
            CreateMap<TrueFalseQuestion, TrueFalseQuestionDTO>()
                .IncludeBase<QuestionBase, QuestionBaseDTO>();
            CreateMap<TypeTheAnswerQuestion, TypeTheAnswerQuestionDTO>()
                .IncludeBase<QuestionBase, QuestionBaseDTO>();

            CreateMap<AnswerOption, AnswerOptionDTO>();
            CreateMap<QuestionDifficulty, DifficultyDTO>();
            CreateMap<QuestionCategory, CategoryDTO>();
            CreateMap<QuestionLanguage, LanguageDTO>();
            CreateMap<User, UserBasicDTO>();

            // Map creation models
            CreateMap<QuestionBaseCM, QuestionBase>()
                .ForMember(dest => dest.Visibility, opt => opt.MapFrom(src => Enum.Parse<QuestionVisibility>(src.Visibility)));

            CreateMap<MultipleChoiceQuestionCM, MultipleChoiceQuestion>()
                .IncludeBase<QuestionBaseCM, QuestionBase>();
            CreateMap<TrueFalseQuestionCM, TrueFalseQuestion>()
                .IncludeBase<QuestionBaseCM, QuestionBase>();
            CreateMap<TypeTheAnswerQuestionCM, TypeTheAnswerQuestion>()
                .IncludeBase<QuestionBaseCM, QuestionBase>();
            CreateMap<AnswerOptionCM, AnswerOption>();

            // Map update models
            CreateMap<QuestionBaseUM, QuestionBase>()
                .ForMember(dest => dest.Visibility, opt => opt.MapFrom(src => Enum.Parse<QuestionVisibility>(src.Visibility)));

            CreateMap<MultipleChoiceQuestionUM, MultipleChoiceQuestion>()
                .IncludeBase<QuestionBaseUM, QuestionBase>();
            CreateMap<TrueFalseQuestionUM, TrueFalseQuestion>()
                .IncludeBase<QuestionBaseUM, QuestionBase>();
            CreateMap<TypeTheAnswerQuestionUM, TypeTheAnswerQuestion>()
                .IncludeBase<QuestionBaseUM, QuestionBase>();
            CreateMap<AnswerOptionUM, AnswerOption>();

            // Map for IndividualQuestionDTO
            CreateMap<QuestionBase, IndividualQuestionDTO>()
                .ForMember(dest => dest.Difficulty, opt => opt.MapFrom(src => src.Difficulty.Level))
                .ForMember(dest => dest.Category, opt => opt.MapFrom(src => src.Category.Name))
                .ForMember(dest => dest.Language, opt => opt.MapFrom(src => src.Language.Language))
                .ForMember(dest => dest.Visibility, opt => opt.MapFrom(src => src.Visibility.ToString()));

            CreateMap<MultipleChoiceQuestion, IndividualQuestionDTO>()
                .IncludeBase<QuestionBase, IndividualQuestionDTO>();
        }


    }
}
</file>

<file path="OxygenBackend/QuizAPI/Mapping/QuizMappingProfile.cs">
using AutoMapper;
using QuizAPI.DTOs.Question;
using QuizAPI.DTOs.Quiz;
using QuizAPI.DTOs.User;
using QuizAPI.ManyToManyTables;
using QuizAPI.Models.Quiz;
using QuizAPI.Models;

public class QuizMappingProfile : Profile
{
    public QuizMappingProfile()
    {
        // --- QuizQuestion Mappings ---

        // QuizQuestion Entity to QuizQuestionDTO (for reading)
        CreateMap<QuizQuestion, QuizQuestionDTO>()
            .ForMember(dest => dest.PointSystem, opt => opt.MapFrom(src => src.PointSystem.ToString()))
            .ForMember(dest => dest.Question, opt => opt.MapFrom(src => src.Question));

        // QuizQuestionCM (Create Model) to QuizQuestion Entity
        CreateMap<QuizQuestionCM, QuizQuestion>()
            .ForMember(dest => dest.QuizId, opt => opt.Ignore())
            .ForMember(dest => dest.Quiz, opt => opt.Ignore())
            .ForMember(dest => dest.Question, opt => opt.Ignore())
            .ForMember(dest => dest.TimeLimitInSeconds, opt => opt.MapFrom(src => src.TimeLimitInSeconds))
            .ForMember(dest => dest.OrderInQuiz, opt => opt.MapFrom(src => src.OrderInQuiz))
            .ForMember(dest => dest.PointSystem, opt => opt.MapFrom(src => Enum.Parse<PointSystem>(src.PointSystem, true)));

        // QuizQuestionUM (Update Model) to QuizQuestion Entity
        CreateMap<QuizQuestionUM, QuizQuestion>()
            .ForMember(dest => dest.Quiz, opt => opt.Ignore())
            .ForMember(dest => dest.Question, opt => opt.Ignore())
            .ForMember(dest => dest.TimeLimitInSeconds, opt => opt.MapFrom(src => src.TimeLimitInSeconds))
            .ForMember(dest => dest.OrderInQuiz, opt => opt.MapFrom(src => src.OrderInQuiz))
            .ForMember(dest => dest.PointSystem, opt => opt.MapFrom(src => Enum.Parse<PointSystem>(src.PointSystem, true)));

        // Quiz Entity to QuizSummaryDTO (for list views)
        CreateMap<Quiz, QuizSummaryDTO>()
            .ForMember(dest => dest.Category, opt => opt.MapFrom(src => src.Category.Name))
            .ForMember(dest => dest.Difficulty, opt => opt.MapFrom(src => src.Difficulty.Level))
            .ForMember(dest => dest.Language, opt => opt.MapFrom(src => src.Language.Language))
            .ForMember(dest => dest.QuestionCount, opt => opt.MapFrom(src => src.QuizQuestions.Count))
            .ForMember(dest => dest.User, opt => opt.MapFrom(src => src.User.Username))
            .ForMember(dest => dest.Visibility, opt => opt.MapFrom(src => src.Visibility.ToString()));

        // Quiz Entity to QuizDTO (for detail view)
        CreateMap<Quiz, QuizDTO>()
            .ForMember(dest => dest.User, opt => opt.MapFrom(src => src.User))
            .ForMember(dest => dest.Category, opt => opt.MapFrom(src => src.Category))
            .ForMember(dest => dest.Language, opt => opt.MapFrom(src => src.Language))
            .ForMember(dest => dest.Difficulty, opt => opt.MapFrom(src => src.Difficulty))
            .ForMember(dest => dest.Questions, opt => opt.MapFrom(src => src.QuizQuestions))
            .ForMember(dest => dest.ShowFeedbackImmediately, opt => opt.MapFrom(src => src.ShowFeedbackImmediately))
            .ForMember(dest => dest.QuestionCount, opt => opt.MapFrom(src => src.QuizQuestions.Count))
            .ForMember(dest => dest.Visibility, opt => opt.MapFrom(src => src.Visibility.ToString()));

        // QuizCM (Create Model) to Quiz Entity - FIXED
        CreateMap<QuizCM, Quiz>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.UserId, opt => opt.Ignore())
            .ForMember(dest => dest.User, opt => opt.Ignore())
            .ForMember(dest => dest.Category, opt => opt.Ignore())
            .ForMember(dest => dest.Language, opt => opt.Ignore())
            .ForMember(dest => dest.Difficulty, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore()) // Let your service method set this
            .ForMember(dest => dest.Version, opt => opt.Ignore()) // Let your service method set this
            .ForMember(dest => dest.ShowFeedbackImmediately, opt => opt.MapFrom(src => src.ShowFeedbackImmediately))
            .ForMember(dest => dest.IsActive, opt => opt.Ignore()) // Let your service method set this
            .ForMember(dest => dest.QuizQuestions, opt => opt.Ignore()) // ✅ IGNORE - Handle separately in service
            .ForMember(dest => dest.Visibility, opt => opt.MapFrom(src => Enum.Parse<QuizVisibility>(src.Visibility, true)));

        // QuizUM (Update Model) to Quiz Entity - FIXED
        CreateMap<QuizUM, Quiz>()
            .ForMember(dest => dest.UserId, opt => opt.Ignore())
            .ForMember(dest => dest.User, opt => opt.Ignore())
            .ForMember(dest => dest.Category, opt => opt.Ignore())
            .ForMember(dest => dest.Language, opt => opt.Ignore())
            .ForMember(dest => dest.Difficulty, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.ShowFeedbackImmediately, opt => opt.MapFrom(src => src.ShowFeedbackImmediately))
            .ForMember(dest => dest.QuizQuestions, opt => opt.Ignore()) // ✅ IGNORE - Handle separately in service
            .ForMember(dest => dest.Visibility, opt => opt.MapFrom(src => Enum.Parse<QuizVisibility>(src.Visibility, true)));

        // Common entity-to-DTO mappings
        CreateMap<User, UserBasicDTO>();
        CreateMap<QuestionCategory, CategoryDTO>();
        CreateMap<QuestionLanguage, LanguageDTO>();
        CreateMap<QuestionDifficulty, DifficultyDTO>();
        CreateMap<QuestionBase, QuestionBaseDTO>();
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/Pagination.cs">
using Microsoft.EntityFrameworkCore;

namespace QuizAPI.Models
{
    public class PaginationParams
    {
        private const int MaxPageSize = 50;
        private int _pageSize = 20;

        public int PageNumber { get; set; } = 1;

        public int PageSize
        {
            get => _pageSize;
            set => _pageSize = (value > MaxPageSize) ? MaxPageSize : value;
        }
    }

    public class QuestionFilterParams : PaginationParams
    {
        public string? SearchTerm { get; set; }
        public int? CategoryId { get; set; }
        public int? DifficultyId { get; set; }
        public int? LanguageId { get; set; }
        public string? Visibility { get; set; }
        public QuestionType? Type { get; set; }
        public Guid? UserId { get; set; }
    }

    public class QuizFilterParams : PaginationParams
    {
        public string? SearchTerm { get; set; }
        public int? CategoryId { get; set; }
        public int? DifficultyId { get; set; }
        public int? LanguageId { get; set; }
        public string? Visibility { get; set; }

        public bool? IsPublished { get; set; }

        public bool? IsActive { get; set; }
        public Guid? UserId { get; set; }

    }

    public class PagedList<T>
    {
        public List<T> Items { get; set; }
        public int PageNumber { get; set; }
        public int PageSize { get; set; }
        public int TotalCount { get; set; }
        public int TotalPages => (int)Math.Ceiling(TotalCount / (double)PageSize);
        public bool HasPreviousPage => PageNumber > 1;
        public bool HasNextPage => PageNumber < TotalPages;

        public PagedList(List<T> items, int count, int pageNumber, int pageSize)
        {
            Items = items;
            TotalCount = count;
            PageNumber = pageNumber;
            PageSize = pageSize;
        }

        public static async Task<PagedList<T>> CreateAsync(IQueryable<T> source, int pageNumber, int pageSize)
        {
            const int MaxPageSize = 50;
            pageSize = pageSize > MaxPageSize ? MaxPageSize : pageSize;

            var count = await source.CountAsync();
            var items = await source.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToListAsync();
            return new PagedList<T>(items, count, pageNumber, pageSize);
        }
    }
}
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react";

import { cn } from "@/utils/cn";
import { useTheme } from "./theme-provider";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { theme } = useTheme();
  const hasCustomBorder = className?.includes("border") || false;
  return (
    <div
      ref={ref}
      className={cn(
        `${
          theme === "dark"
            ? `bg-muted ${hasCustomBorder ? "" : "border-none"}`
            : `bg-card border`
        } rounded-xl text-card-foreground shadow dark:shadow-card`,
        className
      )}
      {...props}
    />
  );
});
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};
</file>

<file path="src/layouts/dashboard-layout.tsx">
import { useState } from "react";
import { DashboardHeader } from "@/pages/Dashboard/Components/DashboardHeader";
import { DashboardNav } from "@/pages/Dashboard/Components/DashboardNav";
import { useNavigate } from "react-router";

export const DashboardLayout = ({
  children,
}: {
  children: React.ReactNode;
}) => {
  const navigate = useNavigate();
  const [isNavCollapsed, setIsNavCollapsed] = useState(false);

  const setActivePage = (page: string) => {
    navigate(`/dashboard/${page}`);
  };

  const isQuizCreatorPage =
    location.pathname === "/dashboard/quizzes/create-quiz";

  return (
    <div
      className={`text-foreground ${
        !isQuizCreatorPage ? "grid grid-rows-[auto_1fr] h-screen" : ""
      }`}
      style={{
        gridTemplateColumns: !isQuizCreatorPage
          ? isNavCollapsed
            ? "5rem 1fr"
            : "16rem 1fr"
          : "1fr",
      }}
    >
      <div className={`${!isQuizCreatorPage ? "col-span-2" : ""}`}>
        <DashboardHeader />
      </div>

      {!isQuizCreatorPage && (
        <div className="bg-background relative shadow-md h-full transition-all duration-300 ease-in-out">
          <DashboardNav
            setActivePage={setActivePage}
            activePage={location.pathname.split("/").pop() || "questions"}
            isCollapsed={isNavCollapsed}
            setIsCollapsed={setIsNavCollapsed}
          />
        </div>
      )}

      <div
        className="overflow-y-auto bg-muted p-10 min-h-[90vh] h-full"
        style={
          {
            maxHeight: "calc(100vh - 64px)",  
          }
        }
      >
        {children}
      </div>
    </div>
  );
};

export default DashboardLayout;
</file>

<file path="src/pages/Dashboard/Pages/Question/api/Normal-Question/create-multiple-choice-question.ts">
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { z } from "zod";
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import { MultipleChoiceQuestion } from "@/types/ApiTypes";
import { answerOptionsSchema } from "../../../Quiz/api/create-quiz";
import { getMultipleChoiceQuestionsQueryOptions } from "./get-multiple-choice-questions";


export const createMultipleChoiceQuestionInputSchema = z.object({
  text: z.string().min(1, "Question is required"),
  difficultyId: z.number().int().positive({ message: "Difficulty is required" }),
  categoryId: z.number().int().positive({ message: "Category is required" }),
  languageId: z.number().int().positive({ message: "Language is required" }),
  imageUrl: z.string().optional(),
  answerOptions: answerOptionsSchema,
  allowMultipleSelections: z.boolean().default(false),
  visibility: z.string().optional().default("Global"),
});

export type CreateMultipleChoiceQuestionInput = z.infer<typeof createMultipleChoiceQuestionInputSchema>;

export const createMultipleChoiceQuestion = ({ data }: { data: CreateMultipleChoiceQuestionInput }): Promise<MultipleChoiceQuestion> => {
  return api.post('/questions/multiplechoice', data);
};

type UseCreateMultipleChoiceQuestionOptions = {
  mutationConfig?: MutationConfig<typeof createMultipleChoiceQuestion>;
};

export const useCreateMultipleChoiceQuestion = ({ mutationConfig }: UseCreateMultipleChoiceQuestionOptions = {}) => {
  const queryClient = useQueryClient();
  
  const { onSuccess, onError, ...restConfig } = mutationConfig || {};

  return useMutation({
    mutationFn: createMultipleChoiceQuestion,
    onSuccess: (...args) => {
      queryClient.invalidateQueries({ queryKey: getMultipleChoiceQuestionsQueryOptions().queryKey });
      onSuccess?.(...args);
    },
    onError: (error, variables, context) => {
      console.error('Error creating multiple choice question:', error);
      onError?.(error, variables, context);
    },
    ...restConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Question/api/Normal-Question/update-multiple-choice-question.ts">
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { z } from "zod";
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import { answerOptionsSchema } from "../../../Quiz/api/create-quiz";
import { MultipleChoiceQuestion } from "@/types/ApiTypes";
import { getMultipleChoiceQuestionsQueryOptions } from "./get-multiple-choice-questions";

export const updateMultipleChoiceQuestionInputSchema = z.object({
  id: z.number().int().optional(), 
  text: z.string().min(1, "Question is required"),
  imageUrl: z.string().nullable().optional(), 
  difficultyId: z.number().int().positive({ message: "Difficulty is required" }),
  categoryId: z.number().int().positive({ message: "Category is required" }),
  languageId: z.number().int().positive({ message: "Language is required" }),
  visibility: z.string().min(1, "Visibility is required"),
  
  answerOptions: answerOptionsSchema,
  allowMultipleSelections: z.boolean().default(false)
});

export type UpdateMultipleChoiceQuestionInput = z.infer<typeof updateMultipleChoiceQuestionInputSchema>;

export const updateMultipleChoiceQuestion = ({ data, questionId }: { data: UpdateMultipleChoiceQuestionInput, questionId: number}): Promise<MultipleChoiceQuestion> => {
  return (
    console.log("data", data, questionId),
    api.put(`/questions/multiplechoice/${questionId}`, data)
  );
};

type UseUpdateMultipleChoiceQuestionOptions = {
  mutationConfig?: MutationConfig<typeof updateMultipleChoiceQuestion>;
};

export const useUpdateMultipleChoiceQuestion = ({ mutationConfig }: UseUpdateMultipleChoiceQuestionOptions = {}) => {
  const queryClient = useQueryClient();
  
  const { onSuccess, onError, ...restConfig } = mutationConfig || {};

  return useMutation({
    mutationFn: updateMultipleChoiceQuestion,
    onSuccess: (data, ...args) => {
      queryClient.refetchQueries({ queryKey: getMultipleChoiceQuestionsQueryOptions().queryKey });
      onSuccess?.(data, ...args);
    },
    onError: (error, variables, context) => {
      console.error('Error updating question:', error);
      onError?.(error, variables, context);
    },
    ...restConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Question/api/Type_The_Answer-Question/get-type-the-answer-questions.ts">
import { queryOptions, useQuery } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";
import { PaginatedTypeTheAnswerQuestionResponse } from "@/types/ApiTypes";
import { AxiosResponse } from "axios";
import { cleanQueryParams, extractPaginationFromHeaders } from "@/lib/pagination-query";

export type GetTypeTheAnswerQuestionsParams = {
  pageNumber?: number;
  pageSize?: number;
  searchTerm?: string;
  categoryId?: number | null;
  difficultyId?: number | null;
  languageId?: number | null;
  visibility?: string | null;
  userId?: string | null;
};

export const getTypeTheAnswerQuestions = async (
  params: GetTypeTheAnswerQuestionsParams
): Promise<PaginatedTypeTheAnswerQuestionResponse> => {
  const cleanParams = cleanQueryParams(params as Record<string, any>);
  const queryString = new URLSearchParams(cleanParams).toString();
  const result: AxiosResponse = await api.get(
    `/questions/typeTheAnswer?${queryString}`
  );
  const pagination = extractPaginationFromHeaders(result);

  return {
    data: result.data,
    pagination: pagination || undefined,
  };
};

export const getTypeTheAnswerQuestionsQueryOptions = (
  params: GetTypeTheAnswerQuestionsParams = {}
) => {
  return queryOptions({
    queryKey: ["typeTheAnswerQuestions", params],
    queryFn: () => getTypeTheAnswerQuestions(params),
  });
};

type UseTypeTheAnswerQuestionOptions = {
  queryConfig?: QueryConfig<typeof getTypeTheAnswerQuestionsQueryOptions>;
  params?: GetTypeTheAnswerQuestionsParams;
};

export const useTypeTheAnswerQuestionData = ({
  queryConfig,
  params,
}: UseTypeTheAnswerQuestionOptions) => {
  return useQuery({
    ...getTypeTheAnswerQuestionsQueryOptions(params),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/Multiple_Choice_Question/multiple-choice-question-card.tsx">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import {
  MultipleChoiceQuestion,
  AnswerOption,
  QuestionType,
} from "@/types/ApiTypes";
import { CheckCircle, XCircle, ChevronDown, ImageIcon } from "lucide-react";
import { cn } from "@/utils/cn";
import { DeleteQuestion } from "../Re-Usable-Components/delete-question";
import UpdateMultipleChoiceQuestionForm from "./update-multiple-choice-question";




interface MultipleChoiceQuestionCardProps {
  question: MultipleChoiceQuestion;
}

export const MultipleChoiceQuestionCard = ({
  question,
}: MultipleChoiceQuestionCardProps) => {
  return (
    <Card className="mb-4 border shadow-sm dark:border-foreground/20 dark:bg-primary/10 overflow-hidden">
      <CardHeader className="pb-2 pt-4">
        <div className="flex flex-wrap items-center justify-between gap-2">
          <CardTitle className="text-lg leading-tight flex-1">
            {question.text}
            {question.imageUrl && (
              <Badge
                variant="outline"
                className="ml-2 bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800/50"
              >
                <ImageIcon className="h-3 w-3 mr-1" />
                <span className="text-blue-600 dark:text-blue-400">Image</span>
              </Badge>
            )}
          </CardTitle>
          <div className="flex items-center gap-2 flex-shrink-0">
            <Badge variant="outline" className="text-xs">
              ID: {question.id}
            </Badge>
            <Badge
              variant="outline"
              className={cn(
                question.difficulty.level === "Easy" &&
                  "text-green-600 dark:text-green-400 border-green-200 dark:border-green-800/50",
                question.difficulty.level === "Medium" &&
                  "text-amber-600 dark:text-amber-400 border-amber-200 dark:border-amber-800/50",
                question.difficulty.level === "Hard" &&
                  "text-red-600 dark:text-red-400 border-red-200 dark:border-red-800/50"
              )}
            >
              {question.difficulty.level}
            </Badge>
          </div>
        </div>
        <div className="flex flex-wrap items-center gap-2 mt-2">
          <Badge variant="secondary" className="text-xs font-normal">
            {question.category.name}
          </Badge>
          <Badge variant="secondary" className="text-xs font-normal">
            {question.allowMultipleSelections
              ? "Multiple Selections"
              : "Single Selection"}
          </Badge>
          <Badge variant="secondary" className="text-xs font-normal">
            {question.language.language}
          </Badge>
          <Badge variant="secondary" className="text-xs font-normal capitalize">
            {question.visibility}
          </Badge>
        </div>
      </CardHeader>

      <CardContent className="pb-2 pt-0">
        <Accordion type="single" collapsible className="w-full">
          <AccordionItem value="details" className="border-b-0">
            <AccordionTrigger className="py-2 text-sm font-medium flex justify-between">
              <span className="text-sm font-medium">Answer Options</span>
              <ChevronDown className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
            </AccordionTrigger>
            <AccordionContent>
              <div className="space-y-3">
                {question.imageUrl && (
                  <div className="w-full mb-3 rounded-md overflow-hidden border dark:border-foreground/30">
                    <img
                      src={question.imageUrl}
                      alt="Question image"
                      className="w-full h-auto max-h-48 object-contain mx-auto"
                    />
                  </div>
                )}

                <ul className="space-y-2">
                  {question.answerOptions.map((option: AnswerOption) => (
                    <li
                      key={option.id}
                      className={cn(
                        "flex items-center p-2 rounded-md border",
                        option.isCorrect
                          ? "bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800"
                          : "bg-red-50 border-red-200 dark:bg-red-900/10 dark:border-red-800/50"
                      )}
                    >
                      {option.isCorrect ? (
                        <CheckCircle className="h-4 w-4 text-green-500 dark:text-green-400 flex-shrink-0 mr-2" />
                      ) : (
                        <XCircle className="h-4 w-4 text-red-500 dark:text-red-400 flex-shrink-0 mr-2" />
                      )}
                      <div className="flex-1 text-sm">{option.text}</div>
                    </li>
                  ))}
                </ul>

                <div className="text-xs text-muted-foreground mt-2 pt-2 border-t dark:border-foreground/30">
                  Created:{" "}
                  {new Date(question.createdAt).toLocaleDateString(undefined, {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                  })}
                </div>
              </div>
              <section className="flex items-center justify-end gap-2 mr-2">
                <DeleteQuestion
                  id={question.id}
                  questionType={QuestionType.MultipleChoice}
                />
                <UpdateMultipleChoiceQuestionForm question={question} />
              </section>
            </AccordionContent>
          </AccordionItem>
        </Accordion>
      </CardContent>
    </Card>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/Multiple_Choice_Question/update-multiple-choice-question.tsx">
import { Pen, Trash2 } from "lucide-react";
import React, { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Form, FormDrawer, Input, Label } from "@/components/ui/form";
import { useNotifications } from "@/common/Notifications";
import { useFieldArray } from "react-hook-form";
import { Switch } from "@/components/ui/switch";
import { Separator } from "@/components/ui/separator";

import {
  updateMultipleChoiceQuestionInputSchema,
  useUpdateMultipleChoiceQuestion,
} from "../../api/Normal-Question/update-multiple-choice-question";
import { MultipleChoiceQuestion } from "@/types/ApiTypes";
import { useQuizForm } from "../../../Quiz/components/Create-Quiz-Form/use-quiz-form";
import { CategorySelect } from "../../Entities/Categories/Components/select-question-category";
import { DifficultySelect } from "../../Entities/Difficulty/Components/select-question-difficulty";
import { LanguageSelect } from "../../Entities/Language/components/select-question-language";
import { VisibilitySelect } from "../../Entities/select-visibility";
import { LiftedButton } from "@/common/LiftedButton";
import ImageUpload from "@/utils/Image-Upload";

interface UpdateMultipleChoiceQuestionFormProps {
  question: MultipleChoiceQuestion;
}

export const UpdateMultipleChoiceQuestionForm: React.FC<
  UpdateMultipleChoiceQuestionFormProps
> = ({ question }) => {
  console.log("question", question);
  const { addNotification } = useNotifications();
  const [imageUrl, setImageUrl] = useState(question.imageUrl || "");
  const { queryData } = useQuizForm();

  const updateQuestionMutation = useUpdateMultipleChoiceQuestion({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Multiple Choice Question Updated",
        });
      },
    },
  });

  return (
    <FormDrawer
      isDone={updateQuestionMutation.isSuccess}
      triggerButton={
        <LiftedButton variant="icon">
          <Pen className="size-4" />
        </LiftedButton>
      }
      title="Update Question"
      submitButton={
        <Button
          form="update-question"
          variant="addSave"
          className="rounded-sm text-white "
          type="submit"
          size="default"
          isPending={updateQuestionMutation.isPending}
          disabled={updateQuestionMutation.isPending}
        >
          Update
        </Button>
      }
    >
      <Form
        id="update-question"
        className="w-[500px]"
        options={{
          defaultValues: {
            id: question.id,
            text: question.text,
            imageUrl: question.imageUrl || null,
            categoryId: question.category.id,
            difficultyId: question.difficulty.id,
            languageId: question.language.id,
            visibility: question.visibility,
            answerOptions: question.answerOptions,
            allowMultipleSelections: question.allowMultipleSelections || false,
          },
        }}
        onSubmit={(values) => {
          const isCorrectSelected = values.answerOptions.some(
            (option: any) => option.isCorrect
          );

          if (!isCorrectSelected) {
            return;
          }

          updateQuestionMutation.mutate({
            data: values,
            questionId: question.id,
          });
        }}
        schema={updateMultipleChoiceQuestionInputSchema}
      >
        {({ register, formState, control, setValue, watch, clearErrors }) => {
          const { fields, remove, append } = useFieldArray({
            control,
            name: "answerOptions",
          });

          const addOptionDisabled = fields.length >= 4;

          const handleSwitchChange = (index: number) => {
            // If allowMultipleSelections is true, don't unselect other options
            if (!watch("allowMultipleSelections")) {
              const updatedOptions = fields.map((field, i) => ({
                ...field,
                isCorrect: i === index,
              }));
              updatedOptions.forEach((option, i) => {
                setValue(`answerOptions.${i}.isCorrect`, option.isCorrect);
              });
            } else {
              // Just toggle the current option
              const currentValue = watch(`answerOptions.${index}.isCorrect`);
              setValue(`answerOptions.${index}.isCorrect`, !currentValue);
            }

            if (
              watch("answerOptions").some((option: any) => option.isCorrect)
            ) {
              clearErrors("answerOptions");
            }
          };

          const handleImageUpload = (url: string) => {
            setImageUrl(url);
            setValue("imageUrl", url);
          };
          const handleImageRemove = () => {
            setImageUrl("");
            setValue("imageUrl", "");
          };

          useEffect(() => {
            if (imageUrl) {
              setValue("imageUrl", imageUrl);
            }
          }, [imageUrl, setValue]);

          return (
            <>
              <Input
                variant="quiz"
                id="questionText"
                className={formState.errors["text"] ? "border-red-500" : ""}
                error={formState.errors["text"]}
                registration={register("text")}
              />
              <ImageUpload
                initialImageUrl={imageUrl}
                onUpload={handleImageUpload}
                onRemove={handleImageRemove}
              />
              <div className="flex items-center space-x-2 mt-4">
                <Switch
                  id="allowMultipleSelections"
                  checked={watch("allowMultipleSelections")}
                  onCheckedChange={(checked: boolean) => {
                    setValue("allowMultipleSelections", checked);
                  }}
                />
                <Label htmlFor="allowMultipleSelections">
                  Allow Multiple Selections
                </Label>
              </div>

              <Separator className="bg-gray-500" />

              <div className="space-y-4 mt-4">
                <div className="flex items-center justify-between">
                  <Label>Answer Options</Label>
                </div>
                {fields.map((field, index) => {
                  const isCorrect = watch(`answerOptions.${index}.isCorrect`);

                  return (
                    <div
                      key={field.id}
                      className="flex items-center justify-between gap-6"
                    >
                      <Input
                        className={`${
                          formState.errors["answerOptions"]
                            ? "border-red-500"
                            : ""
                        } ${isCorrect ? "border-2 border-green-500" : ""}`}
                        placeholder={`Answer Option ${index + 1}`}
                        error={formState.errors?.answerOptions?.[index]?.text}
                        registration={register(`answerOptions.${index}.text`)}
                      />

                      <div className="flex flex-col items-center">
                        <Switch
                          className="shadow-md"
                          id={`correct-${index}`}
                          checked={isCorrect}
                          onCheckedChange={() => handleSwitchChange(index)}
                        />
                        <Label
                          htmlFor={`correct-${index}`}
                          className="text-xs text-gray-600 mt-1"
                        >
                          Correct
                        </Label>
                      </div>
                      <LiftedButton
                        variant="icon"
                        className="rounded-xl bg-red-400"
                        onClick={() => remove(index)}
                        disabled={fields.length <= 2}
                      >
                        <Trash2 className="h-4 w-4 " />
                      </LiftedButton>
                    </div>
                  );
                })}
                {formState.errors?.answerOptions && (
                  <p className="text-sm text-red-500">
                    At least one option needs to be correct!
                  </p>
                )}
                <Button
                  type="button"
                  variant="addSave"
                  size="sm"
                  onClick={() => append({ text: "", isCorrect: false })}
                  disabled={addOptionDisabled}
                >
                  Add Answer Option
                </Button>
              </div>
              <Separator className="bg-gray-500" />
              <div className="grid grid-cols-2 gap-4 ">
                <CategorySelect
                  label="Category"
                  categories={queryData.categories}
                  value={watch("categoryId")?.toString() || ""}
                  onChange={(value: string) =>
                    setValue("categoryId", parseInt(value, 10))
                  }
                  includeAllOption={false}
                  error={formState.errors["categoryId"]?.message}
                  clearErrors={() => clearErrors("categoryId")}
                />

                <DifficultySelect
                  label="Difficulty"
                  difficulties={queryData.difficulties}
                  value={watch("difficultyId")?.toString()}
                  onChange={(value: string) =>
                    setValue("difficultyId", parseInt(value, 10))
                  }
                  includeAllOption={false}
                  error={formState.errors["difficultyId"]?.message}
                  clearErrors={() => clearErrors("difficultyId")}
                />

                <LanguageSelect
                  label="Language"
                  languages={queryData.languages}
                  value={watch("languageId")?.toString()}
                  onChange={(value: string) =>
                    setValue("languageId", parseInt(value, 10))
                  }
                  includeAllOption={false}
                  error={formState.errors["languageId"]?.message}
                  clearErrors={() => clearErrors("languageId")}
                />

                <VisibilitySelect
                  label="Visibility"
                  value={watch("visibility")}
                  onChange={(value: string) => setValue("visibility", value)}
                  error={formState.errors["visibility"]?.message}
                  clearErrors={() => clearErrors("visibility")}
                />
              </div>
            </>
          );
        }}
      </Form>
    </FormDrawer>
  );
};

export default UpdateMultipleChoiceQuestionForm;
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/Re-Usable-Components/question-filters.tsx">
import { Input } from "@/components/ui/form"; // Assuming this is shadcn/ui Input
import {
  QuestionCategory,
  QuestionDifficulty,
  QuestionLanguage,
} from "@/types/ApiTypes";
import { CategorySelect } from "../../Entities/Categories/Components/select-question-category";
import { DifficultySelect } from "../../Entities/Difficulty/Components/select-question-difficulty";
import { LanguageSelect } from "../../Entities/Language/components/select-question-language";
import { Button } from "@/components/ui"; // Assuming this is shadcn/ui Button
import { ChevronDown, ChevronUp, Filter, Search, X } from "lucide-react";
import { RiFilterOffLine } from "react-icons/ri";
import { useDisclosure } from "@/hooks/use-disclosure";

interface QuestionFiltersProps {
  searchTerm: string;
  onSearchTermChange: (term: string) => void;

  categories: QuestionCategory[];
  selectedCategoryId?: number;
  onCategoryChange: (categoryId?: number) => void;

  difficulties: QuestionDifficulty[];
  selectedDifficultyId?: number;
  onDifficultyChange: (difficultyId?: number) => void;

  languages: QuestionLanguage[];
  selectedLanguageId?: number;
  onLanguageChange: (languageId?: number) => void;
}

export const QuestionFilters = ({
  searchTerm,
  onSearchTermChange,
  categories,
  selectedCategoryId,
  onCategoryChange,
  difficulties,
  selectedDifficultyId,
  onDifficultyChange,
  languages,
  selectedLanguageId,
  onLanguageChange,
}: QuestionFiltersProps) => {
  const { isOpen, toggle } = useDisclosure(false);

  const resetFilters = () => {
    onSearchTermChange("");
    onCategoryChange(undefined);
    onDifficultyChange(undefined);
    onLanguageChange(undefined);
  };

  return (
    <div className="flex flex-col gap-4 mb-6">
      <div className="flex flex-col sm:flex-row items-center gap-3 sm:gap-4 rounded-md w-fit">
        <div className="flex flex-1 relative w-full items-center mb-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            placeholder="Search questions..."
            value={searchTerm}
            onChange={(e) => onSearchTermChange(e.target.value)}
            className="w-full shadow-none pl-10 py-4 pr-3 h-9 dark:border-foreground/20 bg-muted/70 min-w-[200px] sm:min-w-[300px] rounded-md focus:ring-0 focus:border-primary"
          />
        </div>

        <Button
          variant="outline"
          onClick={toggle}
          className={`flex items-center gap-2 w-full rounded-md sm:w-auto text-sm px-3 shrink-0 h-9 ${
            isOpen ? "border-primary text-primary bg-primary/20" : ""
          }`}
          aria-expanded={isOpen}
        >
          <Filter className="h-4 w-4" />
          Filters
          {isOpen ? (
            <ChevronUp className="h-4 w-4" />
          ) : (
            <ChevronDown className="h-4 w-4" />
          )}
        </Button>
        <div className="text-center py-8 text-gray-500 dark:text-gray-400">
          {(searchTerm ||
            selectedCategoryId ||
            selectedDifficultyId ||
            selectedLanguageId) && (
            <Button
              onClick={resetFilters}
              variant={"outline"}
              className="flex items-center justify-center rounded-md text-blue-500 hover:text-blue-600 text-sm underline"
            >
              <RiFilterOffLine className="h-4 w-4" /> Clear all filters
            </Button>
          )}
        </div>
      </div>

      {isOpen && (
        <div className="p-4 border bg-muted/70 dark:border-foreground/20 rounded-md bg-card">
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-medium text-sm">Advanced Filters</h3>
            <button
              onClick={() => toggle()}
              className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
            >
              <X className="h-4 w-4" />
            </button>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <CategorySelect
              label="Category"
              mode="filter"
              categories={categories}
              value={selectedCategoryId}
              onChange={onCategoryChange}
              includeAllOption
            />
            <DifficultySelect
              label="Difficulty"
              mode="filter"
              difficulties={difficulties}
              value={selectedDifficultyId}
              onChange={onDifficultyChange}
              includeAllOption
            />
            <LanguageSelect
              label="Language"
              mode="filter"
              languages={languages}
              value={selectedLanguageId}
              onChange={onLanguageChange}
              includeAllOption
            />
          </div>
        </div>
      )}
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Categories/Components/select-question-category.tsx">
import React from "react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/form";
import { QuestionCategory } from "@/types/ApiTypes";

interface BaseCategorySelectProps {
  label?: string;
  categories: QuestionCategory[];
  includeAllOption?: boolean;
  error?: string;
  clearErrors?: () => void;
}

interface FormModeProps extends BaseCategorySelectProps {
  mode?: "form";
  value: string; // Stringified ID (e.g., "1")
  onChange: (value: string) => void; // Receives stringified ID
}

interface FilterModeProps extends BaseCategorySelectProps {
  mode: "filter";
  value: number | undefined; // Actual ID or undefined for "all"
  onChange: (value: number | undefined) => void; // Receives actual ID or undefined
}

type CategorySelectProps = FormModeProps | FilterModeProps;

export const CategorySelect: React.FC<CategorySelectProps> = (props) => {
  const {
    label,
    categories,
    includeAllOption = true,
    error,
    clearErrors,
    mode = "form",
  } = props;

  if (mode === "filter") {
    const { value, onChange } = props as FilterModeProps;

    return (
      <div>
        {label && (
          <Label className="text-sm font-medium text-foreground">{label}</Label>
        )}
        <Select
          value={value ? value.toString() : "all"}
          onValueChange={(selectedValue) => {
            onChange(
              selectedValue === "all" ? undefined : Number(selectedValue)
            );
            clearErrors?.();
          }}
        >
          <SelectTrigger
            variant="quiz"
            className={`min-w-[200px] ${error ? "border-red-500" : ""}`}
          >
            <SelectValue
              className="text-foreground"
              placeholder="All Categories"
            />
          </SelectTrigger>
          <SelectContent>
            {includeAllOption && (
              <SelectItem value="all">All Categories</SelectItem>
            )}
            {categories.map((category) => (
              <SelectItem key={category.id} value={category.id.toString()}>
                {category.name}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        {error && <p className="text-sm text-red-500">{error}</p>}
      </div>
    );
  }

  // Form mode (default/existing behavior)
  const { value, onChange } = props as FormModeProps;
  const isValueValid = categories.some(
    (category) => category.id.toString() === value
  );

  return (
    <div>
      {label && (
        <Label className="text-sm font-medium text-foreground">{label}</Label>
      )}
      <Select
        value={isValueValid ? value : ""}
        onValueChange={(selectedValue) => {
          onChange(selectedValue);
          clearErrors?.();
        }}
      >
        <SelectTrigger
          variant="quiz"
          className={`min-w-[200px] ${error ? "border-red-500" : ""}`}
        >
          <SelectValue
            className="text-foreground"
            placeholder={
              includeAllOption ? "All Categories" : "--Select Category--"
            }
          />
        </SelectTrigger>
        <SelectContent>
          {includeAllOption && (
            <SelectItem value="all">All Categories</SelectItem>
          )}
          {categories.map((category) => (
            <SelectItem key={category.id} value={category.id.toString()}>
              {category.name}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      {error && <p className="text-sm text-red-500">{error}</p>}
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Difficulty/Components/select-question-difficulty.tsx">
import React from "react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { QuestionDifficulty } from "@/types/ApiTypes";
import { Label } from "@/components/ui/form";

interface BaseDifficultySelectProps {
  label?: string;
  difficulties: QuestionDifficulty[];
  includeAllOption?: boolean;
  error?: string;
  clearErrors?: () => void;
}

interface FormModeProps extends BaseDifficultySelectProps {
  mode?: "form";
  value: string; // Stringified ID (e.g., "1")
  onChange: (value: string) => void; // Receives stringified ID
}

interface FilterModeProps extends BaseDifficultySelectProps {
  mode: "filter";
  value: number | undefined; // Actual ID or undefined for "all"
  onChange: (value: number | undefined) => void; // Receives actual ID or undefined
}

type DifficultySelectProps = FormModeProps | FilterModeProps;

export const DifficultySelect: React.FC<DifficultySelectProps> = (props) => {
  const {
    label,
    difficulties,
    includeAllOption = true,
    error,
    clearErrors,
    mode = "form",
  } = props;

  if (mode === "filter") {
    const { value, onChange } = props as FilterModeProps;
    
    return (
      <div>
        {label && (
          <Label className="text-sm font-medium text-foreground">{label}</Label>
        )}
        <Select
          value={value ? value.toString() : "all"}
          onValueChange={(selectedValue) => {
            onChange(selectedValue === "all" ? undefined : Number(selectedValue));
            clearErrors?.();
          }}
        >
          <SelectTrigger
            variant="quiz"
            className={`min-w-[200px] ${error ? "border-red-500" : ""}`}
          >
            <SelectValue
              className="text-foreground"
              placeholder="All Difficulties"
            />
          </SelectTrigger>
          <SelectContent className="min-w-[200px]">
            {includeAllOption && (
              <SelectItem value="all">All Difficulties</SelectItem>
            )}
            {difficulties.map((difficulty) => (
              <SelectItem key={difficulty.id} value={difficulty.id.toString()}>
                {difficulty.level}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        {error && <p className="text-sm text-red-500">{error}</p>}
      </div>
    );
  }

  // Form mode (default/existing behavior)
  const { value, onChange } = props as FormModeProps;
  const isValueValid = difficulties.some(
    (difficulty) => difficulty.id.toString() === value
  );

  return (
    <div>
      {label && (
        <Label className="text-sm font-medium text-foreground">{label}</Label>
      )}
      <Select 
        value={isValueValid ? value : ""}
        onValueChange={(selectedValue) => {
          onChange(selectedValue === "all" ? "all" : selectedValue);
          clearErrors?.();
        }}
      >
        <SelectTrigger
          variant="quiz"
          className={`min-w-[200px] ${error ? "border-red-500" : ""}`}
        >
          <SelectValue placeholder="--Select Difficulty--" />
        </SelectTrigger>
        <SelectContent className="min-w-[200px]">
          {includeAllOption && (
            <SelectItem value="all">All Difficulties</SelectItem>
          )}
          {difficulties.map((difficulty) => (
            <SelectItem key={difficulty.id} value={difficulty.id.toString()}>
              {difficulty.level}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      {error && <p className="text-sm text-red-500">{error}</p>}
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/question-select/question-select.tsx">
import React, { useState, useEffect } from "react";
import { Plus } from "lucide-react";
import { QuestionBase, QuestionType } from "@/types/ApiTypes";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui";
import { LiftedButton } from "@/common/LiftedButton";
import { QuestionFilters } from "../../../../../Question/Components/Re-Usable-Components/question-filters";
import { useDebounce } from "@/hooks/use-debounce";
import { useQuestionCategoryData } from "../../../../../Question/Entities/Categories/api/get-question-categories";
import { useQuestionDifficultyData } from "../../../../../Question/Entities/Difficulty/api/get-question-difficulties";
import { useQuestionLanguageData } from "../../../../../Question/Entities/Language/api/get-question-language";
import { QuestionTabContent } from "../../../../../Question/Components/QuestionsTabContent";
import { cn } from "@/utils/cn";
import { useQuiz } from "../../Quiz-questions-context";
import { useDisclosure } from "@/hooks/use-disclosure";

interface SelectQuestionComponentProps {
  onQuestionsSelected?: (questions: QuestionBase[]) => void;
  triggerButton?: React.ReactElement;
  maxSelections?: number;
  preSelectedQuestionIds?: number[];
  title?: string;
  excludeQuestionIds?: number[];
}

const SelectQuestionComponent: React.FC<SelectQuestionComponentProps> = ({
  onQuestionsSelected,
  maxSelections,
  title = "Select Questions from Pool",
  triggerButton,
  // excludeQuestionIds = [],
}) => {
  const { open, close, isOpen } = useDisclosure();
  const [searchTerm, setSearchTerm] = useState("");
  const [debouncedSearchTerm] = useDebounce(searchTerm, 500);
  const [selectedCategoryId, setSelectedCategoryId] = useState<
    number | undefined
  >();
  const [selectedDifficultyId, setSelectedDifficultyId] = useState<
    number | undefined
  >();
  const [selectedLanguageId, setSelectedLanguageId] = useState<
    number | undefined
  >();

  const [activeTab, setActiveTab] = useState(QuestionType.MultipleChoice);

  const {
    tempSelectedQuestionsCount,
    commitTempSelection,
    clearTempSelection,
    setQuestionModalOpen,
  } = useQuiz();

  const [currentPage, setCurrentPage] = useState(1);
  const questionsPerPage = 5;

  const categoriesQuery = useQuestionCategoryData({});
  const difficultiesQuery = useQuestionDifficultyData({});
  const languagesQuery = useQuestionLanguageData({});

  const queryParams = {
    pageNumber: currentPage,
    pageSize: questionsPerPage,
    searchTerm: debouncedSearchTerm || undefined,
    categoryId: selectedCategoryId,
    difficultyId: selectedDifficultyId,
    languageId: selectedLanguageId,
    questionType: activeTab,
    visibility: "Public",
    // excludeIds: excludeQuestionIds, //needs to be added
  };

  useEffect(() => {
    setCurrentPage(1);
  }, [
    debouncedSearchTerm,
    selectedCategoryId,
    selectedDifficultyId,
    selectedLanguageId,
    activeTab,
  ]);

  const handlePageChange = (newPage: number) => {
    setCurrentPage(newPage);
  };

  const handleOpen = () => {
    open();
    setQuestionModalOpen(true);
  };

  const handleClose = () => {
    close();
    setQuestionModalOpen(false);
  };

  const handleAddSelectedQuestions = () => {
    commitTempSelection();

    // Call the callback if provided
    if (onQuestionsSelected) {
      // You might need to pass the committed questions here
      // onQuestionsSelected(tempSelectedQuestions);
    }

    handleClose();
  };

  const handleCancel = () => {
    clearTempSelection();
    handleClose();
  };

  return (
    <>
      {triggerButton ? (
        React.cloneElement(triggerButton, {
          onClick: handleOpen,
        })
      ) : (
        <LiftedButton onClick={handleOpen} className="h-fit" type="button">
          <Plus className="h-4 w-4" />
          Add Existing
        </LiftedButton>
      )}

      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div
            className="absolute inset-0 bg-black/50 backdrop-blur-sm"
            onClick={handleCancel}
          />

          <div className="relative bg-white dark:bg-gray-900 rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-hidden border dark:border-gray-700">
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b dark:border-gray-700 bg-gray-50/50 dark:bg-gray-800/50">
              <div>
                <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                  {title}
                </h2>
                {maxSelections && (
                  <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                    Maximum {maxSelections} questions can be selected
                  </p>
                )}
              </div>
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2">
                  <div
                    className={cn(
                      "h-2 w-2 rounded-full",
                      tempSelectedQuestionsCount > 0
                        ? "bg-orange-500"
                        : "bg-gray-300"
                    )}
                  />
                  <span className="text-sm text-gray-600 dark:text-gray-400">
                    {tempSelectedQuestionsCount} selected
                    {maxSelections && ` / ${maxSelections}`}
                  </span>
                </div>
                <button
                  onClick={handleCancel}
                  className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 text-xl transition-colors"
                  aria-label="Close dialog"
                >
                  ✕
                </button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 overflow-y-auto max-h-[calc(90vh-180px)]">
              <QuestionFilters
                searchTerm={searchTerm}
                onSearchTermChange={setSearchTerm}
                categories={categoriesQuery.data || []}
                selectedCategoryId={selectedCategoryId}
                onCategoryChange={setSelectedCategoryId}
                difficulties={difficultiesQuery.data || []}
                selectedDifficultyId={selectedDifficultyId}
                onDifficultyChange={setSelectedDifficultyId}
                languages={languagesQuery.data || []}
                selectedLanguageId={selectedLanguageId}
                onLanguageChange={setSelectedLanguageId}
              />

              <Tabs
                value={activeTab}
                onValueChange={(value) => setActiveTab(value as QuestionType)}
                className="w-full mt-4"
              >
                <TabsList className="grid grid-cols-3 mb-6 bg-gray-100 dark:bg-gray-800">
                  <TabsTrigger
                    value={QuestionType.MultipleChoice}
                    className="data-[state=active]:bg-primary/80"
                  >
                    Multiple Choice
                  </TabsTrigger>
                  <TabsTrigger
                    value={QuestionType.TrueFalse}
                    className="data-[state=active]:bg-primary/80"
                  >
                    True/False
                  </TabsTrigger>
                  <TabsTrigger
                    value={QuestionType.TypeTheAnswer}
                    className="data-[state=active]:bg-primary/80"
                  >
                    Type Answer
                  </TabsTrigger>
                </TabsList>

                <TabsContent value={QuestionType.MultipleChoice}>
                  <QuestionTabContent
                    questionType={QuestionType.MultipleChoice}
                    queryParams={queryParams}
                    onPageChange={handlePageChange}
                    page="user"
                  />
                </TabsContent>

                <TabsContent value={QuestionType.TrueFalse}>
                  <QuestionTabContent
                    questionType={QuestionType.TrueFalse}
                    queryParams={queryParams}
                    onPageChange={handlePageChange}
                    page="user"
                  />
                </TabsContent>

                <TabsContent value={QuestionType.TypeTheAnswer}>
                  <QuestionTabContent
                    questionType={QuestionType.TypeTheAnswer}
                    queryParams={queryParams}
                    onPageChange={handlePageChange}
                    page="user"
                  />
                </TabsContent>
              </Tabs>
            </div>

            {/* Footer */}
            <div className="flex items-center justify-between p-6 border-t dark:border-gray-700 bg-gray-50/50 dark:bg-gray-800/50">
              <div className="flex items-center gap-3">
                <div
                  className={cn(
                    "h-3 w-3 rounded-full transition-colors",
                    tempSelectedQuestionsCount > 0
                      ? "bg-orange-500"
                      : "bg-gray-300"
                  )}
                />
                <span className="text-sm text-gray-600 dark:text-gray-400">
                  {tempSelectedQuestionsCount} question
                  {tempSelectedQuestionsCount !== 1 ? "s" : ""} selected
                  {maxSelections && ` (max: ${maxSelections})`}
                </span>
              </div>
              <div className="flex gap-3">
                <Button
                  onClick={handleCancel}
                  variant="outline"
                  className="border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800"
                >
                  Cancel
                </Button>
                <Button
                  onClick={handleAddSelectedQuestions}
                  disabled={tempSelectedQuestionsCount === 0}
                  className={cn(
                    "transition-all duration-200",
                    tempSelectedQuestionsCount > 0
                      ? "bg-blue-600 hover:bg-blue-700 text-white"
                      : "bg-gray-300 text-gray-500 cursor-not-allowed"
                  )}
                >
                  Add Selected Questions ({tempSelectedQuestionsCount})
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default SelectQuestionComponent;
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/quiz-question-settings.tsx">
// components/question-settings/QuestionSettingsCard.tsx
import React from "react";
import { CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Copy, RotateCcw, Settings } from "lucide-react";
import { useQuiz } from "../Quiz-questions-context";
import { Label } from "@/components/ui/form";
import { POINT_SYSTEM_OPTIONS, TIME_LIMIT_OPTIONS } from "@/pages/Dashboard/Pages/Question/Components/Re-Usable-Components/constants";
import { QuizQuestion } from "../types";

interface QuestionSettingsCardProps {
  question: QuizQuestion;
  showCopyActions?: boolean;
}

export const QuestionSettingsCard: React.FC<QuestionSettingsCardProps> = ({
  question,
  showCopyActions = true,
}) => {
  const {
    updateQuestionSetting,
    getQuestionSettings,
    copySettingsToQuestion,
    resetQuestionSettings,
    addedQuestions,
  } = useQuiz();

  const settings = getQuestionSettings(question.id);

  const handleCopyFrom = (sourceQuestionId: number) => {
    copySettingsToQuestion(sourceQuestionId, question.id);
  };

  return (
    <div>
      <CardHeader className="pb-3">
        <CardTitle className="text-sm flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Settings className="h-4 w-4 text-primary" />
            <span className="truncate max-w-[200px]">
              {question.text || `Question ${settings.orderInQuiz + 1}`}
            </span>
          </div>
          <Badge variant="outline" className="text-xs">
            #{settings.orderInQuiz + 1}
          </Badge>
        </CardTitle>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Point System */}
        <div className="space-y-2">
          <Label className="text-xs font-medium">Point System</Label>
          <Select
            value={settings.pointSystem}
            onValueChange={(value) =>
              updateQuestionSetting(question.id, "pointSystem", value)
            }
          >
            <SelectTrigger variant="quiz" className="h-8 text-xs">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {POINT_SYSTEM_OPTIONS.map((option) => (
                <SelectItem
                  key={option.value}
                  value={option.value}
                  className="text-xs"
                >
                  {option.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Time Limit */}
        <div className="space-y-2">
          <Label className="text-xs font-medium">Time Limit</Label>
          <Select
            value={settings.timeLimitInSeconds.toString()}
            onValueChange={(value) =>
              updateQuestionSetting(
                question.id,
                "timeLimitInSeconds",
                parseInt(value)
              )
            }
          >
            <SelectTrigger variant="quiz" className="h-8 text-xs">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {TIME_LIMIT_OPTIONS.map((option) => (
                <SelectItem
                  key={option.value}
                  value={option.value.toString()}
                  className="text-xs"
                >
                  {option.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Action Buttons */}
        {showCopyActions && (
          <div className="flex gap-2 pt-2 items-center">
            <Button
              variant="outline"
              size="sm"
              onClick={() => resetQuestionSettings(question.id)}
              className="h-7 text-xs flex-1"
            >
              <RotateCcw className="h-3 w-3 mr-1" />
              Reset
            </Button>

            {addedQuestions.length > 1 && (
              <Select
                onValueChange={(value) => handleCopyFrom(parseInt(value))}
              >
                <SelectTrigger>
                  <Copy className="h-3 w-3 mr-1" />
                  Copy From
                </SelectTrigger>
                <SelectContent>
                  {addedQuestions
                    .filter((q) => q.id !== question.id)
                    .map((q) => (
                      <SelectItem
                        key={q.id}
                        value={q.id.toString()}
                        className="text-xs"
                      >
                        {q.text ||
                          `Question ${
                            getQuestionSettings(q.id).orderInQuiz + 1
                          }`}
                      </SelectItem>
                    ))}
                </SelectContent>
              </Select>
            )}
          </div>
        )}
      </CardContent>
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/quiz-filters.tsx">
import { useState, useEffect, useCallback, useMemo } from "react";
import { Input, Label } from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Search,
  Filter,
  X,
  ChevronDown,
  Settings2,
  Save,
  Bookmark,
  RotateCcw,
  SlidersHorizontal,
  Check,
  Star,
} from "lucide-react";

// Mock types (replace with your actual types)
interface QuestionCategory {
  id: number;
  name: string;
}

interface QuestionDifficulty {
  id: number;
  level: string;
}

interface QuestionLanguage {
  id: number;
  language: string;
}

interface ActiveFilter {
  key: string;
  value: string | number | boolean;
  label: string;
  type: "select" | "boolean" | "search";
}

interface FilterPreset {
  id: string;
  label: string;
  filters: Record<string, string | number | boolean>;
  isDefault?: boolean;
  isFavorite?: boolean;
}

interface SavedFilter {
  id: string;
  name: string;
  filters: Record<string, string | number | boolean>;
  createdAt: Date;
}

interface QuizFiltersProps {
  searchTerm: string;
  onSearchTermChange: (term: string) => void;
  categories: QuestionCategory[];
  selectedCategoryId?: number;
  onCategoryChange: (categoryId?: number) => void;
  difficulties: QuestionDifficulty[];
  selectedDifficultyId?: number;
  onDifficultyChange: (difficultyId?: number) => void;
  languages: QuestionLanguage[];
  selectedLanguageId?: number;
  onLanguageChange: (languageId?: number) => void;
  selectedVisibility?: string;
  onVisibilityChange: (visibility?: string) => void;
  selectedIsPublished?: boolean;
  onIsPublishedChange: (isPublished?: boolean) => void;
  selectedIsActive?: boolean;
  onIsActiveChange: (isActive?: boolean) => void;
  totalResults?: number;
}

export const QuizFilters = ({
  searchTerm,
  onSearchTermChange,
  categories,
  selectedCategoryId,
  onCategoryChange,
  difficulties,
  selectedDifficultyId,
  onDifficultyChange,
  languages,
  selectedLanguageId,
  onLanguageChange,
  selectedVisibility,
  onVisibilityChange,
  selectedIsPublished,
  onIsPublishedChange,
  selectedIsActive,
  onIsActiveChange,
  totalResults = 0,
}: QuizFiltersProps) => {
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const [showSaveDialog, setShowSaveDialog] = useState(false);
  const [savedFilterName, setSavedFilterName] = useState("");
  const [searchFocused, setSearchFocused] = useState(false);

  // Mock saved filters (in real app, this would come from API/localStorage)
  const [savedFilters, setSavedFilters] = useState<SavedFilter[]>([
    {
      id: "1",
      name: "My Active Quizzes",
      filters: { visibility: "Private", isActive: true },
      createdAt: new Date(),
    },
    {
      id: "2",
      name: "Public Published",
      filters: { visibility: "Public", isPublished: true },
      createdAt: new Date(),
    },
  ]);

  // Enhanced filter presets with better UX
  const presets: FilterPreset[] = [
    {
      id: "all",
      label: "All Quizzes",
      filters: {},
      isDefault: true,
    },
    {
      id: "my-quizzes",
      label: "My Quizzes",
      filters: { visibility: "Private" },
    },
    {
      id: "public",
      label: "Public",
      filters: { visibility: "Public", isPublished: true },
      isFavorite: true,
    },
    {
      id: "active",
      label: "Active Only",
      filters: { isActive: true },
    },
    {
      id: "drafts",
      label: "Drafts",
      filters: { isPublished: false },
    },
  ];

  // Debounced search
  useEffect(() => {
    const timer = setTimeout(() => {
      // In real app, trigger search here
    }, 300);
    return () => clearTimeout(timer);
  }, [searchTerm]);

  // Get active filters with enhanced metadata
  const getActiveFilters = useCallback((): ActiveFilter[] => {
    const filters: ActiveFilter[] = [];

    if (selectedCategoryId) {
      const category = categories.find((c) => c.id === selectedCategoryId);
      if (category) {
        filters.push({
          key: "category",
          value: selectedCategoryId,
          label: category.name,
          type: "select",
        });
      }
    }

    if (selectedDifficultyId) {
      const difficulty = difficulties.find(
        (d) => d.id === selectedDifficultyId
      );
      if (difficulty) {
        filters.push({
          key: "difficulty",
          value: selectedDifficultyId,
          label: difficulty.level,
          type: "select",
        });
      }
    }

    if (selectedLanguageId) {
      const language = languages.find((l) => l.id === selectedLanguageId);
      if (language) {
        filters.push({
          key: "language",
          value: selectedLanguageId,
          label: language.language,
          type: "select",
        });
      }
    }

    if (selectedVisibility) {
      filters.push({
        key: "visibility",
        value: selectedVisibility,
        label: `Visibility: ${selectedVisibility}`,
        type: "select",
      });
    }

    if (selectedIsPublished !== undefined) {
      filters.push({
        key: "isPublished",
        value: selectedIsPublished,
        label: selectedIsPublished ? "Published" : "Unpublished",
        type: "boolean",
      });
    }

    if (selectedIsActive !== undefined) {
      filters.push({
        key: "isActive",
        value: selectedIsActive,
        label: selectedIsActive ? "Active" : "Inactive",
        type: "boolean",
      });
    }

    return filters;
  }, [
    selectedCategoryId,
    categories,
    selectedDifficultyId,
    difficulties,
    selectedLanguageId,
    languages,
    selectedVisibility,
    selectedIsPublished,
    selectedIsActive,
  ]);

  const activeFilters = getActiveFilters();
  const activeFilterCount = activeFilters.length;
  const hasSearchTerm = searchTerm.trim().length > 0;
  const totalActiveFilters = activeFilterCount + (hasSearchTerm ? 1 : 0);

  const removeFilter = (filterKey: string): void => {
    switch (filterKey) {
      case "category":
        onCategoryChange(undefined);
        break;
      case "difficulty":
        onDifficultyChange(undefined);
        break;
      case "language":
        onLanguageChange(undefined);
        break;
      case "visibility":
        onVisibilityChange(undefined);
        break;
      case "isPublished":
        onIsPublishedChange(undefined);
        break;
      case "isActive":
        onIsActiveChange(undefined);
        break;
      case "search":
        onSearchTermChange("");
        break;
    }
  };

  const applyPreset = (preset: FilterPreset): void => {
    clearAllFilters();
    Object.entries(preset.filters).forEach(([key, value]) => {
      switch (key) {
        case "visibility":
          onVisibilityChange(value as string);
          break;
        case "isPublished":
          onIsPublishedChange(value as boolean);
          break;
        case "isActive":
          onIsActiveChange(value as boolean);
          break;
        case "category":
          onCategoryChange(value as number);
          break;
        case "difficulty":
          onDifficultyChange(value as number);
          break;
        case "language":
          onLanguageChange(value as number);
          break;
      }
    });
  };

  const applySavedFilter = (savedFilter: SavedFilter): void => {
    clearAllFilters();
    Object.entries(savedFilter.filters).forEach(([key, value]) => {
      switch (key) {
        case "visibility":
          onVisibilityChange(value as string);
          break;
        case "isPublished":
          onIsPublishedChange(value as boolean);
          break;
        case "isActive":
          onIsActiveChange(value as boolean);
          break;
        case "category":
          onCategoryChange(value as number);
          break;
        case "difficulty":
          onDifficultyChange(value as number);
          break;
        case "language":
          onLanguageChange(value as number);
          break;
      }
    });
  };

  const clearAllFilters = (): void => {
    onSearchTermChange("");
    onCategoryChange(undefined);
    onDifficultyChange(undefined);
    onLanguageChange(undefined);
    onVisibilityChange(undefined);
    onIsPublishedChange(undefined);
    onIsActiveChange(undefined);
  };

  const saveCurrentFilters = (): void => {
    if (!savedFilterName.trim()) return;

    const currentFilters: Record<string, string | number | boolean> = {};

    if (selectedCategoryId) currentFilters.category = selectedCategoryId;
    if (selectedDifficultyId) currentFilters.difficulty = selectedDifficultyId;
    if (selectedLanguageId) currentFilters.language = selectedLanguageId;
    if (selectedVisibility) currentFilters.visibility = selectedVisibility;
    if (selectedIsPublished !== undefined)
      currentFilters.isPublished = selectedIsPublished;
    if (selectedIsActive !== undefined)
      currentFilters.isActive = selectedIsActive;

    const newSavedFilter: SavedFilter = {
      id: Date.now().toString(),
      name: savedFilterName,
      filters: currentFilters,
      createdAt: new Date(),
    };

    setSavedFilters((prev) => [...prev, newSavedFilter]);
    setSavedFilterName("");
    setShowSaveDialog(false);
  };

  const deleteSavedFilter = (filterId: string): void => {
    setSavedFilters((prev) => prev.filter((f) => f.id !== filterId));
  };

  // Get current filter state summary
  const filterSummary = useMemo(() => {
    if (totalActiveFilters === 0) {
      return `Showing all ${totalResults.toLocaleString()} quizzes`;
    }
    return `${totalResults.toLocaleString()} results with ${totalActiveFilters} filter${
      totalActiveFilters !== 1 ? "s" : ""
    }`;
  }, [totalActiveFilters, totalResults]);

  return (
    <div className="space-y-6">
      {/* Header Section with Search and Quick Actions */}
      <div className="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
        <div className="flex-1 max-w-2xl">
          {/* Enhanced Search Bar */}
          <div
            className={`relative transition-all duration-200 ${
              searchFocused ? "scale-[1.02]" : ""
            }`}
          >
            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5" />
            <Input
              placeholder="Search quizzes by title, description, or tags..."
              value={searchTerm}
              onChange={(e: any) => onSearchTermChange(e.target.value)}
              onFocus={() => setSearchFocused(true)}
              onBlur={() => setSearchFocused(false)}
              className="pl-12 pr-12 h-12 text-base bg-background/50 backdrop-blur-sm border-2 focus:border-primary/50 transition-all duration-200"
            />
            {searchTerm && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onSearchTermChange("")}
                className="absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0 hover:bg-muted"
              >
                <X className="w-4 h-4" />
              </Button>
            )}
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex items-center gap-3">
          {/* Save Filter Button */}
          {totalActiveFilters > 0 && (
            <Popover open={showSaveDialog} onOpenChange={setShowSaveDialog}>
              <PopoverTrigger asChild>
                <Button variant="outline" size="sm" className="gap-2">
                  <Save className="w-4 h-4" />
                  Save Filter
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-80 p-4">
                <div className="space-y-3">
                  <h4 className="font-semibold">Save Current Filter</h4>
                  <div className="space-y-2">
                    <Input
                      placeholder="Filter name..."
                      value={savedFilterName}
                      onChange={(e) => setSavedFilterName(e.target.value)}
                      onKeyDown={(e) => {
                        if (e.key === "Enter") saveCurrentFilters();
                      }}
                    />
                    <div className="flex justify-end gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setShowSaveDialog(false)}
                      >
                        Cancel
                      </Button>
                      <Button
                        size="sm"
                        onClick={saveCurrentFilters}
                        disabled={!savedFilterName.trim()}
                      >
                        Save
                      </Button>
                    </div>
                  </div>
                </div>
              </PopoverContent>
            </Popover>
          )}

          {/* Advanced Filters Toggle */}
          <Collapsible
            open={showAdvancedFilters}
            onOpenChange={setShowAdvancedFilters}
          >
            <CollapsibleTrigger asChild>
              <Button
                variant={
                  showAdvancedFilters || totalActiveFilters > 0
                    ? "default"
                    : "outline"
                }
                className="gap-2 relative"
              >
                <SlidersHorizontal className="w-4 h-4" />
                Filters
                {totalActiveFilters > 0 && (
                  <Badge
                    variant="secondary"
                    className="ml-1 px-1.5 py-0.5 text-xs bg-primary/10 text-primary border-primary/20"
                  >
                    {totalActiveFilters}
                  </Badge>
                )}
                <ChevronDown
                  className={`w-4 h-4 transition-transform duration-200 ${
                    showAdvancedFilters ? "rotate-180" : ""
                  }`}
                />
              </Button>
            </CollapsibleTrigger>
          </Collapsible>
        </div>
      </div>

      {/* Filter Summary */}
      <div className="flex items-center justify-between text-sm text-muted-foreground">
        <span>{filterSummary}</span>
        {totalActiveFilters > 0 && (
          <Button
            variant="ghost"
            size="sm"
            onClick={clearAllFilters}
            className="h-8 px-3 text-muted-foreground hover:text-destructive"
          >
            <RotateCcw className="w-3 h-3 mr-1" />
            Clear all
          </Button>
        )}
      </div>

      {/* Quick Filter Presets - Enhanced Design */}
      <div className="flex flex-wrap gap-2">
        {presets.map((preset) => {
          const isActive =
            JSON.stringify(preset.filters) ===
            JSON.stringify({
              ...(selectedCategoryId && { category: selectedCategoryId }),
              ...(selectedDifficultyId && { difficulty: selectedDifficultyId }),
              ...(selectedLanguageId && { language: selectedLanguageId }),
              ...(selectedVisibility && { visibility: selectedVisibility }),
              ...(selectedIsPublished !== undefined && {
                isPublished: selectedIsPublished,
              }),
              ...(selectedIsActive !== undefined && {
                isActive: selectedIsActive,
              }),
            });

          return (
            <Button
              key={preset.id}
              variant={isActive ? "default" : "outline"}
              size="sm"
              onClick={() => applyPreset(preset)}
              className={`h-9 px-4 gap-2 transition-all duration-200 ${
                isActive
                  ? "bg-primary text-primary-foreground shadow-md"
                  : "hover:bg-muted/80 hover:scale-105"
              }`}
            >
              {preset.isFavorite && <Star className="w-3 h-3" />}
              {preset.label}
              {isActive && <Check className="w-3 h-3" />}
            </Button>
          );
        })}
      </div>

      {/* Saved Filters */}
      {savedFilters.length > 0 && (
        <div className="space-y-2">
          <h4 className="text-sm font-medium text-muted-foreground flex items-center gap-2">
            <Bookmark className="w-4 h-4" />
            Saved Filters
          </h4>
          <div className="flex flex-wrap gap-2">
            {savedFilters.map((filter) => (
              <div
                key={filter.id}
                className="flex items-center gap-1 bg-muted/50 rounded-lg pl-3 pr-1 py-1"
              >
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => applySavedFilter(filter)}
                  className="h-auto p-1 font-normal text-sm hover:bg-transparent"
                >
                  {filter.name}
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => deleteSavedFilter(filter.id)}
                  className="h-6 w-6 p-0 hover:bg-destructive/10 hover:text-destructive"
                >
                  <X className="w-3 h-3" />
                </Button>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Active Filter Pills - Enhanced */}
      {(activeFilters.length > 0 || hasSearchTerm) && (
        <div className="space-y-2">
          <h4 className="text-sm font-medium text-muted-foreground">
            Active Filters
          </h4>
          <div className="flex flex-wrap gap-2">
            {hasSearchTerm && (
              <Badge
                variant="secondary"
                className="flex items-center gap-2 px-3 py-1.5 bg-primary/10 text-primary border-primary/20 hover:bg-primary/20 transition-colors"
              >
                <Search className="w-3 h-3" />
                <span>"{searchTerm}"</span>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => removeFilter("search")}
                  className="h-auto p-0 hover:bg-transparent hover:text-destructive ml-1"
                >
                  <X className="w-3 h-3" />
                </Button>
              </Badge>
            )}
            {activeFilters.map((filter) => (
              <Badge
                key={filter.key}
                variant="secondary"
                className="flex items-center gap-2 px-3 py-1.5 bg-secondary/80 hover:bg-secondary transition-colors"
              >
                <span className="font-medium">{filter.label}</span>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => removeFilter(filter.key)}
                  className="h-auto p-0 hover:bg-transparent hover:text-destructive ml-1"
                >
                  <X className="w-3 h-3" />
                </Button>
              </Badge>
            ))}
          </div>
        </div>
      )}

      {/* Advanced Filters Panel - Redesigned */}
      <Collapsible
        open={showAdvancedFilters}
        onOpenChange={setShowAdvancedFilters}
      >
        <CollapsibleContent className="space-y-6">
          <div className="bg-gradient-to-br from-card via-card/95 to-muted/30 border border-border/50 rounded-xl p-6 backdrop-blur-sm">
            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
              {/* Category Filter */}
              <div className="space-y-3">
                <Label className="text-sm font-semibold text-foreground flex items-center gap-2">
                  <div className="w-2 h-2 rounded-full bg-blue-500"></div>
                  Category
                </Label>
                <Select
                  value={
                    selectedCategoryId ? selectedCategoryId.toString() : ""
                  }
                  onValueChange={(value) =>
                    onCategoryChange(value ? Number(value) : undefined)
                  }
                >
                  <SelectTrigger className="h-11 bg-background/50">
                    <SelectValue placeholder="Any category" />
                  </SelectTrigger>
                  <SelectContent>
                    {categories.map((category) => (
                      <SelectItem
                        key={category.id}
                        value={category.id.toString()}
                      >
                        {category.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Difficulty Filter */}
              <div className="space-y-3">
                <label className="text-sm font-semibold text-foreground flex items-center gap-2">
                  <div className="w-2 h-2 rounded-full bg-orange-500"></div>
                  Difficulty
                </label>
                <Select
                  value={
                    selectedDifficultyId ? selectedDifficultyId.toString() : ""
                  }
                  onValueChange={(value) =>
                    onDifficultyChange(value ? Number(value) : undefined)
                  }
                >
                  <SelectTrigger className="h-11 bg-background/50">
                    <SelectValue placeholder="Any difficulty" />
                  </SelectTrigger>
                  <SelectContent>
                    {difficulties.map((difficulty) => (
                      <SelectItem
                        key={difficulty.id}
                        value={difficulty.id.toString()}
                      >
                        {difficulty.level}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Language Filter */}
              <div className="space-y-3">
                <label className="text-sm font-semibold text-foreground flex items-center gap-2">
                  <div className="w-2 h-2 rounded-full bg-green-500"></div>
                  Language
                </label>
                <Select
                  value={
                    selectedLanguageId ? selectedLanguageId.toString() : ""
                  }
                  onValueChange={(value) =>
                    onLanguageChange(value ? Number(value) : undefined)
                  }
                >
                  <SelectTrigger className="h-11 bg-background/50">
                    <SelectValue placeholder="Any language" />
                  </SelectTrigger>
                  <SelectContent>
                    {languages.map((language) => (
                      <SelectItem
                        key={language.id}
                        value={language.id.toString()}
                      >
                        {language.language}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Visibility Filter */}
              <div className="space-y-3">
                <label className="text-sm font-semibold text-foreground flex items-center gap-2">
                  <div className="w-2 h-2 rounded-full bg-purple-500"></div>
                  Visibility
                </label>
                <Select
                  value={selectedVisibility || ""}
                  onValueChange={(value) =>
                    onVisibilityChange(value || undefined)
                  }
                >
                  <SelectTrigger className="h-11 bg-background/50">
                    <SelectValue placeholder="Any visibility" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Public">🌍 Public</SelectItem>
                    <SelectItem value="Private">🔒 Private</SelectItem>
                    <SelectItem value="Friends">👥 Friends Only</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Status Filter */}
              <div className="space-y-3">
                <label className="text-sm font-semibold text-foreground flex items-center gap-2">
                  <div className="w-2 h-2 rounded-full bg-red-500"></div>
                  Publication Status
                </label>
                <Select
                  value={
                    selectedIsPublished === undefined
                      ? ""
                      : selectedIsPublished
                      ? "published"
                      : "unpublished"
                  }
                  onValueChange={(value) =>
                    onIsPublishedChange(
                      value === "" ? undefined : value === "published"
                    )
                  }
                >
                  <SelectTrigger className="h-11 bg-background/50">
                    <SelectValue placeholder="Any status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="published">✅ Published</SelectItem>
                    <SelectItem value="unpublished">📝 Draft</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Active Status Filter */}
              <div className="space-y-3">
                <label className="text-sm font-semibold text-foreground flex items-center gap-2">
                  <div className="w-2 h-2 rounded-full bg-teal-500"></div>
                  Active Status
                </label>
                <Select
                  value={
                    selectedIsActive === undefined
                      ? ""
                      : selectedIsActive
                      ? "active"
                      : "inactive"
                  }
                  onValueChange={(value) =>
                    onIsActiveChange(
                      value === "" ? undefined : value === "active"
                    )
                  }
                >
                  <SelectTrigger className="h-11 bg-background/50">
                    <SelectValue placeholder="Any status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="active">🟢 Active</SelectItem>
                    <SelectItem value="inactive">⚪ Inactive</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
        </CollapsibleContent>
      </Collapsible>
    </div>
  );
};
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Quizzes/QuizzesController.cs">
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using QuizAPI.Controllers.Questions;
using QuizAPI.Controllers.Quizzes.Services.QuizServices;
using QuizAPI.DTOs.Quiz;
using QuizAPI.Models;
using System.Security.Claims;

namespace QuizAPI.Controllers.Quizzes
{
    [ApiController]
    [Route("api/[controller]")]
    public class QuizController : ControllerBase
    {
        private readonly IQuizService _quizService;
        private readonly ILogger<QuizController> _logger;

        public QuizController(
            IQuizService quizService,
            ILogger<QuizController> logger)
        {
            _quizService = quizService ?? throw new ArgumentNullException(nameof(quizService));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        /// <summary>
        /// Get all quizzes (admin only)
        /// </summary>
        [HttpGet]
        [Authorize(Roles = "Admin, SuperAdmin")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        public async Task<ActionResult<List<QuizSummaryDTO>>> GetAllQuizzes([FromQuery] QuizFilterParams filterParams)
        {
            try
            {
                var pagedQuizzes = await _quizService.GetAllQuizzesAsync(filterParams);
                Response.AddPaginationHeader(
                    pagedQuizzes.PageNumber,
                    pagedQuizzes.PageSize,
                    pagedQuizzes.TotalCount,
                    pagedQuizzes.TotalPages,
                    pagedQuizzes.HasNextPage,
                    pagedQuizzes.HasPreviousPage
                );
                return Ok(pagedQuizzes.Items);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving all quizzes");
                return StatusCode(StatusCodes.Status500InternalServerError, "An error occurred while processing your request");
            }
        }
        /// <summary>
        /// Get all public quizzes
        /// </summary>
        [HttpGet("public")]
        [AllowAnonymous]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<ActionResult<IEnumerable<QuizSummaryDTO>>> GetPublicQuizzes()
        {
            try
            {
                var quizzes = await _quizService.GetPublicQuizzesAsync();
                return Ok(quizzes);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving public quizzes");
                return StatusCode(StatusCodes.Status500InternalServerError, "An error occurred while processing your request");
            }
        }

        /// <summary>
        /// Get quizzes created by the current user
        /// </summary>
        [HttpGet("my")]
        [Authorize]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        public async Task<ActionResult<List<QuizSummaryDTO>>> GetMyQuizzes([FromQuery] QuizFilterParams filterParams)
        {
            try
            {
                var userId = GetCurrentUserId();
                var pagedQuizzes = await _quizService.GetQuizzesByUserAsync(userId, filterParams);
                Response.AddPaginationHeader(
                    pagedQuizzes.PageNumber,
                    pagedQuizzes.PageSize,
                    pagedQuizzes.TotalCount,
                    pagedQuizzes.TotalPages,
                    pagedQuizzes.HasNextPage,
                    pagedQuizzes.HasPreviousPage
                );
                return Ok(pagedQuizzes.Items);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving user's quizzes");
                return StatusCode(StatusCodes.Status500InternalServerError, "An error occurred while processing your request");
            }
        }

        /// <summary>
        /// Get a specific quiz by ID
        /// </summary>
        [HttpGet("{id}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult<QuizDTO>> GetQuizById(int id)
        {
            try
            {
                var quiz = await _quizService.GetQuizByIdAsync(id);

                if (quiz == null)
                {
                    return NotFound();
                }

                if (!quiz.IsPublished && !User.IsInRole("Admin"))
                {
                    if (!User.Identity.IsAuthenticated)
                    {
                        return NotFound(); // Don't reveal existence to anonymous users
                    }

                    var userId = GetCurrentUserId();
                    if (quiz.User.Id.ToString() != userId.ToString())
                    {
                        return NotFound(); // Don't reveal existence to non-owners
                    }
                }

                return Ok(quiz);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving quiz {QuizId}", id);
                return StatusCode(StatusCodes.Status500InternalServerError, "An error occurred while processing your request");
            }
        }

        /// <summary>
        /// Create a new quiz
        /// </summary>
        [HttpPost]
        [Authorize]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        public async Task<ActionResult<QuizDTO>> CreateQuiz([FromBody] QuizCM quizCM)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                var userId = GetCurrentUserId();
                var createdQuiz = await _quizService.CreateQuizAsync(userId, quizCM);

                return CreatedAtAction(nameof(GetQuizById), new { id = createdQuiz.Id }, createdQuiz);
            }
            catch (InvalidOperationException ex)
            {
                _logger.LogWarning(ex, "Invalid operation during quiz creation");
                return BadRequest(ex.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating quiz");
                return StatusCode(StatusCodes.Status500InternalServerError, "An error occurred while processing your request");
            }
        }

        /// <summary>
        /// Update an existing quiz
        /// </summary>
        [HttpPut]
        [Authorize]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult<QuizDTO>> UpdateQuiz([FromBody] QuizUM quizUM)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                var userId = GetCurrentUserId();
                var updatedQuiz = await _quizService.UpdateQuizAsync(userId, quizUM);

                if (updatedQuiz == null)
                {
                    return NotFound();
                }

                return Ok(updatedQuiz);
            }
            catch (DbUpdateConcurrencyException)
            {
                return Conflict("The quiz has been modified by another user. Please refresh and try again.");
            }
            catch (InvalidOperationException ex)
            {
                _logger.LogWarning(ex, "Invalid operation during quiz update");
                return BadRequest(ex.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating quiz {QuizId}", quizUM.Id);
                return StatusCode(StatusCodes.Status500InternalServerError, "An error occurred while processing your request");
            }
        }

        /// <summary>
        /// Toggle the publish status of a quiz
        /// </summary>
        [HttpPatch("{id}/publish-status")]
        [Authorize]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult<QuizDTO>> TogglePublishStatus(int id)
        {
            try
            {
                var userId = GetCurrentUserId();
                var quiz = await _quizService.ToggleQuizPublishStatusAsync(userId, id);

                if (quiz == null)
                {
                    return NotFound();
                }

                return Ok(quiz);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error toggling publish status for quiz {QuizId}", id);
                return StatusCode(StatusCodes.Status500InternalServerError, "An error occurred while processing your request");
            }
        }

        /// <summary>
        /// Toggle the active status of a quiz
        /// </summary>
        [HttpPatch("{id}/active-status")]
        [Authorize]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult<QuizDTO>> ToggleActiveStatus(int id)
        {
            try
            {
                var userId = GetCurrentUserId();
                var quiz = await _quizService.ToggleQuizActiveStatusAsync(userId, id);

                if (quiz == null)
                {
                    return NotFound();
                }

                return Ok(quiz);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error toggling active status for quiz {QuizId}", id);
                return StatusCode(StatusCodes.Status500InternalServerError, "An error occurred while processing your request");
            }
        }

        /// <summary>
        /// Helper method to get the current user's ID
        /// </summary>
        private Guid GetCurrentUserId()
        {
            var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);

            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
            {
                throw new InvalidOperationException("User ID not found or invalid");
            }

            return userId;
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/QuizAPI.csproj">
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>9ac8f6bb-81ad-4f94-b548-0530cf3732aa</UserSecretsId>

    <DockerfileContext>.</DockerfileContext>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper" Version="11.0.0" />
    <PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" Version="10.1.1" />
    <PackageReference Include="BCrypt.Net-Next" Version="4.0.3" />
    <PackageReference Include="Bogus" Version="35.6.1" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="6.0.33" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="6.0.35" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="7.0.13" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="7.0.13">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.19.4" />
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="6.0.18" />
    <PackageReference Include="SixLabors.ImageSharp" Version="3.1.8" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="wwwroot\uploads\" />
  </ItemGroup>

</Project>
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/utils/cn";
import { Spinner } from "./Spinner";

const buttonVariants = cva(
  "items-center whitespace-nowrap text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary flex items-center justify-center text-primary-foreground hover:bg-primary/90 active:scale-95 shadow-sm rounded-sm",
        icon: "bg-muted gap-2 shadow p-0 m-0",
        addSave:
          "flex justify-center items-center gap-2 shadow text-white bg-primary hover:bg-primary/70 active:scale-95",
        outline:
          "flex text-foreground bg-transparent justify-center items-center gap-3 border border-border shadow-sm hover:bg-muted active:scale-95",
        secondary: "bg-secondary shadow-sm active:scale-95",
        link: "underline-offset-4 hover:underline active:scale-95",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        userMenu: "gap-2 active:scale-95 h-5 font-normal px-0",
        drawer:
          "flex justify-start gap-1.5 px-1 items-center bg-background rounded hover:bg-muted text-sm active:scale-95",
        destructive:
          "flex justify-center items-center gap-2 rounded-md bg-red-500 text-white hover:bg-red-600 active:scale-95 shadow focus-visible:ring-red-600",
        dashboard:
          "flex w-full text-foreground bg-background justify-start text-[17px] gap-2.5 items-center rounded hover:bg-muted active:scale-95",
        quiz: "flex justify-center items-center gap-2 px-4 py-2 rounded-full bg-gradient-to-r from-yellow-400 to-red-500 text-white shadow-lg hover:ring-2 hover:ring-offset-2 hover:ring-yellow-500 active:scale-95 transition-all duration-300",
        fancy: "fancy-button",
      },
      size: {
        dashboard: "px-2.5 py-2",
        drawerSize: "h-8 px-1.5 py-2",
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded px-8",
        icon: "h-9 w-9",
        none: "",
      },
      active: {
        true: "bg-muted hover:bg-muted",
        false: "",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
      active: false,
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
  active?: boolean;
  isPending?: boolean;
  icon?: React.ReactNode;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      className,
      variant,
      size,
      asChild = false,
      active = false,
      isPending = false,
      icon,
      children,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, active, className }))}
        ref={ref}
        {...props}
      >
        {isPending ? (
          <>
            <Spinner size="sm" variant="light" /> {children}
          </>
        ) : (
          <>
            {icon && <span className="">{icon}</span>} {/* Render icon */}
            {children}
          </>
        )}
      </Comp>
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };
</file>

<file path="src/pages/Dashboard/Pages/Question/api/Normal-Question/get-multiple-choice-questions.ts">
import { queryOptions, useQuery } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";
import {
  PaginatedMultipleChoiceQuestionResponse,
} from "@/types/ApiTypes";
import { AxiosResponse } from "axios";
import { cleanQueryParams, extractPaginationFromHeaders } from "@/lib/pagination-query";

export type GetMultipleChoiceQuestionsParams = {
  pageNumber?: number;
  pageSize?: number;
  searchTerm?: string;
  categoryId?: number;
  difficultyId?: number;
  languageId?: number;
  visibility?: string;
  userId?: string;
};

export const getMultipleChoiceQuestions = async (
  params: GetMultipleChoiceQuestionsParams
): Promise<PaginatedMultipleChoiceQuestionResponse> => {
  const cleanParams = cleanQueryParams(params);
  const queryString = new URLSearchParams(cleanParams).toString();
  const result: AxiosResponse = await api.get(
    `/questions/multiplechoice?${queryString}`
  );
  const pagination = extractPaginationFromHeaders(result);

  return {
    data: result.data,
    pagination: pagination || undefined,
  };
};

export const getMultipleChoiceQuestionsQueryOptions = (
  params: GetMultipleChoiceQuestionsParams = {}
) => {
  return queryOptions({
    queryKey: ["multipleChoiceQuestions", params],
    queryFn: () => getMultipleChoiceQuestions(params),
  });
};

type UseMultipleChoiceQuestionOptions = {
  queryConfig?: QueryConfig<typeof getMultipleChoiceQuestionsQueryOptions>;
  params?: GetMultipleChoiceQuestionsParams;
};

export const useMultipleChoiceQuestionData = ({
  queryConfig,
  params,
}: UseMultipleChoiceQuestionOptions) => {
  return useQuery({
    ...getMultipleChoiceQuestionsQueryOptions(params),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Question/api/True_False-Question/get-true_false-questions.ts">
import { queryOptions, useQuery } from "@tanstack/react-query";
import { api } from "@/lib/Api-client";
import { QueryConfig } from "@/lib/React-query";
import {
  PaginatedTrueFalseQuestionResponse,
} from "@/types/ApiTypes";
import { AxiosResponse } from "axios";
import { cleanQueryParams, extractPaginationFromHeaders } from "@/lib/pagination-query";

export type GetTrueFalseQuestionsParams = {
  pageNumber?: number;
  pageSize?: number;
  searchTerm?: string;
  categoryId?: number | null;
  difficultyId?: number | null;
  languageId?: number | null;
  visibility?: string | null;
  userId?: string | null;
};

export const getTrueFalseQuestions = async (
  params: GetTrueFalseQuestionsParams
): Promise<PaginatedTrueFalseQuestionResponse> => {
  const cleanParams = cleanQueryParams(params as Record<string, any>);
  const queryString = new URLSearchParams(cleanParams).toString();
  const result: AxiosResponse = await api.get(
    `/questions/truefalse?${queryString}`
  );
  const pagination = extractPaginationFromHeaders(result);

  return {
    data: result.data,
    pagination: pagination || undefined,
  };
};

export const getTrueFalseQuestionsQueryOptions = (
  params: GetTrueFalseQuestionsParams = {}
) => {
  return queryOptions({
    queryKey: ["trueFalseQuestions", params],
    queryFn: () => getTrueFalseQuestions(params),
  refetchOnMount: false,
  refetchOnWindowFocus: false,
  });
};

type UseTrueFalseQuestionOptions = {
  queryConfig?: QueryConfig<typeof getTrueFalseQuestionsQueryOptions>;
  params?: GetTrueFalseQuestionsParams;
};

export const useTrueFalseQuestionData = ({
  queryConfig,
  params,
}: UseTrueFalseQuestionOptions) => {
  return useQuery({
    ...getTrueFalseQuestionsQueryOptions(params),
    ...queryConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Entities/Language/components/select-question-language.tsx">
import React from "react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { QuestionLanguage } from "@/types/ApiTypes";
import { Label } from "@/components/ui/form";

interface BaseLanguageSelectProps {
  label?: string;
  languages: QuestionLanguage[];
  includeAllOption?: boolean;
  error?: string;
  clearErrors?: () => void;
}

interface FormModeProps extends BaseLanguageSelectProps {
  mode?: "form";
  value: string; // Stringified ID (e.g., "1")
  onChange: (value: string) => void; // Receives stringified ID
}

interface FilterModeProps extends BaseLanguageSelectProps {
  mode: "filter";
  value: number | undefined; // Actual ID or undefined for "all"
  onChange: (value: number | undefined) => void; // Receives actual ID or undefined
}

type LanguageSelectProps = FormModeProps | FilterModeProps;

export const LanguageSelect: React.FC<LanguageSelectProps> = (props) => {
  const {
    label,
    languages,
    includeAllOption = true,
    error,
    clearErrors,
    mode = "form",
  } = props;

  if (mode === "filter") {
    const { value, onChange } = props as FilterModeProps;

    return (
      <div>
        {label && (
          <Label className="text-sm font-medium text-foreground">{label}</Label>
        )}
        <Select
          value={value ? value.toString() : "all"}
          onValueChange={(selectedValue) => {
            onChange(
              selectedValue === "all" ? undefined : Number(selectedValue)
            );
            clearErrors?.();
          }}
        >
          <SelectTrigger
            variant="quiz"
            className={`min-w-[200px] ${error ? "border-red-500" : ""}`}
          >
            <SelectValue
              className="text-foreground"
              placeholder="All Languages"
            />
          </SelectTrigger>
          <SelectContent className="min-w-[200px]">
            {includeAllOption && (
              <SelectItem value="all">All Languages</SelectItem>
            )}
            {languages.map((language) => (
              <SelectItem key={language.id} value={language.id.toString()}>
                {language.language}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        {error && <p className="text-sm text-red-500">{error}</p>}
      </div>
    );
  }

  // Form mode (default/existing behavior)
  const { value, onChange } = props as FormModeProps;
  const isValueValid = languages.some(
    (language) => language.id.toString() === value
  );

  return (
    <div>
      {label && (
        <Label className="text-sm font-medium text-foreground">{label}</Label>
      )}
      <Select
        value={isValueValid ? value : ""}
        onValueChange={(selectedValue) => {
          onChange(selectedValue === "all" ? "all" : selectedValue);
          clearErrors?.();
        }}
      >
        <SelectTrigger
          variant="quiz"
          className={`min-w-[200px] ${error ? "border-red-500" : ""}`}
        >
          <SelectValue placeholder="--Select Language--" />
        </SelectTrigger>
        <SelectContent className="min-w-[200px]">
          {includeAllOption && (
            <SelectItem value="all">All Languages</SelectItem>
          )}
          {languages.map((language) => (
            <SelectItem key={language.id} value={language.id.toString()}>
              {language.language}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      {error && <p className="text-sm text-red-500">{error}</p>}
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/Quiz-questions-context.tsx">
import { AnyQuestion } from "@/types/ApiTypes";
import React, {
  createContext,
  useState,
  useContext,
  ReactNode,
  useCallback,
} from "react";
import {
  DEFAULT_QUESTION_SETTINGS,
  QuestionSettings,
  QuestionSettingsMap,
  QuizQuestion,
} from "./types";

interface QuizContextType {
  // Permanent quiz selections
  addedQuestions: QuizQuestion[];
  addedQuestionsCount: number;
  addQuestionToQuiz: (questionObject: QuizQuestion) => void;
  removeQuestionFromQuiz: (questionId: number) => void;
  isQuestionSelected: (questionId: number) => boolean;

  // Temporary modal selections
  tempSelectedQuestions: AnyQuestion[];
  tempSelectedQuestionsCount: number;
  addToTempSelection: (questionObject: AnyQuestion) => void;
  removeFromTempSelection: (questionId: number) => void;
  isTempSelected: (questionId: number) => boolean;
  clearTempSelection: () => void;
  commitTempSelection: () => void;

  // Display Question
  displayQuestion: QuizQuestion | null;
  setDisplayQuestion: (question: QuizQuestion | null) => void;

  // Modal state
  isQuestionModalOpen: boolean;
  setQuestionModalOpen: (open: boolean) => void;

  // Quiz Question Settings Management
  questionSettings: QuestionSettingsMap;
  updateQuestionSetting: (
    questionId: number,
    key: keyof QuestionSettings,
    value: any
  ) => void;
  getQuestionSettings: (questionId: number) => QuestionSettings;
  bulkUpdateSettings: (updates: Partial<QuestionSettings>) => void;
  copySettingsToQuestion: (
    fromQuestionId: number,
    toQuestionId: number
  ) => void;
  resetQuestionSettings: (questionId: number) => void;
  getQuestionsWithSettings: () => Array<{
    question: QuizQuestion;
    settings: QuestionSettings;
  }>;
}

const QuizContext = createContext<QuizContextType | undefined>(undefined);

interface QuizProviderProps {
  children: ReactNode;
}

export const QuizQuestionProvider: React.FC<QuizProviderProps> = ({
  children,
}) => {
  // Permanent quiz selections
  const [addedQuestions, setAddedQuestions] = useState<QuizQuestion[]>([]);

  // Display Question
  const [displayQuestion, setDisplayQuestion] = useState<QuizQuestion | null>(
    null
  );

  // Temporary modal selections
  const [tempSelectedQuestions, setTempSelectedQuestions] = useState<
    AnyQuestion[]
  >([]);

  // Modal state
  const [isQuestionModalOpen, setIsQuestionModalOpen] = useState(false);

  // Quiz Question Settings State
  const [questionSettings, setQuestionSettings] = useState<QuestionSettingsMap>(
    {}
  );

  // Permanent quiz selection functions
  const addQuestionToQuiz = (questionObject: QuizQuestion): void => {
    setAddedQuestions((prevSelected) => {
      if (!prevSelected.find((q) => q.id === questionObject.id)) {
        const newQuestions = [...prevSelected, questionObject];
        setDisplayQuestion(questionObject);
        // Initialize settings for new question if not exists
        if (!questionSettings[questionObject.id]) {
          setQuestionSettings((prev) => ({
            ...prev,
            [questionObject.id]: {
              ...DEFAULT_QUESTION_SETTINGS,
              orderInQuiz: newQuestions.length - 1,
            },
          }));
        }

        return newQuestions;
      }
      return prevSelected;
    });
  };

  const removeQuestionFromQuiz = (questionId: number): void => {
    setAddedQuestions((prevSelected) => {
      const filtered = prevSelected.filter((q) => q.id !== questionId);

      // Update order indices after removal
      setQuestionSettings((prev) => {
        const newSettings = { ...prev };
        delete newSettings[questionId]; // Remove settings for deleted question

        // Reorder remaining questions
        filtered.forEach((question, index) => {
          if (newSettings[question.id]) {
            newSettings[question.id] = {
              ...newSettings[question.id],
              orderInQuiz: index,
            };
          }
        });

        return newSettings;
      });

      return filtered;
    });
  };

  const isQuestionSelected = (questionId: number): boolean => {
    return addedQuestions.some((q) => q.id === questionId);
  };

  // Temporary selection functions
  const addToTempSelection = (questionObject: AnyQuestion): void => {
    setTempSelectedQuestions((prevSelected) => {
      if (!prevSelected.find((q) => q.id === questionObject.id)) {
        return [...prevSelected, questionObject];
      }
      return prevSelected;
    });
  };

  const removeFromTempSelection = (questionId: number): void => {
    setTempSelectedQuestions((prevSelected) =>
      prevSelected.filter((q) => q.id !== questionId)
    );
  };

  const isTempSelected = (questionId: number): boolean => {
    return tempSelectedQuestions.some((q) => q.id === questionId);
  };

  const clearTempSelection = (): void => {
    setTempSelectedQuestions([]);
  };

  const commitTempSelection = (): void => {
    setAddedQuestions((prevSelected) => {
      setDisplayQuestion(tempSelectedQuestions[0]);
      const newQuestions = tempSelectedQuestions.filter(
        (tempQ) => !prevSelected.find((q) => q.id === tempQ.id)
      );

      // Initialize settings for new questions
      const currentLength = prevSelected.length;
      newQuestions.forEach((question, index) => {
        setQuestionSettings((prev) => ({
          ...prev,
          [question.id]: {
            ...DEFAULT_QUESTION_SETTINGS,
            orderInQuiz: currentLength + index,
          },
        }));
      });

      return [...prevSelected, ...newQuestions];
    });
    setTempSelectedQuestions([]);
  };

  const setQuestionModalOpen = (open: boolean): void => {
    setIsQuestionModalOpen(open);
    if (!open) {
      setTempSelectedQuestions([]);
    }
  };

  // NEW: Question Settings Functions
  const updateQuestionSetting = useCallback(
    (questionId: number, key: keyof QuestionSettings, value: any) => {
      setQuestionSettings((prev) => ({
        ...prev,
        [questionId]: {
          ...prev[questionId],
          [key]: value,
        },
      }));
    },
    []
  );

  const getQuestionSettings = useCallback(
    (questionId: number): QuestionSettings => {
      const settings = questionSettings[questionId];
      const orderInQuiz = addedQuestions.findIndex((q) => q.id === questionId);

      return {
        ...DEFAULT_QUESTION_SETTINGS,
        ...settings,
        orderInQuiz:
          orderInQuiz >= 0 ? orderInQuiz : settings?.orderInQuiz || 0,
      };
    },
    [questionSettings, addedQuestions]
  );

  const bulkUpdateSettings = useCallback(
    (updates: Partial<QuestionSettings>) => {
      setQuestionSettings((prev) => {
        const newSettings = { ...prev };
        addedQuestions.forEach((question) => {
          newSettings[question.id] = {
            ...newSettings[question.id],
            ...updates,
          };
        });
        return newSettings;
      });
    },
    [addedQuestions]
  );

  const copySettingsToQuestion = useCallback(
    (fromQuestionId: number, toQuestionId: number) => {
      const sourceSettings = questionSettings[fromQuestionId];
      if (sourceSettings) {
        setQuestionSettings((prev) => ({
          ...prev,
          [toQuestionId]: {
            ...sourceSettings,
            orderInQuiz: prev[toQuestionId]?.orderInQuiz || 0, // Preserve order
          },
        }));
      }
    },
    [questionSettings]
  );

  const resetQuestionSettings = useCallback((questionId: number) => {
    setQuestionSettings((prev) => ({
      ...prev,
      [questionId]: {
        ...DEFAULT_QUESTION_SETTINGS,
        orderInQuiz: prev[questionId]?.orderInQuiz || 0, // Preserve order
      },
    }));
  }, []);

  const getQuestionsWithSettings = useCallback(() => {
    return addedQuestions.map((question, index) => ({
      question,
      settings: {
        ...DEFAULT_QUESTION_SETTINGS,
        ...questionSettings[question.id],
        orderInQuiz: index, // Always use current array position
      },
    }));
  }, [addedQuestions, questionSettings]);

  const contextValue: QuizContextType = {
    // Permanent selections
    addedQuestions,
    addedQuestionsCount: addedQuestions.length,
    addQuestionToQuiz,
    removeQuestionFromQuiz,
    isQuestionSelected,

    // Temporary selections
    tempSelectedQuestions,
    tempSelectedQuestionsCount: tempSelectedQuestions.length,
    addToTempSelection,
    removeFromTempSelection,
    isTempSelected,
    clearTempSelection,
    commitTempSelection,

    // Display Question
    displayQuestion,
    setDisplayQuestion,

    // Modal state
    isQuestionModalOpen,
    setQuestionModalOpen,

    // Quiz Question Settings
    questionSettings,
    updateQuestionSetting,
    getQuestionSettings,
    bulkUpdateSettings,
    copySettingsToQuestion,
    resetQuestionSettings,
    getQuestionsWithSettings,
  };

  return (
    <QuizContext.Provider value={contextValue}>{children}</QuizContext.Provider>
  );
};

export const useQuiz = (): QuizContextType => {
  const context = useContext(QuizContext);
  if (context === undefined) {
    throw new Error("useQuiz must be used within a QuizProvider");
  }
  return context;
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/Quizzes.tsx">
import { useState, useEffect } from "react";
import { Button, DataTable, Card, Spinner } from "@/components/ui";
import { Link } from "react-router-dom";
import { quizColumns } from "./components/Data-Table-Columns/columns";
import { useAllQuizzesData } from "./api/get-all-quizzes";
import { useDebounce } from "@/hooks/use-debounce";

// Import the filter dependencies
import { QuizFilters } from "./components/quiz-filters"; // You'll need to create this
import { Separator } from "@/components/ui/separator";
import { useQuestionCategoryData } from "../Question/Entities/Categories/api/get-question-categories";
import { useQuestionDifficultyData } from "../Question/Entities/Difficulty/api/get-question-difficulties";
import { useQuestionLanguageData } from "../Question/Entities/Language/api/get-question-language";
import { LiftedButton } from "@/common/LiftedButton";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input, Textarea } from "@/components/ui/form";
import { GrFormNextLink } from "react-icons/gr";

export const Quizzes = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [debouncedSearchTerm] = useDebounce(searchTerm, 500);
  const [selectedCategoryId, setSelectedCategoryId] = useState<
    number | undefined
  >();
  const [selectedDifficultyId, setSelectedDifficultyId] = useState<
    number | undefined
  >();
  const [selectedLanguageId, setSelectedLanguageId] = useState<
    number | undefined
  >();
  const [selectedVisibility, setSelectedVisibility] = useState<
    string | undefined
  >();
  const [selectedIsPublished, setSelectedIsPublished] = useState<
    boolean | undefined
  >();
  const [selectedIsActive, setSelectedIsActive] = useState<
    boolean | undefined
  >();
  const [pageNumber, setPageNumber] = useState(1);
  const [pageSize] = useState(10);

  // Load filter data
  const categoriesQuery = useQuestionCategoryData({});
  const difficultiesQuery = useQuestionDifficultyData({});
  const languagesQuery = useQuestionLanguageData({});

  const queryParams = {
    pageNumber: pageNumber,
    pageSize: pageSize,
    searchTerm: debouncedSearchTerm || undefined,
    categoryId: selectedCategoryId,
    difficultyId: selectedDifficultyId,
    languageId: selectedLanguageId,
    visibility: selectedVisibility,
    isPublished: selectedIsPublished,
    isActive: selectedIsActive,
  };

  const quizData = useAllQuizzesData({
    params: queryParams,
  });

  // Reset page when filters change
  useEffect(() => {
    setPageNumber(1);
  }, [
    debouncedSearchTerm,
    selectedCategoryId,
    selectedDifficultyId,
    selectedLanguageId,
    selectedVisibility,
    selectedIsPublished,
    selectedIsActive,
  ]);

  const handlePageChange = (newPage: number) => {
    setPageNumber(newPage);
    window.scrollTo(0, 0);
  };

  // Check if filter data is still loading
  const isFilterDataLoading =
    categoriesQuery.isLoading ||
    difficultiesQuery.isLoading ||
    languagesQuery.isLoading;

  if (isFilterDataLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Spinner size="lg" />
      </div>
    );
  }

  if (quizData.isLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Spinner size="lg" />
      </div>
    );
  }

  if (quizData.isError) {
    return <p>Failed to load quizzes. Try again later.</p>;
  }

  // Extract the quiz data from the paginated response
  const quizzes = quizData.data?.data ?? [];
  const pagination = quizData.data?.pagination;

  return (
    <div className="container mx-auto py-8 px-4 md:px-0">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Quiz Management</h1>
        {/* <Link to="/dashboard/quizzes/create-quiz" className="w-fit">
          <LiftedButton>+ Create Quiz</LiftedButton>
        </Link> */}
        <Dialog>
          <DialogTrigger asChild>
            <LiftedButton>+ Create Quiz</LiftedButton>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>
                <h2 className="text-xl">Choose your quiz title</h2>
                <p className="text-muted-foreground text-xs">
                  (You can still change later)
                </p>
              </DialogTitle>
            </DialogHeader>
            <Input variant="quiz" placeholder="Quiz Title" />
            {/* <Textarea
              variant="quiz"
              maxLength={200}
              className="bg-muted rounded-sm max-h-28"
              placeholder="Enter quiz description"
            /> */}
            <section className="flex flex-col items-end mt-6">
              <Link to="/dashboard/quizzes/create-quiz" className="w-fit">
                <LiftedButton className="w-fit">
                  Next
                  <GrFormNextLink />
                </LiftedButton>
              </Link>
            </section>
          </DialogContent>
        </Dialog>
      </div>

      <Card className="p-6 bg-card border dark:border-foreground/30">
        {/* Filters section */}
        <QuizFilters
          searchTerm={searchTerm}
          onSearchTermChange={setSearchTerm}
          categories={categoriesQuery.data || []}
          selectedCategoryId={selectedCategoryId}
          onCategoryChange={setSelectedCategoryId}
          difficulties={difficultiesQuery.data || []}
          selectedDifficultyId={selectedDifficultyId}
          onDifficultyChange={setSelectedDifficultyId}
          languages={languagesQuery.data || []}
          selectedLanguageId={selectedLanguageId}
          onLanguageChange={setSelectedLanguageId}
          selectedVisibility={selectedVisibility}
          onVisibilityChange={setSelectedVisibility}
          selectedIsPublished={selectedIsPublished}
          onIsPublishedChange={setSelectedIsPublished}
          selectedIsActive={selectedIsActive}
          onIsActiveChange={setSelectedIsActive}
        />

        <Separator className="my-6" />

        <DataTable data={quizzes} columns={quizColumns} />
      </Card>
    </div>
  );
};
</file>

<file path="src/utils/Image-Upload.tsx">
import { useState, useCallback, useEffect } from "react";
import { api } from "@/lib/Api-client";

/**
 * Interface for ImageUpload component props
 */
interface ImageUploadProps {
  /** Callback function when image is successfully uploaded */
  onUpload: (url: string) => void;
  /** Callback function when image is removed */
  onRemove?: () => void;
  /** Optional disable state for the upload input */
  disabled?: boolean;
  /** Optional class name for additional styling */
  className?: string;
  /** Optional endpoint path - defaults to "ImageUpload/question" */
  endpoint?: string;
  /** Optional initial image URL to display preview */
  initialImageUrl?: string | null;
}

/**
 * Component for uploading images with preview and remove functionality
 */
export const ImageUpload: React.FC<ImageUploadProps> = ({
  onUpload,
  onRemove,
  disabled = false,
  className = "",
  endpoint = "ImageUpload/question",
  initialImageUrl = null,
}) => {
  const [uploading, setUploading] = useState(false);
  const [preview, setPreview] = useState<string | null>(initialImageUrl);
  const [error, setError] = useState<string | null>(null);

  // If initialImageUrl changes, update preview
  useEffect(() => {
    setPreview(initialImageUrl);
  }, [initialImageUrl]);

  /**
   * Handles file selection and uploads the image to the server
   */
  const handleFileSelect = useCallback(
    async (e: React.ChangeEvent<HTMLInputElement>) => {
      const file = e.target.files?.[0];
      if (!file) return;

      setError(null);

      if (!file.type.startsWith("image/")) {
        setError("Please select an image file");
        setPreview(null);
        return;
      }

      setUploading(true);
      const formData = new FormData();
      formData.append("file", file);

      try {
        const response = await api.post(endpoint, formData, {
          headers: { "Content-Type": "multipart/form-data" },
        });

        let imageUrl: string;
        if (typeof response === "object" && response !== null) {
          if ("url" in response) {
            imageUrl = (response as any).url;
          } else if (
            "data" in response &&
            response.data &&
            "url" in response.data
          ) {
            imageUrl = (response.data as any).url;
          } else {
            throw new Error("Could not find URL in response");
          }
        } else {
          throw new Error("Invalid response format");
        }

        if (!imageUrl) {
          throw new Error("No URL returned from server");
        }

        setPreview(imageUrl);
        onUpload(imageUrl);
      } catch (err: any) {
        let errorMessage = "Unknown error occurred";
        if (err.response) {
          if (err.response.data?.title) {
            errorMessage = err.response.data.title;
          } else if (err.response.data?.message) {
            errorMessage = err.response.data.message;
          } else if (err.response.status === 400 && typeof err.response.data === "string") {
            errorMessage = err.response.data;
          }
        } else if (err.message) {
          errorMessage = err.message;
        }
        setError(errorMessage);
      } finally {
        setUploading(false);
      }
    },
    [endpoint, onUpload]
  );

  /**
   * Clears the preview and notifies parent
   */
  const handleClear = useCallback(() => {
    setPreview(null);
    setError(null);
    onRemove?.();
  }, [onRemove]);

  return (
    <div className={className}>
      {preview ? (
        <div className="space-y-2">
          <div className="w-full rounded-md overflow-hidden border dark:border-foreground/30">
            <img
              src={preview}
              alt="Uploaded preview"
              className="w-full h-auto max-h-48 object-contain mx-auto"
            />
          </div>
          <button
            type="button"
            onClick={handleClear}
            disabled={disabled}
            className="text-sm text-red-600 hover:text-red-800"
          >
            Remove Image
          </button>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="flex flex-col gap-2">
            <input
              type="file"
              accept="image/*"
              onChange={handleFileSelect}
              disabled={disabled || uploading}
              className="block w-full text-sm text-gray-500  file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-primary/10 file:text-primary hover:file:bg-primary/20 disabled:opacity-50 focus:outline-none cursor-pointer"
            />
            {error && <p className="text-red-500 text-sm">{error}</p>}
            {uploading && (
              <div className="flex items-center">
                <div className="mr-2 h-4 w-4 rounded-full border-2 border-primary border-t-transparent animate-spin"></div>
                <p className="text-sm text-muted-foreground">Uploading image...</p>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default ImageUpload;
</file>

<file path="OxygenBackend/Dockerfile">
#See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

#Depending on the operating system of the host machines(s) that will build or run the containers, the image specified in the FROM statement may need to be changed.
#For more information, please see https://aka.ms/containercompat

# Use the .NET SDK image to build the app
# Stage 1: Build the application
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
WORKDIR /src

# --- Optimization: Restore dependencies first ---
# The paths on the LEFT ("OxygenBackend/...") are relative to your GitHub repo root.
# The paths on the RIGHT ("./QuizAPI/") are where they will be placed inside the container.

# Copy the solution file and the project file
COPY ["OxygenBackend/QuizAPI/QuizAPI.sln", "./QuizAPI/"]
COPY ["OxygenBackend/QuizAPI/QuizAPI.csproj", "./QuizAPI/"]

# Restore dependencies for the entire solution. The path is inside the container.
RUN dotnet restore "QuizAPI/QuizAPI.sln"


# --- Build and Publish ---
# Copy the rest of your backend source code into the container
COPY ./OxygenBackend/QuizAPI/. ./QuizAPI/

# Publish the specific project. We tell dotnet exactly which project to publish.
# The --no-restore flag is used because we already restored in a previous step.
RUN dotnet publish "QuizAPI/QuizAPI.csproj" -c Release -o /app/publish --no-restore


# Stage 2: Create the final, smaller runtime image
FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final
WORKDIR /app

# Copy the published output from the build stage
COPY --from=build /app/publish .

ENTRYPOINT ["dotnet", "QuizAPI.dll"]
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Quizzes/Services/QuizServices/QuizService.cs">
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using QuizAPI.Data;
using QuizAPI.DTOs.Quiz;
using QuizAPI.ManyToManyTables;
using QuizAPI.Models;
using QuizAPI.Models.Quiz;
using System.Linq;

namespace QuizAPI.Controllers.Quizzes.Services.QuizServices
{
    public class QuizService : IQuizService
    {
        private readonly ApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly ILogger<QuizService> _logger;

        public QuizService(
            ApplicationDbContext context,
            IMapper mapper,
            ILogger<QuizService> logger)
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
            _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        public async Task<PagedList<QuizSummaryDTO>> GetAllQuizzesAsync(QuizFilterParams filterParams)
        {
            try
            {
                var quizQuery = _context.Quizzes
                    .Include(q => q.User)
                    .Include(q => q.Category)
                    .Include(q => q.Language)
                    .Include(q => q.Difficulty)
                    .Include(q => q.QuizQuestions)
                    .AsQueryable();

                // Apply filters
                quizQuery = ApplyQuizFilters(quizQuery, filterParams);

                // Apply pagination and convert to DTO
                var pagedQuizzes = await PagedList<Quiz>.CreateAsync(quizQuery, filterParams.PageNumber, filterParams.PageSize);

                var quizDtos = _mapper.Map<List<QuizSummaryDTO>>(pagedQuizzes.Items);

                return new PagedList<QuizSummaryDTO>(
                    quizDtos,
                    pagedQuizzes.TotalCount,
                    pagedQuizzes.PageNumber,
                    pagedQuizzes.PageSize
                );
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving all quizzes");
                throw;
            }
        }

        public async Task<PagedList<QuizSummaryDTO>> GetQuizzesByUserAsync(Guid userId, QuizFilterParams filterParams)
        {
            try
            {
                var quizQuery = _context.Quizzes
                    .Include(q => q.User)
                    .Include(q => q.Category)
                    .Include(q => q.Language)
                    .Include(q => q.Difficulty)
                    .Include(q => q.QuizQuestions)
                    .Where(q => q.UserId == userId)
                    .AsQueryable();

                // Apply filters
                quizQuery = ApplyQuizFilters(quizQuery, filterParams);

                // Apply pagination and convert to DTO
                var pagedQuizzes = await PagedList<Quiz>.CreateAsync(quizQuery, filterParams.PageNumber, filterParams.PageSize);

                var quizDtos = _mapper.Map<List<QuizSummaryDTO>>(pagedQuizzes.Items);

                return new PagedList<QuizSummaryDTO>(
                    quizDtos,
                    pagedQuizzes.TotalCount,
                    pagedQuizzes.PageNumber,
                    pagedQuizzes.PageSize
                );
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving quizzes for user {UserId}", userId);
                throw;
            }
        }

        public async Task<QuizDTO?> GetQuizByIdAsync(int id)
        {
            try
            {
                var quiz = await _context.Quizzes
                    .Include(q => q.User)
                    .Include(q => q.Category)
                    .Include(q => q.Language)
                    .Include(q => q.Difficulty)
                    .Include(q => q.QuizQuestions)
                    .ThenInclude(qq => qq.Question)
                    .FirstOrDefaultAsync(q => q.Id == id);

                return quiz == null ? null : _mapper.Map<QuizDTO>(quiz);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving quiz {QuizId}", id);
                throw;
            }
        }

        public async Task<QuizDTO> CreateQuizAsync(Guid userId, QuizCM quizCM)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                // Check if required entities exist
                var categoryExists = await _context.QuestionCategories.AnyAsync(c => c.Id == quizCM.CategoryId);
                var languageExists = await _context.QuestionLanguages.AnyAsync(l => l.Id == quizCM.LanguageId);
                var difficultyExists = await _context.QuestionDifficulties.AnyAsync(d => d.ID == quizCM.DifficultyId);
                var userExists = await _context.Users.AnyAsync(u => u.Id == userId);

                if (!categoryExists || !languageExists || !difficultyExists || !userExists)
                {
                    throw new InvalidOperationException("One or more required entities do not exist");
                }

                // Verify all questions exist
                var questionIds = quizCM.Questions.Select(q => q.QuestionId).ToList();
                var existingQuestionCount = await _context.Questions.CountAsync(q => questionIds.Contains(q.Id));

                if (existingQuestionCount != questionIds.Count)
                {
                    throw new InvalidOperationException("One or more questions do not exist");
                }

                // Create quiz
                var quiz = _mapper.Map<Quiz>(quizCM);
                quiz.UserId = userId;
                quiz.CreatedAt = DateTime.UtcNow;
                quiz.Version = 1;
                quiz.IsActive = true;

                await _context.Quizzes.AddAsync(quiz);
                await _context.SaveChangesAsync();

                // Add quiz questions
                var order = 1;
                foreach (var questionCM in quizCM.Questions)
                {
                    var quizQuestion = _mapper.Map<QuizQuestion>(questionCM);
                    quizQuestion.QuizId = quiz.Id;
                    quizQuestion.OrderInQuiz = questionCM.OrderInQuiz > 0 ? questionCM.OrderInQuiz : order++;

                    await _context.QuizQuestions.AddAsync(quizQuestion);
                }

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                // Return full quiz details
                return await GetQuizByIdAsync(quiz.Id);
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError(ex, "Error creating quiz for user {UserId}", userId);
                throw;
            }
        }

        public async Task<QuizDTO?> UpdateQuizAsync(Guid userId, QuizUM quizUM)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                // Retrieve quiz and verify ownership
                var quiz = await _context.Quizzes
                    .Include(q => q.QuizQuestions)
                    .FirstOrDefaultAsync(q => q.Id == quizUM.Id);

                if (quiz == null)
                {
                    return null;
                }

                if (quiz.UserId != userId)
                {
                    _logger.LogWarning("User {UserId} attempted to update quiz {QuizId} owned by {OwnerId}",
                        userId, quizUM.Id, quiz.UserId);
                    return null;
                }

                // Check for concurrency conflicts
                if (quiz.Version != quizUM.Version)
                {
                    throw new DbUpdateConcurrencyException("Quiz has been modified by another user");
                }

                // Check if required entities exist
                var categoryExists = await _context.QuestionCategories.AnyAsync(c => c.Id == quizUM.CategoryId);
                var languageExists = await _context.QuestionLanguages.AnyAsync(l => l.Id == quizUM.LanguageId);
                var difficultyExists = await _context.QuestionDifficulties.AnyAsync(d => d.ID == quizUM.DifficultyId);

                if (!categoryExists || !languageExists || !difficultyExists)
                {
                    throw new InvalidOperationException("One or more required entities do not exist");
                }

                // Verify all questions exist
                var questionIds = quizUM.Questions.Select(q => q.QuestionId).ToList();
                var existingQuestionCount = await _context.Questions.CountAsync(q => questionIds.Contains(q.Id));

                if (existingQuestionCount != questionIds.Count)
                {
                    throw new InvalidOperationException("One or more questions do not exist");
                }

                // Update quiz properties
                quiz.Title = quizUM.Title;
                quiz.Description = quizUM.Description;
                quiz.CategoryId = quizUM.CategoryId;
                quiz.LanguageId = quizUM.LanguageId;
                quiz.DifficultyId = quizUM.DifficultyId;
                quiz.TimeLimitInSeconds = quizUM.TimeLimitInSeconds;
                quiz.ShowFeedbackImmediately = quizUM.ShowFeedbackImmediately;
                quiz.ShuffleQuestions = quizUM.ShuffleQuestions;
                quiz.IsPublished = quizUM.IsPublished;
                quiz.IsActive = quizUM.IsActive;
                quiz.Version += 1;

                // Remove existing quiz questions
                _context.QuizQuestions.RemoveRange(quiz.QuizQuestions);

                // Add updated quiz questions
                foreach (var questionUM in quizUM.Questions)
                {
                    var quizQuestion = _mapper.Map<QuizQuestion>(questionUM);
                    quizQuestion.QuizId = quiz.Id;

                    await _context.QuizQuestions.AddAsync(quizQuestion);
                }

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                // Return full quiz details
                return await GetQuizByIdAsync(quiz.Id);
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError(ex, "Error updating quiz {QuizId} for user {UserId}", quizUM.Id, userId);
                throw;
            }
        }

        public async Task<QuizDTO?> ToggleQuizPublishStatusAsync(Guid userId, int quizId)
        {
            try
            {
                var quiz = await _context.Quizzes
                    .FirstOrDefaultAsync(q => q.Id == quizId);

                if (quiz == null)
                {
                    return null;
                }

                if (quiz.UserId != userId)
                {
                    _logger.LogWarning("User {UserId} attempted to toggle publish status of quiz {QuizId} owned by {OwnerId}",
                        userId, quizId, quiz.UserId);
                    return null;
                }

                quiz.IsPublished = !quiz.IsPublished;
                quiz.Version += 1;

                await _context.SaveChangesAsync();

                return await GetQuizByIdAsync(quizId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error toggling publish status for quiz {QuizId}", quizId);
                throw;
            }
        }

        public async Task<QuizDTO?> ToggleQuizActiveStatusAsync(Guid userId, int quizId)
        {
            try
            {
                var quiz = await _context.Quizzes
                    .FirstOrDefaultAsync(q => q.Id == quizId);

                if (quiz == null)
                {
                    return null;
                }

                if (quiz.UserId != userId)
                {
                    _logger.LogWarning("User {UserId} attempted to toggle active status of quiz {QuizId} owned by {OwnerId}",
                        userId, quizId, quiz.UserId);
                    return null;
                }

                quiz.IsActive = !quiz.IsActive;
                quiz.Version += 1;

                await _context.SaveChangesAsync();

                return await GetQuizByIdAsync(quizId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error toggling active status for quiz {QuizId}", quizId);
                throw;
            }
        }

        public async Task<IEnumerable<QuizSummaryDTO>> GetPublicQuizzesAsync()
        {
            try
            {
                var quizzes = await _context.Quizzes
                    .Include(q => q.User)
                    .Include(q => q.Category)
                    .Include(q => q.Language)
                    .Include(q => q.Difficulty)
                    .Include(q => q.QuizQuestions)
                    .Where(q => q.IsActive && q.IsPublished)
                    .ToListAsync();

                return _mapper.Map<List<QuizSummaryDTO>>(quizzes);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving public quizzes");
                throw;
            }
        }

        private static IQueryable<Quiz> ApplyQuizFilters(IQueryable<Quiz> query, QuizFilterParams filterParams)
        {
            // Active/Inactive filter - fixed to use IsActive property from filterParams
            if (filterParams.IsActive.HasValue)
            {
                query = query.Where(q => q.IsActive == filterParams.IsActive.Value);
            }

            // Search term filter
            if (!string.IsNullOrEmpty(filterParams.SearchTerm))
            {
                var searchTerm = filterParams.SearchTerm.ToLower();
                query = query.Where(q => q.Title.ToLower().Contains(searchTerm) ||
                                        q.Description.ToLower().Contains(searchTerm));
            }

            // Category filter
            if (filterParams.CategoryId.HasValue)
            {
                query = query.Where(q => q.CategoryId == filterParams.CategoryId.Value);
            }

            // Difficulty filter
            if (filterParams.DifficultyId.HasValue)
            {
                query = query.Where(q => q.DifficultyId == filterParams.DifficultyId.Value);
            }

            // Language filter
            if (filterParams.LanguageId.HasValue)
            {
                query = query.Where(q => q.LanguageId == filterParams.LanguageId.Value);
            }

            // Published filter - added missing filter
            if (filterParams.IsPublished.HasValue)
            {
                query = query.Where(q => q.IsPublished == filterParams.IsPublished.Value);
            }

            // User filter
            if (filterParams.UserId.HasValue)
            {
                query = query.Where(q => q.UserId == filterParams.UserId.Value);
            }

            return query;
        }
    }
}
</file>

<file path="src/components/ui/select.tsx">
import * as React from "react";
import {
  CaretSortIcon,
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from "@radix-ui/react-icons";
import * as SelectPrimitive from "@radix-ui/react-select";

import { cn } from "@/utils/cn";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

type SelectTriggerProps = React.ComponentPropsWithoutRef<
  typeof SelectPrimitive.Trigger
> & {
  variant?: "default" | "quiz";
};

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  SelectTriggerProps
>(({ className, children, variant = "default", ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full border text-foreground dark:border-foreground/30 border-foreground/70 items-center justify-between whitespace-nowrap rounded-md px-3 py-2 text-sm shadow-sm ring-offset-muted placeholder:text-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      variant === "quiz" &&
        "font-header placeholder:text-center bg-gradient-to-r from-primary/10 to-primary/5 border-2 border-primary/40 dark:border-primary/60 text-foreground font-medium rounded-xl transform transition-all duration-200 dark:bg-gradient-to-r dark:from-primary/20 dark:to-primary/10 text-sm h-9 px-3 py-1.5 shadow-[0_3px_0_0_hsl(var(--primary)/0.5)] hover:shadow-[0_2px_0_0_hsl(var(--primary)/0.5)] hover:translate-y-px active:shadow-none active:translate-y-0.5 md:text-xs md:h-8 md:px-2.5 md:py-1 md:shadow-[0_2px_0_0_hsl(var(--primary)/0.5)] md:hover:shadow-[0_1px_0_0_hsl(var(--primary)/0.5)] md:hover:translate-y-px md:active:shadow-none md:active:translate-y-px lg:text-sm lg:h-9 lg:px-3 lg:py-1.5 lg:shadow-[0_3px_0_0_hsl(var(--primary)/0.5)] lg:hover:shadow-[0_2px_0_0_hsl(var(--primary)/0.5)] lg:hover:translate-y-px lg:active:shadow-none lg:active:translate-y-0.5",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <CaretSortIcon
        className={cn(
          "h-4 w-4 opacity-50",
          variant === "quiz" && "text-primary opacity-90"
        )}
      />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUpIcon />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDownIcon />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

type SelectContentProps = React.ComponentPropsWithoutRef<
  typeof SelectPrimitive.Content
> & {
  variant?: "default" | "quiz";
};

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  SelectContentProps
>(
  (
    { className, children, position = "popper", variant = "default", ...props },
    ref
  ) => (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        ref={ref}
        className={cn(
          "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-foreground/70 bg-muted text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          variant === "quiz" &&
            "border-2 border-primary/60 bg-background rounded-xl shadow-lg data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95 data-[state=open]:duration-300",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
            variant === "quiz" && "p-0.5"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
);
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

type SelectItemProps = React.ComponentPropsWithoutRef<
  typeof SelectPrimitive.Item
> & {
  variant?: "default" | "quiz";
};

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  SelectItemProps
>(({ className, children, variant = "default", ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default hover:bg-background data-[highlighted]:bg-background/70 cursor-pointer select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      variant === "quiz" &&
        "text-center rounded-lg transition-colors duration-150 text-xs py-1.5 hover:bg-primary/10 data-[highlighted]:bg-primary/20 data-[highlighted]:text-foreground focus:bg-primary/20 focus:text-foreground md:text-xs md:py-1 lg:text-xs lg:py-1.5",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon
          className={cn("h-4 w-4", variant === "quiz" && "text-primary")}
        />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/True_Flase-Question/true-false-question-card.tsx">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { QuestionType, TrueFalseQuestion } from "@/types/ApiTypes";
import { CheckCircle, XCircle, ChevronDown, ImageIcon } from "lucide-react";
import { cn } from "@/utils/cn";
import { DeleteQuestion } from "../Re-Usable-Components/delete-question";
import { UpdateTrueFalseQuestionForm } from "./update-true_false-questions";

interface TrueFalseQuestionCardProps {
  question: TrueFalseQuestion;
}

export const TrueFalseQuestionCard = ({
  question,
}: TrueFalseQuestionCardProps) => {
  return (
    <Card className="mb-4 border shadow-sm dark:border-foreground/20 dark:bg-primary/10 overflow-hidden">
      <CardHeader className="pb-2 pt-4">
        <div className="flex flex-wrap items-center justify-between gap-2">
          <CardTitle className="text-lg leading-tight flex-1">
            {question.text}
            {question.imageUrl && (
              <Badge
                variant="outline"
                className="ml-2 bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800/50"
              >
                <ImageIcon className="h-3 w-3 mr-1" />
                <span className="text-blue-600 dark:text-blue-400">Image</span>
              </Badge>
            )}
          </CardTitle>
          <div className="flex items-center gap-2 flex-shrink-0">
            <Badge variant="outline" className="text-xs">
              ID: {question.id}
            </Badge>
            <Badge
              variant="outline"
              className={cn(
                question.difficulty.level === "Easy" &&
                  "text-green-600 dark:text-green-400 border-green-200 dark:border-green-800/50",
                question.difficulty.level === "Medium" &&
                  "text-amber-600 dark:text-amber-400 border-amber-200 dark:border-amber-800/50",
                question.difficulty.level === "Hard" &&
                  "text-red-600 dark:text-red-400 border-red-200 dark:border-red-800/50"
              )}
            >
              {question.difficulty.level}
            </Badge>
          </div>
        </div>
        <div className="flex flex-wrap items-center gap-2 mt-2">
          <Badge variant="secondary" className="text-xs font-normal">
            {question.category.name}
          </Badge>
          <Badge variant="secondary" className="text-xs font-normal">
            {question.language.language}
          </Badge>
          <Badge variant="secondary" className="text-xs font-normal capitalize">
            {question.visibility}
          </Badge>
        </div>
      </CardHeader>

      <CardContent className="pb-2 pt-0">
        <Accordion type="single" collapsible className="w-full">
          <AccordionItem value="details" className="border-b-0">
            <AccordionTrigger className="py-2 text-sm font-medium flex justify-between">
              <span className="text-sm font-medium">Correct Answer</span>
              <ChevronDown className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
            </AccordionTrigger>
            <AccordionContent>
              <div className="space-y-3">
                {question.imageUrl && (
                  <div className="w-full mb-3 rounded-md overflow-hidden border">
                    <img
                      src={question.imageUrl}
                      alt="Question image"
                      className="w-full h-auto max-h-48 object-contain mx-auto"
                    />
                  </div>
                )}

                <div
                  className={cn(
                    "flex items-center p-2 rounded-md border",
                    question.correctAnswer
                      ? "bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800"
                      : "bg-red-50 border-red-200 dark:bg-red-900/10 dark:border-red-800/50"
                  )}
                >
                  {question.correctAnswer ? (
                    <CheckCircle className="h-4 w-4 text-green-500 dark:text-green-400 flex-shrink-0 mr-2" />
                  ) : (
                    <XCircle className="h-4 w-4 text-red-500 dark:text-red-400 flex-shrink-0 mr-2" />
                  )}
                  <div className="flex-1 text-sm font-medium">
                    {question.correctAnswer ? "TRUE" : "FALSE"}
                  </div>
                </div>

                <div className="text-xs text-muted-foreground mt-2 pt-2 border-t dark:border-foreground/30">
                  Created:{" "}
                  {new Date(question.createdAt).toLocaleDateString(undefined, {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                  })}
                </div>
              </div>
              <section className="flex items-center justify-end gap-2 mr-2">
                <UpdateTrueFalseQuestionForm question={question} />
                <DeleteQuestion
                  id={question.id}
                  questionType={QuestionType.TrueFalse}
                />
              </section>
            </AccordionContent>
          </AccordionItem>
        </Accordion>
      </CardContent>
    </Card>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/types.ts">
import { AnyQuestion, QuestionBase, QuestionCategory, QuestionDifficulty, QuestionLanguage, QuestionType } from "@/types/ApiTypes";
import { Control, UseFormRegister, FormState, UseFormSetValue, UseFormWatch, UseFormClearErrors } from "react-hook-form";
import { CreateQuizInput } from "../../api/create-quiz";

export interface FormProps {
  register: UseFormRegister<CreateQuizInput>;
  control: Control<CreateQuizInput>;
  formState: FormState<CreateQuizInput>;
  setValue: UseFormSetValue<CreateQuizInput>;
  watch: UseFormWatch<CreateQuizInput>;
  clearErrors: UseFormClearErrors<CreateQuizInput>;
}

export interface QueryData {
  questions: QuestionBase[];
  categories: QuestionCategory[];
  difficulties: QuestionDifficulty[];
  languages: QuestionLanguage[];
  isLoading: boolean;
  error: Error | null;
}

export interface QuestionSettings {
  pointSystem: string;
  timeLimitInSeconds: number;
  orderInQuiz: number;
}

export interface QuestionSettingsMap {
  [questionId: number]: Partial<QuestionSettings>;
}

export const DEFAULT_QUESTION_SETTINGS: QuestionSettings = {
  pointSystem: "Standard",
  timeLimitInSeconds: 10,
  orderInQuiz: 0,
};
export interface NewAnswerOption{
  id?:number;
  text:string;
  isCorrect: boolean;
}

export interface NewQuestionBase {
  id: number;
  text: string;
  visibility: string;
  difficultyId: number;
  categoryId: number;
  languageId: number;
  imageUrl?: string;
  type: QuestionType;
}

export interface NewMultipleChoiceQuestion extends NewQuestionBase {
  type: QuestionType.MultipleChoice;
  answerOptions: NewAnswerOption[];
  allowMultipleSelections: boolean;
}

export interface NewTrueFalseQuestion extends NewQuestionBase {
  type: QuestionType.TrueFalse;
  correctAnswer: boolean;
}

export interface NewTypeTheAnswerQuestion extends NewQuestionBase {
  type: QuestionType.TypeTheAnswer;
  correctAnswer: string;
  isCaseSensitive: boolean;
  allowPartialMatch: boolean;
  acceptableAnswers: string[];
}

export type NewAnyQuestion =
  | NewMultipleChoiceQuestion
  | NewTrueFalseQuestion
  | NewTypeTheAnswerQuestion;

export type QuizQuestion = AnyQuestion | NewAnyQuestion;
</file>

<file path="OxygenBackend/QuizAPI/Data/ApplicationDbContext.cs">
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.ManyToManyTables;
using QuizAPI.Models;
using QuizAPI.Models.Quiz;
using QuizAPI.Models.Statistics.Questions;
using System.Text.Json;
namespace QuizAPI.Data
{
    public class ApplicationDbContext : DbContext
    {

        public DbSet<User> Users { get; set; }

        public DbSet<QuestionBase> Questions { get; set; }

        public DbSet<MultipleChoiceQuestion> MultipleChoiceQuestions { get; set; }
        public DbSet<TrueFalseQuestion> TrueFalseQuestions { get; set; }
        public DbSet<TypeTheAnswerQuestion> TypeTheAnswerQuestions { get; set; }

        public DbSet<Quiz> Quizzes { get; set; }

        public DbSet<QuizSession> QuizSessions { get; set; }

        public DbSet<UserAnswer> UserAnswers { get; set; }

        public DbSet<QuizQuestion> QuizQuestions { get; set; }

        public DbSet<QuestionCategory> QuestionCategories { get; set; }
        public DbSet<QuestionLanguage> QuestionLanguages { get; set; }

        public DbSet<AnswerOption> AnswerOptions { get; set; }

        public DbSet<QuestionDifficulty> QuestionDifficulties { get; set; }

        public DbSet<Permission> Permissions { get; set; }

        public DbSet<Role> Roles { get; set; }

        public DbSet<UpdatedAt> UpdatedAt { get; set; }

        public DbSet<RoleUpdatedAt> RoleUpdatedAt { get; set; }

        public DbSet<PermissionUpdatedAt> PermissionUpdatedAt { get; set; }
        public DbSet<UserUpdatedAt> UserUpdatedAt { get; set; }

        public DbSet<QuestionStatistics> QuestionStatistics { get; set; }

        public DbSet<ImageAsset> ImageAssets { get; set; }

        public DbSet<Universiteti> Universitetet { get; set; }

        public DbSet<Drejtimi> Drejtimet { get; set; }

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            // Configure many-to-many relationship between Role and UpdatedAt tables.
            modelBuilder.Entity<RoleUpdatedAt>()
                .HasKey(ru => new { ru.RoleId, ru.UpdatedAtId });

            modelBuilder.Entity<RoleUpdatedAt>()
                .HasOne(ru => ru.Role)
                .WithMany(r => r.RoleUpdatedAt)
                .HasForeignKey(ru => ru.RoleId);

            modelBuilder.Entity<RoleUpdatedAt>()
                .HasOne(ru => ru.UpdatedAt)
                .WithMany(u => u.RoleUpdatedAt)
                .HasForeignKey(ru => ru.UpdatedAtId);

            // Configure many-to-many relationship between Permission and UpdatedAt tables.
            modelBuilder.Entity<PermissionUpdatedAt>()
                .HasKey(ru => new { ru.PermissionId, ru.UpdatedAtId });

            modelBuilder.Entity<PermissionUpdatedAt>()
                .HasOne(ru => ru.Permission)
                .WithMany(r => r.PermissionUpdatedAt)
                .HasForeignKey(ru => ru.PermissionId);

            modelBuilder.Entity<PermissionUpdatedAt>()
                .HasOne(ru => ru.UpdatedAt)
                .WithMany(u => u.PermissionUpdatedAt)
                .HasForeignKey(ru => ru.UpdatedAtId);

            // Configure many-to-many relationship between User and UpdatedAt tables.
            modelBuilder.Entity<UserUpdatedAt>()
    .HasKey(ru => new { ru.UserId, ru.UpdatedAtId });

            modelBuilder.Entity<UserUpdatedAt>()
                .HasOne(ru => ru.User)
                .WithMany(r => r.UserUpdatedAt)
                .HasForeignKey(ru => ru.UserId)
                .OnDelete(DeleteBehavior.NoAction); // Or DeleteBehavior.NoAction

            modelBuilder.Entity<UserUpdatedAt>()
                .HasOne(ru => ru.UpdatedAt)
                .WithMany(u => u.UserUpdatedAt)
                .HasForeignKey(ru => ru.UpdatedAtId)
                .OnDelete(DeleteBehavior.NoAction); // Or DeleteBehavior.NoAction

            modelBuilder.Entity<UpdatedAt>()
                .HasOne(u => u.User)
                .WithMany()
                .HasForeignKey(u => u.UserId)
                .OnDelete(DeleteBehavior.NoAction);


            // Configuration for Question-AnswerOptions relationship
            modelBuilder.Entity<MultipleChoiceQuestion>()
      .HasMany(q => q.AnswerOptions)
      .WithOne(a => a.Question)
      .HasForeignKey(a => a.QuestionId)
      .OnDelete(DeleteBehavior.Cascade);

            //Configuration for User-QuestionCategory relationship
            modelBuilder.Entity<QuestionCategory>()
       .HasOne(qc => qc.User)
       .WithMany()
       .HasForeignKey(qc => qc.UserId)
       .OnDelete(DeleteBehavior.Restrict);

            //Configuration for User-QuestionDifficulty relationship
            modelBuilder.Entity<QuestionDifficulty>()
       .HasOne(qd => qd.User)
       .WithMany()
       .HasForeignKey(qc => qc.UserId)
       .OnDelete(DeleteBehavior.Restrict);

            //Configuration for Question-QuestionLanguage relationship
            modelBuilder.Entity<QuestionBase>()
           .HasOne(ql => ql.Language)
           .WithMany()
           .HasForeignKey(ql => ql.LanguageId)
           .OnDelete(DeleteBehavior.Restrict);


            //Configuration for Quiz and User relationship
            modelBuilder.Entity<Quiz>().
            HasOne(q => q.User).
            WithMany().
            HasForeignKey(q => q.UserId).
            OnDelete(DeleteBehavior.Restrict);

            //Configuration for Quiz and User relationship
            modelBuilder.Entity<QuizQuestion>()
                .HasOne(qq => qq.Quiz)
                .WithMany(q => q.QuizQuestions)
                .HasForeignKey(qq => qq.QuizId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<QuizQuestion>()
                .HasOne(qq => qq.Question)
                .WithMany(q => q.QuizQuestions)
                .HasForeignKey(qq => qq.QuestionId)
                .OnDelete(DeleteBehavior.Restrict);



            //Configuration for Quiz and Question relationship

            modelBuilder.Entity<QuizQuestion>()
                .HasKey(qq => new { qq.QuizId, qq.QuestionId });

            modelBuilder.Entity<QuizQuestion>()
                .HasOne(qq => qq.Quiz)
                .WithMany(q => q.QuizQuestions)
                .HasForeignKey(qq => qq.QuizId);

            modelBuilder.Entity<QuizQuestion>()
                .HasOne(qq => qq.Question)
                .WithMany(q => q.QuizQuestions)
                .HasForeignKey(qq => qq.QuestionId);


            //Configuration for QuizSession and User relationship
            modelBuilder.Entity<QuizSession>()
                .HasOne(qs => qs.User)
                .WithMany(u => u.QuizSessions)
                .HasForeignKey(qs => qs.UserId)
                .OnDelete(DeleteBehavior.Restrict);


            //Configuration for QuizSession and UserAnswers relationship
            modelBuilder.Entity<UserAnswer>()
                .HasOne(ua => ua.QuizSession)
                .WithMany(qs => qs.UserAnswers)
                .HasForeignKey(ua => ua.SessionId)
                .OnDelete(DeleteBehavior.Restrict);

            //Configuration for Question and UserAnswers relationship
            modelBuilder.Entity<UserAnswer>()
                .HasOne(ua => ua.Question)
                .WithMany(q => q.UserAnswers)
                .HasForeignKey(ua => ua.QuestionId)
                .OnDelete(DeleteBehavior.Restrict);


            //Configuration for the Table-per-hierarchy (TPH) pattern
            modelBuilder.Entity<QuestionBase>()
            .HasDiscriminator(q => q.Type)
            .HasValue<MultipleChoiceQuestion>(QuestionType.MultipleChoice)
            .HasValue<TrueFalseQuestion>(QuestionType.TrueFalse)
            .HasValue<TypeTheAnswerQuestion>(QuestionType.TypeTheAnswer);


            modelBuilder.Entity<TypeTheAnswerQuestion>()
        .Property(e => e.AcceptableAnswers)
        .HasConversion(
            v => JsonSerializer.Serialize(v, (JsonSerializerOptions)null),
            v => JsonSerializer.Deserialize<List<string>>(v, (JsonSerializerOptions)null))
        .Metadata.SetValueComparer(new ValueComparer<List<string>>(
            (c1, c2) => c1.SequenceEqual(c2),
            c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v != null ? v.GetHashCode() : 0)),
            c => c.ToList()));
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Models/Questions/Question.cs">
using QuizAPI.ManyToManyTables;
using QuizAPI.Models;
using QuizAPI.Models.Quiz;
using QuizAPI.Models.Statistics.Questions;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;


namespace QuizAPI.Models
{
   

    public enum QuestionVisibility
    {
        Global,   
        Private  
    }

    public enum QuestionType
    {
        MultipleChoice,
        TrueFalse,
        TypeTheAnswer,
    }

    public abstract class QuestionBase
    {
        public int Id { get; set; }
        public string Text { get; set; } = string.Empty;

        public string? ImageUrl { get; set; }

        [Required]
        public QuestionVisibility Visibility { get; set; } = QuestionVisibility.Global;

        public int DifficultyId { get; set; }
        [JsonIgnore]
        public QuestionDifficulty Difficulty { get; set; }

        public int CategoryId { get; set; }
        [JsonIgnore]
        public QuestionCategory Category { get; set; }

        public int LanguageId { get; set; }
        [JsonIgnore]
        public QuestionLanguage Language { get; set; }

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        public Guid UserId { get; set; }
        [JsonIgnore]
        public User User { get; set; }

        public QuestionStatistics? Statistics { get; set; }

        [Required]
        public QuestionType Type { get; set; }

        public ICollection<QuizQuestion> QuizQuestions { get; set; } = new List<QuizQuestion>();

        public ICollection<UserAnswer> UserAnswers { get; set; } = new List<UserAnswer>();
    }

    public class MultipleChoiceQuestion : QuestionBase
    {
        public MultipleChoiceQuestion()
        {
            Type = QuestionType.MultipleChoice;
        }

        public ICollection<AnswerOption> AnswerOptions { get; set; } = new List<AnswerOption>();

        public bool AllowMultipleSelections { get; set; } = false;
    }

    public class TrueFalseQuestion : QuestionBase
    {
        public TrueFalseQuestion()
        {
            Type = QuestionType.TrueFalse;
        }
        public bool CorrectAnswer { get; set; }
    }

    public class TypeTheAnswerQuestion : QuestionBase
    {
        public TypeTheAnswerQuestion()
        {
            Type = QuestionType.TypeTheAnswer;
        }

        public string CorrectAnswer { get; set; } = string.Empty;

        public bool IsCaseSensitive { get; set; } = false;

        public bool AllowPartialMatch { get; set; } = false;

        public List<string> AcceptableAnswers { get; set; } = new List<string>();
    }

}
</file>

<file path="OxygenBackend/QuizAPI/Models/Quiz/Quiz.cs">
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using QuizAPI.ManyToManyTables;

namespace QuizAPI.Models.Quiz
{

    public enum QuizVisibility
    {
        Private,
        Public,
        Friends
    }

    public class Quiz
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [Required]
        [MaxLength(255)]
        public string Title { get; set; } = string.Empty;

        [MaxLength(1000)]
        public string? Description { get; set; }


        [Required]
        public Guid UserId { get; set; } 

        
        [ForeignKey(nameof(UserId))]
        [JsonIgnore]
        public User User { get; set; }

        public int CategoryId { get; set; }

        [JsonIgnore]
        [ForeignKey(nameof(CategoryId))]
        public QuestionCategory Category { get; set; }

        public int LanguageId { get; set; }

        [JsonIgnore]
        [ForeignKey(nameof(LanguageId))]
        public QuestionLanguage Language { get; set; }

        public int? TimeLimitInSeconds { get; set; } = 0; 

        public bool ShowFeedbackImmediately { get; set; } = false;

        public int DifficultyId { get; set; }

        [JsonIgnore]
        [ForeignKey(nameof(DifficultyId))]
        public QuestionDifficulty Difficulty { get; set; }

        [Required]
        public bool ShuffleQuestions { get; set; } = false;

        [Required]
        public QuizVisibility Visibility { get; set; } = QuizVisibility.Private;


        [Required]
        public bool IsPublished { get; set; } = false; 

        [Required]
        public bool IsActive { get; set; } = true;

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;


        public int Version { get; set; } = 1;


        public ICollection<QuizQuestion> QuizQuestions { get; set; } = new List<QuizQuestion>();
    }
}
</file>

<file path="src/common/LiftedButton.tsx">
import React from "react";
import { cn } from "@/utils/cn";

export interface LiftedButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  children: React.ReactNode;
  className?: string;
  variant?: "default" | "icon";
}

export const LiftedButton = React.forwardRef<
  HTMLButtonElement,
  LiftedButtonProps
>(({ children, className, disabled, ...props }, ref) => {
  return (
    <>
      {props.variant === "icon" ? (
        <button
          className={cn("relative font-thin", className)}
          disabled={disabled}
          {...props}
          ref={ref}
        >
          <div
            className={cn(
              "absolute inset-x-[1.4px] h-full -bottom-[1.4px] -right-[1.4px] bg-foreground border border-foreground/20 rounded-xl",
              disabled && "opacity-50"
            )}
          ></div>
          <div
            className={cn(
              "relative bg-primary border border-foreground/20 rounded-xl py-2 px-2 transition transform duration-200 text-white",
              !disabled &&
                "hover:translate-y-[-1px] active:translate-y-[1px] active:translate-x-[1px]",
              disabled && "opacity-50 cursor-not-allowed",
              className
            )}
          >
            {children}
          </div>
        </button>
      ) : (
        <button
          className={cn("relative font-thin", className)}
          disabled={disabled}
          {...props}
          ref={ref}
        >
          <div
            className={cn(
              "absolute inset-x-[2px] h-full -bottom-[2px] -right-[2px] bg-foreground border border-foreground/20 rounded-lg",
              disabled && "opacity-50"
            )}
          ></div>
          <div
            className={cn(
              "relative bg-primary flex items-center justify-center gap-2 border border-foreground/20 rounded-lg py-2 px-4 transition transform duration-200 text-white",
              !disabled &&
                "hover:translate-y-[-2px] active:translate-y-[2px] active:translate-x-[2px]",
              disabled && "opacity-70 ",
              className
            )}
          >
            {children}
          </div>
        </button>
      )}
    </>
  );
});

LiftedButton.displayName = "LiftedButton";
</file>

<file path="src/pages/Dashboard/Pages/Question/api/True_False-Question/create-true_false-question.ts">
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { z } from "zod";
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import { TrueFalseQuestion } from "@/types/ApiTypes";
import { getTrueFalseQuestionsQueryOptions } from "./get-true_false-questions";
import { UnspecifiedIds } from "../../Components/Re-Usable-Components/constants";

export const createTrueFalseQuestionInputSchema = z.object({
  text:          z.string().min(1, "Question is required"),
  difficultyId:  z
                    .number().int().positive("Choose a difficulty")
                    .optional()
                    .default(UnspecifiedIds.difficultyId),
  categoryId:    z
                    .number().int().positive("Choose a category")
                    .optional()
                    .default(UnspecifiedIds.categoryId),
  languageId:    z
                    .number().int().positive("Choose a language")
                    .optional()
                    .default(UnspecifiedIds.languageId),
  visibility:    z.string().optional(),
  imageUrl:      z.string().optional(),
  correctAnswer: z.boolean().default(false),
}
);

export type CreateQuestionInput = z.infer<typeof createTrueFalseQuestionInputSchema>;

export const createTrueFalseQuestion = ({ data }: { data: CreateQuestionInput }): Promise<TrueFalseQuestion> => {
  return (
    console.log("data", data),
    api.post('/questions/truefalse', data));
};

type UseCreateTrueFalseQuestionOptions = {
  mutationConfig?: MutationConfig<typeof createTrueFalseQuestion>;
};

export const useCreateTrueFalseQuestion = ({ mutationConfig }: UseCreateTrueFalseQuestionOptions = {}) => {
  const queryClient = useQueryClient();
  
  const { onSuccess, onError, ...restConfig } = mutationConfig || {};

  return useMutation({
    mutationFn: createTrueFalseQuestion,
    onSuccess: (...args) => {
      queryClient.invalidateQueries({ queryKey: getTrueFalseQuestionsQueryOptions().queryKey });
      onSuccess?.(...args);
    },
    onError: (error, variables, context) => {
      console.error('Error creating question:', error);
      onError?.(error, variables, context);
    },
    ...restConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/True_Flase-Question/create-true_false-questions.tsx">
import { Check } from "lucide-react";
import React, { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Form, FormDrawer, Input, Label } from "@/components/ui/form";
import { useNotifications } from "@/common/Notifications";

import {
  QuestionCategory,
  QuestionDifficulty,
  QuestionLanguage,
} from "@/types/ApiTypes";
import { Separator } from "@/components/ui/separator";
import { CategorySelect } from "../../Entities/Categories/Components/select-question-category";
import { DifficultySelect } from "../../Entities/Difficulty/Components/select-question-difficulty";
import { LanguageSelect } from "../../Entities/Language/components/select-question-language";
import {
  createTrueFalseQuestionInputSchema,
  useCreateTrueFalseQuestion,
} from "../../api/True_False-Question/create-true_false-question";
import { LiftedButton } from "@/common/LiftedButton";
import ImageUpload from "@/utils/Image-Upload";

interface CreateTrueFalseQuestionFormProps {
  categories: QuestionCategory[];
  difficulties: QuestionDifficulty[];
  languages: QuestionLanguage[];
  onSuccess?: () => void;
  title?: string;
}

export const CreateTrueFalseQuestionForm: React.FC<
  CreateTrueFalseQuestionFormProps
> = ({ categories, difficulties, languages, onSuccess, title }) => {
  const { addNotification } = useNotifications();
  const [imageUrl, setImageUrl] = useState("");

  const createQuestionMutation = useCreateTrueFalseQuestion({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "True/False Question Created",
        });
        onSuccess?.();
      },
    },
  });

  return (
    <FormDrawer
      isDone={createQuestionMutation.isSuccess}
      triggerButton={
        <LiftedButton>{title ? title : "True/False Question"}</LiftedButton>
      }
      title="Create a True False Question"
      submitButton={
        <Button
          form="create-true-false-question"
          variant="addSave"
          className="rounded-sm text-white"
          type="submit"
          size="default"
          isPending={createQuestionMutation.isPending}
          disabled={createQuestionMutation.isPending}
        >
          Submit
        </Button>
      }
    >
      <Form
        id="create-true-false-question"
        className="w-[500px]"
        onSubmit={(values) => {
          createQuestionMutation.mutate({
            data: values,
          });
        }}
        schema={createTrueFalseQuestionInputSchema}
      >
        {({ register, formState, setValue, watch, clearErrors }) => {
          const checkCorrectAnswer = (value: boolean) => {
            setValue("correctAnswer", value);
            clearErrors("correctAnswer");
          };

          useEffect(() => {
            if (imageUrl) {
              setValue("imageUrl", imageUrl);
            }
          }, [imageUrl, setValue]);

          const handleImageUpload = (url: string) => {
            setImageUrl(url);
            setValue("imageUrl", url);
          };
          const handleImageRemove = () => {
            setImageUrl("");
            setValue("imageUrl", "");
          };

          return (
            <>
              <div className="grid grid-[2fr_1fr] w-full gap-5">
                <div className="space-y-2">
                  <Input
                    id="text"
                    variant="quiz"
                    className={`py-2 w-full ${
                      formState.errors["text"] ? "border-red-500" : ""
                    }`}
                    placeholder="Enter your statement here..."
                    error={formState.errors["text"]}
                    registration={register("text")}
                  />
                  <ImageUpload
                    onUpload={handleImageUpload}
                    onRemove={handleImageRemove}
                  />
                  <input type="hidden" {...register("imageUrl")} />
                </div>
                <div className="space-y-4 mt-4">
                  <Label className="block text-sm font-medium text-foreground flex items-center justify-center gap-2">
                    Correct Answer
                  </Label>
                  <div className="flex items-center justify-around rounded-sm">
                    <div className="flex flex-col w-full items-center bg-primary/80 dark:bg-primary/80 rounded-md p-2">
                      <button
                        id="true-option"
                        type="button"
                        onClick={() => checkCorrectAnswer(true)}
                        className={`w-6 h-6 rounded-full flex items-center border justify-center transition-all ${
                          watch("correctAnswer") === true
                            ? "bg-green-500 text-white"
                            : "bg-primary/20 hover:bg-primary/30 dark:bg-primary/30 dark:hover:bg-primary/40"
                        }`}
                      >
                        {watch("correctAnswer") === true && (
                          <Check className="h-4 w-4" />
                        )}
                      </button>
                      <Label
                        htmlFor="true-option"
                        className="text-md font-medium mt-2"
                      >
                        True
                      </Label>
                    </div>

                    <div className="flex flex-col items-center w-full bg-red-500/80 dark:bg-red-500/80 rounded-sm p-2">
                      <button
                        id="false-option"
                        type="button"
                        onClick={() => checkCorrectAnswer(false)}
                        className={`w-6 h-6 rounded-full border flex items-center justify-center transition-all ${
                          watch("correctAnswer") === false
                            ? "bg-green-500 text-white"
                            : "bg-primary/20 hover:bg-primary/30 dark:bg-primary/30 dark:hover:bg-primary/40"
                        }`}
                      >
                        {watch("correctAnswer") === false && (
                          <Check className="h-4 w-4" />
                        )}
                      </button>
                      <Label
                        htmlFor="false-option"
                        className="text-md font-medium mt-2"
                      >
                        False
                      </Label>
                    </div>
                  </div>
                  {formState.errors?.correctAnswer && (
                    <p className="text-sm text-red-500 font-semibold border border-red-500 p-2 text-center">
                      Please select either True or False
                    </p>
                  )}
                </div>
                <Separator className="bg-gray-500" />

                <CategorySelect
                  // label="Category"
                  categories={categories}
                  value={watch("categoryId")?.toString() || ""}
                  onChange={(selectedValue: string) =>
                    setValue("categoryId", parseInt(selectedValue, 10))
                  }
                  includeAllOption={false}
                  error={formState.errors["categoryId"]?.message}
                  clearErrors={() => clearErrors("categoryId")}
                />
              </div>
              <DifficultySelect
                // label="Difficulty"
                difficulties={difficulties}
                value={watch("difficultyId")?.toString() || ""}
                onChange={(selectedValue: string) =>
                  setValue("difficultyId", parseInt(selectedValue, 10))
                }
                includeAllOption={false}
                error={formState.errors["difficultyId"]?.message}
                clearErrors={() => clearErrors("difficultyId")}
              />
              <LanguageSelect
                // label="Language"
                languages={languages}
                value={watch("languageId")?.toString() || ""}
                includeAllOption={false}
                onChange={(selectedValue: string) =>
                  setValue("languageId", parseInt(selectedValue, 10))
                }
                error={formState.errors["languageId"]?.message}
                clearErrors={() => clearErrors("languageId")}
              />
            </>
          );
        }}
      </Form>
    </FormDrawer>
  );
};

export default CreateTrueFalseQuestionForm;
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/Type_The_Answer-Question/type-the-asnwer-question-card.tsx">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { QuestionType, TypeTheAnswerQuestion } from "@/types/ApiTypes";
import {
  ImageIcon,
  TextCursorInput,
  CaseSensitive, // Renamed from CaseSensitiveIcon for clarity
  SearchCheck,
  SearchX,
} from "lucide-react";
import { cn } from "@/utils/cn";
import { DeleteQuestion } from "../Re-Usable-Components/delete-question";
import UpdateTypeAnswerQuestionForm from "./update-type_the_asnwer-question";

interface TypeTheAnswerQuestionCardProps {
  question: TypeTheAnswerQuestion;
}

export const TypeTheAnswerQuestionCard = ({
  question,
}: TypeTheAnswerQuestionCardProps) => {
  return (
    <Card className="mb-4 border shadow-sm dark:border-foreground/20 dark:bg-primary/10 overflow-hidden">
      <CardHeader className="pb-2 pt-4">
        <div className="flex flex-wrap items-center justify-between gap-2">
          <CardTitle className="text-lg leading-tight flex-1">
            {question.text}
            {question.imageUrl && (
              <Badge
                variant="outline"
                className="ml-2 bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800/50"
              >
                <ImageIcon className="h-3 w-3 mr-1" />
                <span className="text-blue-600 dark:text-blue-400">Image</span>
              </Badge>
            )}
          </CardTitle>
          <div className="flex items-center gap-2 flex-shrink-0">
            <Badge variant="outline" className="text-xs">
              ID: {question.id}
            </Badge>
            <Badge
              variant="outline"
              className={cn(
                "text-xs", // Added text-xs here for consistency
                question.difficulty.level === "Easy" &&
                  "text-green-600 dark:text-green-400 border-green-200 dark:border-green-800/50 bg-green-50 dark:bg-green-900/30",
                question.difficulty.level === "Medium" &&
                  "text-amber-600 dark:text-amber-400 border-amber-200 dark:border-amber-800/50 bg-amber-50 dark:bg-amber-900/30",
                question.difficulty.level === "Hard" &&
                  "text-red-600 dark:text-red-400 border-red-200 dark:border-red-800/50 bg-red-50 dark:bg-red-900/30"
              )}
            >
              {question.difficulty.level}
            </Badge>
          </div>
        </div>
        <div className="flex flex-wrap items-center gap-2 mt-2">
          <Badge variant="secondary" className="text-xs font-normal">
            {question.category.name}
          </Badge>
          <Badge variant="secondary" className="text-xs font-normal">
            {question.language.language}
          </Badge>
          <Badge variant="secondary" className="text-xs font-normal capitalize">
            {question.visibility}
          </Badge>
        </div>
      </CardHeader>

      <CardContent className="pb-2 pt-0">
        <Accordion type="single" collapsible className="w-full">
          <AccordionItem value="details" className="border-b-0">
            <AccordionTrigger className="py-2 text-sm font-medium flex justify-between hover:no-underline">
              <span className="text-sm font-medium">Answer Details</span>
              <TextCursorInput className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200 group-data-[state=open]:rotate-180" />
            </AccordionTrigger>
            <AccordionContent className="pt-1 pb-3">
              {" "}
              {/* Adjusted padding */}
              <div className="space-y-4">
                {" "}
                {/* Increased spacing between sections */}
                {question.imageUrl && (
                  <div className="w-full mb-3 rounded-md overflow-hidden border dark:border-foreground/30">
                    <img
                      src={question.imageUrl}
                      alt="Question image"
                      className="w-full h-auto max-h-48 object-contain mx-auto bg-muted/30 dark:bg-muted/10"
                    />
                  </div>
                )}
                {/* Updated Correct Answer Display */}
                <div className="space-y-1">
                  <p className="text-xs font-medium text-muted-foreground">
                    Correct Answer
                  </p>
                  <div className="p-2.5 rounded-md bg-green-50 dark:bg-green-700/20 border border-green-200 dark:border-green-600/40 shadow-sm">
                    <p className="font-mono text-sm text-green-700 dark:text-green-300 font-semibold break-all">
                      {question.correctAnswer}
                    </p>
                  </div>
                </div>
                {/* Updated Case Sensitive and Partial Match Display */}
                <div className="space-y-2">
                  <p className="text-xs font-medium text-muted-foreground">
                    Evaluation Rules
                  </p>
                  <div className="p-3 rounded-md border bg-slate-50 dark:bg-slate-800/30 dark:border-slate-700/60 space-y-2.5">
                    <div className="flex items-start sm:items-center text-sm">
                      {question.isCaseSensitive ? (
                        <CaseSensitive className="h-4 w-4 mr-2.5 text-blue-600 dark:text-blue-400 flex-shrink-0 mt-0.5 sm:mt-0" />
                      ) : (
                        <CaseSensitive className="h-4 w-4 mr-2.5 text-gray-500 dark:text-gray-400 flex-shrink-0 opacity-60 mt-0.5 sm:mt-0" />
                      )}
                      <span className="text-foreground/90 dark:text-foreground/80">
                        Case Sensitivity:{" "}
                        <span className="font-medium text-foreground dark:text-white">
                          {question.isCaseSensitive
                            ? "Enabled (Strict: 'A' ≠ 'a')"
                            : "Disabled (Flexible: 'A' = 'a')"}
                        </span>
                      </span>
                    </div>
                    <div className="flex items-start sm:items-center text-sm">
                      {question.allowPartialMatch ? (
                        <SearchCheck className="h-4 w-4 mr-2.5 text-green-600 dark:text-green-400 flex-shrink-0 mt-0.5 sm:mt-0" />
                      ) : (
                        <SearchX className="h-4 w-4 mr-2.5 text-red-600 dark:text-red-400 flex-shrink-0 mt-0.5 sm:mt-0" />
                      )}
                      <span className="text-foreground/90 dark:text-foreground/80">
                        Match Type:{" "}
                        <span className="font-medium text-foreground dark:text-white">
                          {question.allowPartialMatch
                            ? "Partial Allowed (e.g., 'York' in 'New York')"
                            : "Exact Required (Must match fully)"}
                        </span>
                      </span>
                    </div>
                  </div>
                </div>
                {question.acceptableAnswers.length > 0 && (
                  <div className="space-y-1.5">
                    <p className="text-xs font-medium text-muted-foreground">
                      Alternative Acceptable Answers
                    </p>
                    <ul className="space-y-1 text-sm">
                      {question.acceptableAnswers.map((answer, index) => (
                        <li
                          key={index}
                          className="p-1.5 px-2 rounded-md bg-muted/50 dark:bg-muted/30 border border-transparent dark:hover:border-foreground/20 font-mono text-xs"
                        >
                          {answer}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
                <div className="text-xs text-muted-foreground pt-3 border-t dark:border-foreground/20">
                  Created:{" "}
                  <span className="font-medium">
                    {new Date(question.createdAt).toLocaleDateString(
                      undefined,
                      {
                        year: "numeric",
                        month: "short",
                        day: "numeric",
                      }
                    )}
                  </span>
                </div>
              </div>
              <section className="flex items-center justify-end gap-2 mr-2">
                <UpdateTypeAnswerQuestionForm question={question} />
                <DeleteQuestion
                  id={question.id}
                  questionType={QuestionType.TypeTheAnswer}
                />
              </section>
            </AccordionContent>
          </AccordionItem>
        </Accordion>
      </CardContent>
    </Card>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/use-quiz-form.ts">
import { useMultipleChoiceQuestionData } from "../../../Question/api/Normal-Question/get-multiple-choice-questions";
import { useQuestionCategoryData } from "../../../Question/Entities/Categories/api/get-question-categories";
import { useQuestionDifficultyData } from "../../../Question/Entities/Difficulty/api/get-question-difficulties";
// import { useCreateQuiz } from "../../api/create-quiz";
import { useQuestionLanguageData } from "../../../Question/Entities/Language/api/get-question-language";
// import { CreateQuizInput } from "../../api/create-quiz";

export const useQuizForm = () => {
  // const navigate = useNavigate();
  //   const { addNotification } = useNotifications();
  
  
  const questionsQuery = useMultipleChoiceQuestionData({});
  const categoriesQuery = useQuestionCategoryData({});
  const difficultiesQuery = useQuestionDifficultyData({});
  const languagesQuery = useQuestionLanguageData({});

  // const createQuizMutation = useCreateQuiz({
  //   mutationConfig: {
  //     onSuccess: () => {
  //       addNotification({
  //         type: "success",
  //         title: "Quiz Created",
  //       });
  //       navigate("/dashboard/quizzes");
  //     },
  //     onError: (error: any) => {
  //       addNotification({
  //         type: "error",
  //         title: "Failed to Create Quiz",
  //         message: error?.message || "An error occurred while creating the quiz."
  //       });
  //     },
  //   },
  // });

  const queryData = {
    // questions: questionsQuery.data?.items ?? [],
    categories: categoriesQuery.data ?? [],
    difficulties: difficultiesQuery.data ?? [],
    languages: languagesQuery.data ?? [],
    isLoading: questionsQuery.isLoading || categoriesQuery.isLoading || 
               difficultiesQuery.isLoading || languagesQuery.isLoading,
    error: questionsQuery.error || categoriesQuery.error || 
           difficultiesQuery.error || languagesQuery.error
  };

  // const handleSubmit = (values: CreateQuizInput) => {
  //   console.log(values);
  //   createQuizMutation.mutate({ data: values });
  // };

  return {
    queryData,
    // handleSubmit,
    // isSubmitting: createQuizMutation.isPending,
  };
};
</file>

<file path="src/pages/Dashboard/Pages/Question/api/Type_The_Answer-Question/create-type-the-answer-question.ts">
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { z } from "zod";
import { api } from "@/lib/Api-client";
import { MutationConfig } from "@/lib/React-query";
import { TypeTheAnswerQuestion } from "@/types/ApiTypes";
import { getTypeTheAnswerQuestionsQueryOptions } from "./get-type-the-answer-questions";
import { UnspecifiedIds } from "../../Components/Re-Usable-Components/constants";

export const createTypeTheAnswerQuestionInputSchema = z.object({
  text:             z.string().min(1, "Question is required"),
  difficultyId:     z
                      .number().int().positive("Choose a difficulty")
                      .optional()
                      .default(UnspecifiedIds.difficultyId),
  categoryId:       z
                      .number().int().positive("Choose a category")
                      .optional()
                      .default(UnspecifiedIds.categoryId),
  languageId:       z
                      .number().int().positive("Choose a language")
                      .optional()
                      .default(UnspecifiedIds.languageId),
  visibility:       z.string().optional(),
  correctAnswer:    z.string().min(1, "Correct answer is required"),
  isCaseSensitive:  z.boolean().default(false),
  allowPartialMatch: z.boolean().default(false),
  imageUrl : z.string().optional(),
 acceptableAnswers: z.array(
  z.object({
    value: z.string().min(1, 'Additional acceptable answer cannot be empty'),
  })
).default([]),

});

const transformFormData = (data: CreateTypeTheAnswerQuestionInput) => {
  const transformedData = {
    ...data,
    acceptableAnswers: data.acceptableAnswers 
      ? data.acceptableAnswers.map(item => item.value)
      : []
  };
  
  return transformedData;
};

export type CreateTypeTheAnswerQuestionInput = z.infer<typeof createTypeTheAnswerQuestionInputSchema>;

export const createTypeTheAnswerQuestion = ({ data }: { data: CreateTypeTheAnswerQuestionInput }): Promise<TypeTheAnswerQuestion> => {
  return (
    console.log("data", data),
    api.post('/questions/typeTheAnswer', transformFormData(data)));
};

type UseCreateTypeTheAnswerQuestionOptions = {
  mutationConfig?: MutationConfig<typeof createTypeTheAnswerQuestion>;
};

export const useCreateTypeTheAnswerQuestion = ({ mutationConfig }: UseCreateTypeTheAnswerQuestionOptions = {}) => {
  const queryClient = useQueryClient();
  
  const { onSuccess, onError, ...restConfig } = mutationConfig || {};

  return useMutation({
    mutationFn: createTypeTheAnswerQuestion,
    onSuccess: (...args) => {
      queryClient.invalidateQueries({ queryKey: getTypeTheAnswerQuestionsQueryOptions().queryKey });
      onSuccess?.(...args);
    },
    onError: (error, variables, context) => {
      console.error('Error creating type-the-answer question:', error);
      onError?.(error, variables, context);
    },
    ...restConfig,
  });
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/api/create-quiz.ts">
import { QuizSummaryDTO } from '@/types/ApiTypes'
import {z} from 'zod'
import { api } from '@/lib/Api-client'
import { MutationConfig } from '@/lib/React-query'
import { useQueryClient, useMutation } from '@tanstack/react-query'
import { getAllQuizzesQueryOptions } from './get-all-quizzes'


export const answerOptionInputSchema = z.object({
    text: z.string().min(1, 'Answer option text is required'),
    isCorrect: z.boolean(),
    id : z.number().optional(),
  });
  
  export const answerOptionsSchema = z
  .array(answerOptionInputSchema)
  .min(2, "At least one answer option is required")
  .max(4, "No more than 4 answer options are allowed")
  .refine(
    (options) => options.some((option) => option.isCorrect),
    {
      path: ["answerOptions"],
      message: "At least one answer option must be marked as correct",
    }
  );

export const createQuizInputSchema = z.object({
  title: z.string()
    .min(1, 'Title is required')
    .max(255, 'Title must be 255 characters or less'),
  
  description: z.string()
    .max(1000, 'Description must be 1000 characters or less')
    .optional()
    .nullable(),

  categoryId: z.number()
    .int()
    .positive({ message: "Category is required" }),
  
  languageId: z.number()
    .int()
    .positive({ message: "Language is required" }),
  
  difficultyId: z.number()
    .int()
    .positive({ message: "Difficulty is required" }),

  // Quiz Settings
  timeLimitInSeconds: z.number()
    .int()
    .min(0, 'Time limit cannot be negative')
    .max(2000, 'Time limit cannot exceed 2000 seconds')
    .default(0),

  showFeedbackImmediately: z.boolean().default(false),

  visibility: z.string()
    .min(1, 'Visibility is required')
    .refine((val) => ['Public', 'Private'].includes(val), {
      message: 'Visibility must be public or private'
    }),

  shuffleQuestions: z.boolean().default(false),

  isPublished: z.boolean().default(false),

 questions: z.array(
    z.object({
      questionId: z.number()
        .int()
        .positive({ message: "Question ID is required" }),
      
      timeLimitInSeconds: z.number()
        .int()
        .min(0, 'Time limit cannot be negative')
        .max(2000, 'Time limit cannot exceed 2000 seconds')
        .default(10),
      
      pointSystem: z.string()
        .min(1, 'Point system is required')
        .default("Standard"),
      
      orderInQuiz: z.number()
        .int()
        .min(0, 'Order must be non-negative')
        .default(0)
    })
  )
  .min(1, 'At least one question is required')
});

export type CreateQuizInput = z.infer<typeof createQuizInputSchema>

export const createQuiz = ({data} : {data:CreateQuizInput}): Promise<QuizSummaryDTO> => {
    return api.post('/quiz', data);
}

type UseCreateQuizOptions = {
    mutationConfig?: MutationConfig<typeof createQuiz>;
}

export const useCreateQuiz = ({ mutationConfig }: UseCreateQuizOptions = {}) => {
    const queryClient = useQueryClient();

    const { onSuccess, onError, ...restConfig } = mutationConfig || {};

    return useMutation(
        {
            mutationFn: createQuiz,
            onSuccess: (...args) => {
                queryClient.invalidateQueries({ queryKey: getAllQuizzesQueryOptions().queryKey });
                onSuccess?.(...args);
            },
            onError: (error, variables, context) => {
                console.error('Error creating question quiz:', error);
                onError?.(error, variables, context);
            },
            ...restConfig,
        }
    )
}
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/score-select.tsx">
import { Controller, Control, FieldError } from "react-hook-form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/form";

interface ScoreSelectProps {
  control?: Control<any>;
  name?: string;
  error?: FieldError;
  id?: string;
}

const scoreOptions = [
  { value: "5", label: "Standard" },
  { value: "10", label: "Double" },
  { value: "20", label: "Quadruple" },
];

export const ScoreSelect = ({ control, name, error, id }: ScoreSelectProps) => {
  return (
    <div>
      <Label htmlFor={id} className="text-sm block text-primary">
        Select Score
      </Label>
      <Controller
        name={name ? name : "pointSystem"}
        control={control}
        render={({ field }) => (
          <Select
            onValueChange={(value) => field.onChange(Number(value))}
            value={field.value?.toString() || scoreOptions[1].value}
          >
            <SelectTrigger id={id} variant="quiz">
              <SelectValue
                className="text-foreground"
                placeholder="Select score"
              />
            </SelectTrigger>
            <SelectContent>
              {scoreOptions.map((option) => (
                <SelectItem key={option.value} value={option.value}>
                  {option.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        )}
      />
      {error && <p className="text-red-500 text-sm mt-1">{error.message}</p>}
    </div>
  );
};
</file>

<file path="src/routes/Router.tsx">
import { lazy, useMemo } from "react";
import {
  createBrowserRouter,
  LoaderFunctionArgs,
  RouterProvider,
} from "react-router-dom";
import { AdminRoute } from "../lib/Auth";
import { AppRoot } from "../pages/AppRoot";
import { QueryClient, useQueryClient } from "@tanstack/react-query";

import { RedirectIfLoggedIn } from "../lib/Redirect";
import "../global.css";
import { Navigate } from "react-router-dom";
import { HomeLayout } from "@/layouts/layout";
import QuizCreator from "@/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/create-quiz";
import { QuizSelection } from "@/pages/Quiz/Quiz-Selection";
import { QuizQuestionProvider } from "@/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/Quiz-questions-context";

// Lazy load components
const Home = lazy(() =>
  import("../pages/Home/Home").then((module) => ({ default: module.Home }))
);
const AboutUs = lazy(() =>
  import("../pages/AboutUs/AboutUs").then((module) => ({
    default: module.AboutUs,
  }))
);
const Login = lazy(() => import("../pages/UserRelated/Login/Login"));
const Signup = lazy(() => import("../pages/UserRelated/Signup/Signup"));
const createAppRouter = (queryClient: QueryClient) =>
  createBrowserRouter([
    {
      path: "/",
      element: (
        <>
          <HomeLayout headerColor={false} squares={true} children={<Home />} />
        </>
      ),
    },
    {
      path: "/about-us",
      element: (
        <>
          <HomeLayout children={<AboutUs />} />
        </>
      ),
    },
    {
      path: "/choose-quiz",
      element: (
        <>
          <HomeLayout children={<QuizSelection />} />
        </>
      ),
    },
    {
      path: "/signup",
      element: <RedirectIfLoggedIn component={<Signup />} />,
    },
    {
      path: "/login",
      element: <RedirectIfLoggedIn component={<Login />} />,
    },
    {
      path: "/dashboard/*",
      element: (
        <AdminRoute>
          <AppRoot />
        </AdminRoute>
      ),
      children: [
        {
          index: true,
          element: <Navigate to="/dashboard/questions" replace />,
        },
        {
          path: "application",
          lazy: async () => {
            const { Application } = await import(
              "../pages/Dashboard/Pages/Application/Application"
            );
            return { Component: Application };
          },
        },
        {
          path: "questions",
          lazy: async () => {
            const { Questions } = await import(
              "../pages/Dashboard/Pages/Question/Questions"
            );
            return { Component: Questions };
          },
        },
        // {
        //   path: "questions/:questionId",
        //   lazy: async () => {
        //     const { QuestionRoute } = await import(
        //       "../pages/Dashboard/Pages/Question/Question"
        //     );
        //     return { Component: QuestionRoute };
        //   },
        //   loader: async (args: LoaderFunctionArgs) => {
        //     const { questionLoader } = await import(
        //       "../pages/Dashboard/Pages/Question/Question"
        //     );
        //     return questionLoader(queryClient)(args);
        //   },
        // },
        {
          path: "quizzes",
          lazy: async () => {
            const { Quizzes } = await import(
              "../pages/Dashboard/Pages/Quiz/Quizzes"
            );
            return { Component: Quizzes };
          },
        },
        {
          path: "quizzes/create-quiz",
          element: (
            <QuizQuestionProvider>
              <QuizCreator />
            </QuizQuestionProvider>
          ),
        },
        {
          path: "quiz/:quizId",
          lazy: async () => {
            const { QuizRoute } = await import(
              "../pages/Dashboard/Pages/Quiz/Quiz"
            );
            return { Component: QuizRoute };
          },
          loader: async (args: LoaderFunctionArgs) => {
            const { quizLoader } = await import(
              "../pages/Dashboard/Pages/Quiz/Quiz"
            );
            return quizLoader(queryClient)(args);
          },
        },
        {
          path: "permissions",
          lazy: async () => {
            const { Permissions } = await import(
              "../pages/Dashboard/Pages/Permissions/Permissions"
            );
            return { Component: Permissions };
          },
        },
        {
          path: "users",
          lazy: async () => {
            const { Users } = await import(
              "../pages/Dashboard/Pages/User/Users"
            );
            return { Component: Users };
          },
          loader: async () => {
            const { usersLoader } = await import(
              "../pages/Dashboard/Pages/User/Users"
            );
            return usersLoader(queryClient);
          },
        },
        {
          path: "*",
          lazy: async () => {
            const { NotFoundRoute } = await import(
              "../pages/UtilityPages/NotFound/Not-Found"
            );
            return { Component: NotFoundRoute };
          },
        },
      ],
    },
    {
      path: "my-profile",
      lazy: async () => {
        const { ProfileWrapper } = await import(
          "../pages/UserRelated/Profile/ProfileWrapper"
        );
        return { Component: ProfileWrapper };
      },
    },
    {
      path: "*",
      lazy: async () => {
        const { NotFoundRoute } = await import(
          "../pages/UtilityPages/NotFound/Not-Found"
        );
        return { Component: NotFoundRoute };
      },
    },
  ]);

export function AppRouter() {
  const queryClient = useQueryClient();

  const router = useMemo(() => createAppRouter(queryClient), [queryClient]);

  return <RouterProvider router={router} />;
}
</file>

<file path="OxygenBackend/QuizAPI/DTOs/Quiz/QuizDTO.cs">
using QuizAPI.DTOs.Question;
using QuizAPI.DTOs.User;
using QuizAPI.ManyToManyTables;
using System.ComponentModel.DataAnnotations;

namespace QuizAPI.DTOs.Quiz
{
        public class QuizCM
        {
            [Required]
            [MaxLength(255)]
            public string Title { get; set; } = string.Empty;

            [MaxLength(1000)]
            public string? Description { get; set; }

            [Required]
            public int CategoryId { get; set; }

            [Required]
            public int LanguageId { get; set; }

            [Range(0, 2000)]
            public int? TimeLimitInSeconds { get; set; } = 0; //THIS IS THE OVERALL TIME LIMIT FOR THE QUIZ, NOT FOR EACH QUESTION

            public bool ShowFeedbackImmediately { get; set; } = false;
            public string Visibility { get; set; } = string.Empty;


            [Required]
            public int DifficultyId { get; set; }

            public bool ShuffleQuestions { get; set; } = false;

            public bool IsPublished { get; set; } = false;

            [Required]
            public ICollection<QuizQuestionCM> Questions { get; set; } = new List<QuizQuestionCM>();
        }

    public class QuizSummaryDTO
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string? Description{ get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty; 
        public string Difficulty { get; set; } = string.Empty; 
        public string Language { get; set; } = string.Empty;

        public string Visibility { get; set; } = string.Empty;
        public bool IsPublished { get; set; }
        public bool IsActive { get; set; }
        public DateTime CreatedAt { get; set; }
        public int QuestionCount { get; set; } 
        public string User { get; set; } = string.Empty; 

    }
    public class QuizDTO
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string? Description { get; set; }
       public UserBasicDTO User { get; set; }

       public CategoryDTO Category { get; set; } = new();

        public LanguageDTO Language { get; set; } = new();

        public DifficultyDTO Difficulty { get; set; } = new();

        public int TimeLimitInSeconds { get; set; }
        public bool ShowFeedbackImmediately { get; set; }

        public string Visibility { get; set; } = string.Empty;

        public bool ShuffleQuestions { get; set; }
        public bool IsPublished { get; set; }
        public bool IsActive { get; set; }
        public DateTime CreatedAt { get; set; }
        public int Version { get; set; }

        public int QuestionCount { get; set; }
        public List<QuizQuestionDTO> Questions { get; set; } = new List<QuizQuestionDTO>();
    }

    public class QuizUM
    {
        [Required] 
        public int Id { get; set; }

        [Required]
        [MaxLength(255)]
        public string Title { get; set; } = string.Empty;

        [MaxLength(1000)]
        public string? Description { get; set; }

        [Required]
        public int CategoryId { get; set; }

        [Required]
        public int LanguageId { get; set; }

        [Required]
        public int DifficultyId { get; set; }

        public string Visibility { get; set; } = string.Empty;


        public int? TimeLimitInSeconds { get; set; }
        public bool ShowFeedbackImmediately { get; set; }
        public bool ShuffleQuestions { get; set; }
        public bool IsPublished { get; set; }
        public bool IsActive { get; set; } 

        public ICollection<QuizQuestionUM> Questions { get; set; } = new List<QuizQuestionUM>();

        [Required]
        public int Version { get; set; }

    }

}
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/QuestionsTabContent.tsx">
import { useMultipleChoiceQuestionData } from "../api/Normal-Question/get-multiple-choice-questions";
import { useTrueFalseQuestionData } from "../api/True_False-Question/get-true_false-questions";
import { useTypeTheAnswerQuestionData } from "../api/Type_The_Answer-Question/get-type-the-answer-questions";
import { QuestionType } from "@/types/ApiTypes";

import { MultipleChoiceQuestionList } from "./Multiple_Choice_Question/multiple-choice-question-list";
import { TrueFalseQuestionList } from "../Components/True_Flase-Question/true-false-question-list";
import { TypeTheAnswerQuestionList } from "../Components/Type_The_Answer-Question/type-the-asnwer-list";
import { PaginationControls } from "./Re-Usable-Components/pagination-control";
import { Spinner } from "@/components/ui";
import { QuestionListComponent } from "../../Quiz/components/Create-Quiz-Form/components/question-select/select-common-question-list";

interface QueryParams {
  pageNumber: number;
  pageSize: number;
  searchTerm?: string;
  categoryId?: number;
  difficultyId?: number;
  languageId?: number;
}

interface QuestionTabContentProps {
  questionType: QuestionType;
  queryParams: QueryParams;
  onPageChange: (newPage: number) => void;
  page?: string;
}

export const QuestionTabContent = ({
  questionType,
  queryParams,
  onPageChange,
  page = "admin", // Default to "admin" if not provided
}: QuestionTabContentProps) => {
  // Keep all queries active but only fetch when needed
  const mcqQuery = useMultipleChoiceQuestionData({
    params: queryParams,
    queryConfig: {
      enabled: questionType === QuestionType.MultipleChoice,
    },
  });

  const trueFalseQuery = useTrueFalseQuestionData({
    params: queryParams,
    queryConfig: {
      enabled: questionType === QuestionType.TrueFalse,
    },
  });

  const typeAnswerQuery = useTypeTheAnswerQuestionData({
    params: queryParams,
    queryConfig: {
      enabled: questionType === QuestionType.TypeTheAnswer,
    },
  });

  // Get the relevant query based on question type
  const getActiveQuery = () => {
    switch (questionType) {
      case QuestionType.MultipleChoice:
        return mcqQuery;
      case QuestionType.TrueFalse:
        return trueFalseQuery;
      case QuestionType.TypeTheAnswer:
        return typeAnswerQuery;
      default:
        return mcqQuery;
    }
  };

  const activeQuery = getActiveQuery();

  if (activeQuery.isLoading) {
    return (
      <div className="flex justify-center items-center py-16">
        <Spinner size="lg" />
      </div>
    );
  }

  if (activeQuery.isError) {
    return (
      <p className="text-center text-red-500 py-8">
        Failed to load questions. Please try again later.
      </p>
    );
  }

  // Render the appropriate question list based on the type
  const renderQuestionList = () => {
    switch (questionType) {
      case QuestionType.MultipleChoice:
        return (
          <>
            {page == "user" ? (
              <QuestionListComponent questions={mcqQuery.data?.data || []} />
            ) : (
              <MultipleChoiceQuestionList
                questions={mcqQuery.data?.data || []}
              />
            )}
            <PaginationControls
              pagination={mcqQuery.data?.pagination}
              onPageChange={onPageChange}
            />
          </>
        );
      case QuestionType.TrueFalse:
        return (
          <>
            {page == "user" ? (
              <QuestionListComponent
                questions={trueFalseQuery.data?.data || []}
              />
            ) : (
              <TrueFalseQuestionList
                questions={trueFalseQuery.data?.data || []}
              />
            )}

            <PaginationControls
              pagination={trueFalseQuery.data?.pagination}
              onPageChange={onPageChange}
            />
          </>
        );
      case QuestionType.TypeTheAnswer:
        return (
          <>
            {page == "user" ? (
              <QuestionListComponent
                questions={typeAnswerQuery.data?.data || []}
              />
            ) : (
              <TypeTheAnswerQuestionList
                questions={typeAnswerQuery.data?.data || []}
              />
            )}
            <PaginationControls
              pagination={typeAnswerQuery.data?.pagination}
              onPageChange={onPageChange}
            />
          </>
        );
      default:
        return null;
    }
  };

  return <div>{renderQuestionList()}</div>;
};
</file>

<file path="OxygenBackend/QuizAPI/DTOs/Question/QuestionDTOs.cs">
using QuizAPI.DTOs.User;
using QuizAPI.Models;

namespace QuizAPI.DTOs.Question
{
    // CM = Create Model, for creating the question
    public class QuestionBaseDTO
    {
        public int Id { get; set; }
        public string Text { get; set; } = string.Empty;
        public DifficultyDTO Difficulty { get; set; }
        public CategoryDTO Category { get; set; }
        public LanguageDTO Language { get; set; }
        public UserBasicDTO User { get; set; }
        public DateTime CreatedAt { get; set; }
        public string? ImageUrl { get; set; }
        public string Visibility { get; set; }
        public string Type { get; set; }
    }

    public class MultipleChoiceQuestionDTO : QuestionBaseDTO
    {
        public List<AnswerOptionDTO> AnswerOptions { get; set; } = new List<AnswerOptionDTO>();
        public bool AllowMultipleSelections { get; set; }
    }

    public class TrueFalseQuestionDTO : QuestionBaseDTO
    {
        public bool CorrectAnswer { get; set; }
    }

    public class TypeTheAnswerQuestionDTO : QuestionBaseDTO
    {
        public string CorrectAnswer { get; set; } = string.Empty;
        public bool IsCaseSensitive { get; set; }
        public bool AllowPartialMatch { get; set; }
        public List<string> AcceptableAnswers { get; set; } = new List<string>();
    }

    // Creation Models (CMs)
    public class QuestionBaseCM
    {
        public string Text { get; set; } = string.Empty;

        public string? ImageUrl { get; set; }
        public int DifficultyId { get; set; }
        public int CategoryId { get; set; }
        public int LanguageId { get; set; }
        public string Visibility { get; set; } = "Global";
    }

    public class MultipleChoiceQuestionCM : QuestionBaseCM
    {
        public List<AnswerOptionCM> AnswerOptions { get; set; } = new List<AnswerOptionCM>();
        public bool AllowMultipleSelections { get; set; }
    }

    public class TrueFalseQuestionCM : QuestionBaseCM
    {
        public bool CorrectAnswer { get; set; }
    }

    public class TypeTheAnswerQuestionCM : QuestionBaseCM
    {
        public string CorrectAnswer { get; set; } = string.Empty;
        public bool IsCaseSensitive { get; set; }
        public bool AllowPartialMatch { get; set; }
        public List<string> AcceptableAnswers { get; set; } = new List<string>();
    }

    // Update Models (UMs)
    public class QuestionBaseUM
    {
        public int Id { get; set; }
        public string Text { get; set; } = string.Empty;
        public string? ImageUrl { get; set; }
        public int DifficultyId { get; set; }
        public int CategoryId { get; set; }
        public int LanguageId { get; set; }
        public string Visibility { get; set; }
    }

    public class MultipleChoiceQuestionUM : QuestionBaseUM
    {
        public List<AnswerOptionUM> AnswerOptions { get; set; } = new List<AnswerOptionUM>();
        public bool AllowMultipleSelections { get; set; }
    }

    public class TrueFalseQuestionUM : QuestionBaseUM
    {
        public bool CorrectAnswer { get; set; }
    }

    public class TypeTheAnswerQuestionUM : QuestionBaseUM
    {
        public string CorrectAnswer { get; set; } = string.Empty;
        public bool IsCaseSensitive { get; set; }
        public bool AllowPartialMatch { get; set; }
        public List<string> AcceptableAnswers { get; set; } = new List<string>();
    }
    public class CategoryDTO
    {
        public int Id { get; set; }

        public string Name { get; set; } = string.Empty;
    }

    public class DifficultyDTO
    {

       public int Id { get; set; }

        public string Level { get; set; } = string.Empty;

        public int Weight { get; set; }
    }

    public class LanguageDTO {
    
    public int Id { get; set; }
    public string Language { get; set; } = string.Empty;
    }


    public class IndividualQuestionDTO {
    
            public int ID { get; set; }

            public string Text { get; set; } = string.Empty;

            public int DifficultyId { get; set; }
            public string Difficulty { get; set; }

            public int CategoryId { get; set; }

            public string Category { get; set; }

            public int LanguageId { get; set; }

            public string Language { get; set; }

            public string Visibility  { get; set; }

            public Guid UserId { get; set; }

            public DateTime CreatedAt { get; set; }

            public UserBasicDTO User { get; set; }
            public List<AnswerOptionDTO> AnswerOptions { get; set; }

        }


    public class AnswerOptionCM
    {
        public string Text { get; set; } = string.Empty;
        public bool IsCorrect { get; set; }
    }

    public class AnswerOptionUM
    {
        public int? Id { get; set; }
        public string Text { get; set; } = string.Empty;
        public bool IsCorrect { get; set; }
    }

    public class AnswerOptionDTO
    {
        public int ID { get; set; }
        public string Text { get; set; } = string.Empty;
        public bool IsCorrect { get; set; }
    }

}
</file>

<file path="src/pages/Dashboard/Pages/Question/Components/Type_The_Answer-Question/create-type-the-answer-question.tsx">
import { Trash2 } from "lucide-react";
import React, { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Form, FormDrawer, Input, Label } from "@/components/ui/form";
import { useNotifications } from "@/common/Notifications";

import {
  QuestionCategory,
  QuestionDifficulty,
  QuestionLanguage,
} from "@/types/ApiTypes";
import { useFieldArray } from "react-hook-form";
import { Separator } from "@/components/ui/separator";
import { CategorySelect } from "../../Entities/Categories/Components/select-question-category";
import { DifficultySelect } from "../../Entities/Difficulty/Components/select-question-difficulty";
import { LanguageSelect } from "../../Entities/Language/components/select-question-language";
import {
  createTypeTheAnswerQuestionInputSchema,
  useCreateTypeTheAnswerQuestion,
} from "../../api/Type_The_Answer-Question/create-type-the-answer-question";
import {
  Switch,
  Tooltip,
  TooltipProvider,
  TooltipTrigger,
  TooltipContent,
} from "@/components/ui";
import { LiftedButton } from "@/common/LiftedButton";
import ImageUpload from "@/utils/Image-Upload";

interface CreateTypeAnswerQuestionFormProps {
  categories: QuestionCategory[];
  difficulties: QuestionDifficulty[];
  languages: QuestionLanguage[];
  onSuccess?: () => void;
  title?: string;
}

export const CreateTypeAnswerQuestionForm: React.FC<
  CreateTypeAnswerQuestionFormProps
> = ({ categories, difficulties, languages, onSuccess, title }) => {
  const { addNotification } = useNotifications();
  const [imageUrl, setImageUrl] = useState("");

  const createQuestionMutation = useCreateTypeTheAnswerQuestion({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Type Answer Question Created",
        });
        onSuccess?.();
      },
    },
  });

  return (
    <FormDrawer
      isDone={createQuestionMutation.isSuccess}
      triggerButton={
        <LiftedButton>{title ? title : "Type The Answer"}</LiftedButton>
      }
      title="Create a Type the Answer Question"
      submitButton={
        <Button
          form="create-type-answer-question"
          variant="addSave"
          className="rounded-sm text-white"
          type="submit"
          size="default"
          isPending={createQuestionMutation.isPending}
          disabled={createQuestionMutation.isPending}
        >
          Submit
        </Button>
      }
    >
      <Form
        id="create-type-answer-question"
        className="w-[500px]"
        onSubmit={(values) => {
          createQuestionMutation.mutate({
            data: values,
          });
        }}
        schema={createTypeTheAnswerQuestionInputSchema}
        options={{
          defaultValues: {
            text: "",
            difficultyId: undefined,
            categoryId: undefined,
            languageId: undefined,
            correctAnswer: "",
            isCaseSensitive: false,
            allowPartialMatch: false,
            acceptableAnswers: [],
            visibility: undefined,
            imageUrl: "",
          },
        }}
      >
        {({ register, formState, control, setValue, watch, clearErrors }) => {
          const { fields, append, remove } = useFieldArray({
            control,
            name: "acceptableAnswers",
          });

          useEffect(() => {
            if (imageUrl) {
              setValue("imageUrl", imageUrl);
            }
          }, [imageUrl, setValue]);

          const handleImageUpload = (url: string) => {
            setImageUrl(url);
            setValue("imageUrl", url);
          };
          const handleImageRemove = () => {
            setImageUrl("");
            setValue("imageUrl", "");
          };
          return (
            <>
              <Input
                label="Question"
                variant="quiz"
                id="questionText"
                className={`py-2 w-full ${
                  formState.errors["text"] ? "border-red-500" : ""
                }`}
                placeholder="Enter your question here..."
                error={formState.errors["text"]}
                registration={register("text")}
              />
              <ImageUpload
                onUpload={handleImageUpload}
                onRemove={handleImageRemove}
              />
              <input type="hidden" {...register("imageUrl")} />
              <div className="space-y-4 mt-4">
                <div className="flex flex-col ">
                  <Input
                    label="Correct Answer"
                    variant="isCorrect"
                    className={` ${
                      formState.errors["correctAnswer"] ? "border-red-500" : ""
                    }`}
                    placeholder="Enter the correct answer..."
                    error={formState.errors["correctAnswer"]}
                    registration={register("correctAnswer")}
                  />
                </div>
              </div>
              <Separator className="bg-gray-300 dark:bg-gray-600" />

              <div className="space-y-4 mt-4">
                <div className="flex items-center justify-between">
                  <Label className="block text-sm font-medium text-foreground">
                    Acceptable Answers
                  </Label>
                  <div className="flex space-x-2">
                    <LiftedButton
                      type="button"
                      className="text-[12px]"
                      onClick={() => append({ value: "" })}
                    >
                      + Add Answer
                    </LiftedButton>
                  </div>
                </div>
                <div className="space-y-3">
                  {fields.map((field, index) => (
                    <div
                      key={field.id}
                      className="flex items-center justify-between gap-4"
                    >
                      <Input
                        className={`${
                          formState.errors?.acceptableAnswers?.[index]
                            ? "border-red-500"
                            : ""
                        }`}
                        placeholder={`Alternative answer ${index + 1}...`}
                        error={
                          formState.errors?.acceptableAnswers?.[index]?.value
                        }
                        registration={register(
                          `acceptableAnswers.${index}.value`
                        )}
                      />
                      <Button
                        type="button"
                        variant="destructive"
                        size="sm"
                        className="rounded-xl"
                        onClick={() => remove(index)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>
                {formState.errors?.acceptableAnswers && (
                  <p className="text-sm text-red-500 font-semibold border border-red-500 p-2 text-center">
                    {formState.errors.acceptableAnswers.message}
                  </p>
                )}
              </div>

              <div className="space-y-4 mt-6">
                <Label
                  htmlFor="answerOptions"
                  className="block text-sm font-medium text-foreground"
                >
                  Answer Options
                </Label>
                <div className="flex items-center justify-between p-3 border rounded-md bg-muted dark:border-foreground/30 dark:bg-muted/20">
                  <TooltipProvider>
                    <div>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <div className="flex items-center space-x-2 cursor-default">
                            {" "}
                            <Switch
                              id="caseSensitive"
                              checked={watch("isCaseSensitive") === true}
                              onCheckedChange={(checked) =>
                                setValue("isCaseSensitive", checked)
                              }
                            />
                            <Label
                              htmlFor="caseSensitive"
                              className="text-sm text-gray-700 dark:text-gray-400"
                            >
                              Case Sensitive
                            </Label>
                          </div>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p className="bg-background p-2 rounded-md text-sm text-foreground border border-foreground dark:border-foreground/30 mb-2">
                            If DISABLED, "new york" will be accepted for "New
                            York"
                          </p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    <div>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <div className="flex items-center space-x-2 cursor-default">
                            <Switch
                              id="allowPartialMatch"
                              checked={!watch("allowPartialMatch") === true}
                              onCheckedChange={(checked) =>
                                setValue("allowPartialMatch", !checked)
                              }
                            />
                            <Label
                              htmlFor="allowPartialMatch"
                              className="text-sm text-gray-700 dark:text-gray-400"
                            >
                              Exact Match Required
                            </Label>
                          </div>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p className="bg-background p-2 rounded-md text-sm text-foreground border border-foreground dark:border-foreground/30 mb-2 mr-3">
                            If DISABLED, "New York" will be accepted for "New
                            York City"
                          </p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                  </TooltipProvider>
                </div>
                <section className="grid grid-cols-2 gap-4 border-t pt-4 dark:border-foreground/30">
                  <CategorySelect
                    // label="Category"
                    categories={categories}
                    value={watch("categoryId")?.toString() || ""}
                    onChange={(selectedValue: string) =>
                      setValue("categoryId", parseInt(selectedValue, 10))
                    }
                    includeAllOption={false}
                    error={formState.errors["categoryId"]?.message}
                    clearErrors={() => clearErrors("categoryId")}
                  />
                  <DifficultySelect
                    // label="Difficulty"
                    difficulties={difficulties}
                    value={watch("difficultyId")?.toString() || ""}
                    onChange={(selectedValue: string) =>
                      setValue("difficultyId", parseInt(selectedValue, 10))
                    }
                    includeAllOption={false}
                    error={formState.errors["difficultyId"]?.message}
                    clearErrors={() => clearErrors("difficultyId")}
                  />
                  <LanguageSelect
                    // label="Language"
                    languages={languages}
                    value={watch("languageId")?.toString() || ""}
                    includeAllOption={false}
                    onChange={(selectedValue: string) =>
                      setValue("languageId", parseInt(selectedValue, 10))
                    }
                    error={formState.errors["languageId"]?.message}
                    clearErrors={() => clearErrors("languageId")}
                  />
                </section>
              </div>
            </>
          );
        }}
      </Form>
    </FormDrawer>
  );
};

export default CreateTypeAnswerQuestionForm;
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/small-question-card.tsx">
import React from "react";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Tag,
  Trash2,
  Lock,
  Globe,
  CheckCircle,
  XCircle,
  Edit3,
  List,
} from "lucide-react";
import { cn } from "@/utils/cn";
import {
  AnyQuestion,
  MultipleChoiceQuestion,
  QuestionType,
  TrueFalseQuestion,
  TypeTheAnswerQuestion,
} from "@/types/ApiTypes";
import { useQuiz } from "../Quiz-questions-context";

interface ExistingQuestionCardProps {
  question: AnyQuestion;
  isActive?: boolean;
  onClick?: () => void;
  onRemove?: () => void;
}

// Helper functions
const truncateText = (text: string, length: number) =>
  text?.length > length ? `${text.substring(0, length)}...` : text || "";

// Multiple Choice Question Card
const SmallMultipleChoiceCard: React.FC<ExistingQuestionCardProps> = ({
  question,
  onRemove,
  isActive = false,
}) => {
  const { setDisplayQuestion, displayQuestion } = useQuiz();

  const mcQuestion = question as MultipleChoiceQuestion;
  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if ((e.target as HTMLElement).closest("button")) return;
    setDisplayQuestion(mcQuestion);
    // onClick();
  };

  const truncatedText = truncateText(mcQuestion.text, 50);
  const isPrivate = mcQuestion.visibility === "private";

  return (
    <Card
      className={cn(
        "font-header rounded-lg border border-primary/80 border-dashed p-0 mb-3 cursor-pointer transition-all duration-200 overflow-hidden shadow-sm hover:shadow-md hover:bg-muted/50",
        displayQuestion?.id === mcQuestion.id &&
          "bg-gradient-to-r from-background to-primary/20 "
      )}
      onClick={handleClick}
    >
      <CardHeader
        className={cn(
          "px-4 py-2 flex justify-between items-center",
          isActive
            ? "bg-primary/10"
            : "bg-gradient-to-r from-background to-muted",
          displayQuestion?.id === mcQuestion.id &&
            "bg-gradient-to-r from-background to-primary/20"
        )}
      >
        <div className="flex items-center gap-2">
          <div className="flex items-center justify-center w-6 h-6 rounded-full bg-blue-100 text-blue-600 font-bold text-xs">
            <List size={12} />
          </div>
          <Badge variant="outline" className="h-5 px-2 gap-1">
            {isPrivate ? <Lock size={10} /> : <Globe size={10} />}
            <span className="text-xs">{isPrivate ? "Private" : "Public"}</span>
          </Badge>
          <Badge
            variant="secondary"
            className="h-5 px-2 text-xs text-primary bg-primary/20"
          >
            Multiple Choice
          </Badge>
        </div>

        {onRemove && (
          <Button
            type="button"
            variant="ghost"
            size="icon"
            className="h-6 w-6 flex items-center justify-center rounded-full hover:bg-destructive/10 hover:text-red-500"
            onClick={onRemove}
            title="Remove question"
          >
            <Trash2 size={14} />
          </Button>
        )}
      </CardHeader>

      <CardContent className="p-3">
        <div className="mt-1 mb-3 border border-foreground/30 rounded-lg px-3 py-2 text-sm bg-background relative shadow-inner">
          <div className="absolute -top-2 left-3 w-4 h-4 bg-background border-t border-foreground/30 border-l rotate-45 transform"></div>
          {truncatedText || "Empty question"}
        </div>

        <div className="grid grid-cols-2 gap-2 mt-1 mb-3">
          {mcQuestion.answerOptions?.slice(0, 4).map((option, i) => (
            <div
              key={i}
              className={cn(
                "text-xs border rounded-md px-3 py-2 flex items-center transition-all duration-200",
                option.isCorrect
                  ? "border-green-500/30 bg-green-100 dark:bg-green-900/30 shadow-sm"
                  : "border-foreground/10 hover:border-foreground/20"
              )}
            >
              <div
                className={cn(
                  "w-3 h-3 rounded-full mr-2 border transition-all",
                  option.isCorrect
                    ? "bg-green-500 border-green-600"
                    : "border-muted-foreground/40"
                )}
              ></div>
              <span className="truncate">
                {truncateText(option.text, 20) || `Option ${i + 1}`}
              </span>
            </div>
          ))}
        </div>

        <div className="flex flex-wrap gap-2 items-center justify-between text-xs text-muted-foreground border-foreground/30 mt-2 border-t pt-2">
          <div className="flex items-center gap-2">
            {mcQuestion.allowMultipleSelections && (
              <Badge variant="outline" className="h-5 px-2 text-xs">
                Multi-select
              </Badge>
            )}
            <Badge
              variant="outline"
              className="flex items-center gap-1 px-2 py-0 h-5 text-xs"
            >
              <Tag size={10} />
              {mcQuestion.category.name}
            </Badge>
          </div>

          <Badge
            variant="outline"
            className={cn(
              "flex items-center gap-1 px-2 py-0 h-5 text-xs border "
            )}
          >
            <span>{question.difficulty.level}</span>
          </Badge>
        </div>
      </CardContent>
    </Card>
  );
};

// True/False Question Card
const SmallTrueFalseCard: React.FC<ExistingQuestionCardProps> = ({
  question,
  onRemove,
}) => {
  const tfQuestion = question as TrueFalseQuestion;
  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if ((e.target as HTMLElement).closest("button")) return;
    setDisplayQuestion(tfQuestion);
    // onClick();
  };

  const { setDisplayQuestion, displayQuestion } = useQuiz();

  const truncatedText = truncateText(tfQuestion.text, 50);
  const isPrivate = tfQuestion.visibility === "private";

  return (
    <Card
      className={cn(
        "font-header rounded-lg border border-purple-500 border-dashed p-0 mb-3 cursor-pointer transition-all duration-200 overflow-hidden shadow-sm hover:shadow-md hover:bg-muted/50",
        displayQuestion?.id === tfQuestion.id &&
          "bg-gradient-to-r from-background to-purple-500/30"
      )}
      onClick={handleClick}
    >
      <div
        className={cn(
          "px-4 py-2 flex justify-between items-center bg-gradient-to-r from-background to-muted",
          displayQuestion?.id === tfQuestion.id &&
            "bg-gradient-to-r from-background to-purple-500/30"
        )}
      >
        <div className="flex items-center gap-2">
          <div className="flex items-center justify-center w-6 h-6 rounded-full bg-purple-100 text-purple-600 font-bold text-xs">
            <CheckCircle size={12} />
          </div>
          <Badge variant="outline" className="h-5 px-2 gap-1">
            {isPrivate ? <Lock size={10} /> : <Globe size={10} />}
            <span className="text-xs">{isPrivate ? "Private" : "Public"}</span>
          </Badge>
          <Badge
            variant="secondary"
            className="h-5 px-2 text-xs bg-purple-100 text-purple-800"
          >
            True/False
          </Badge>
        </div>

        {onRemove && (
          <Button
            type="button"
            variant="ghost"
            size="icon"
            className="h-6 w-6 flex items-center justify-center rounded-full hover:bg-destructive/10 hover:text-red-500"
            onClick={onRemove}
            title="Remove question"
          >
            <Trash2 size={14} />
          </Button>
        )}
      </div>

      <CardContent className="p-3">
        <div className="mt-1 mb-3 border border-foreground/30 rounded-lg px-3 py-2 text-sm bg-background relative shadow-inner">
          <div className="absolute -top-2 left-3 w-4 h-4 bg-background border-t border-foreground/30 border-l rotate-45 transform"></div>
          {truncatedText || "Empty question"}
        </div>

        <div className="flex gap-2 mt-1 mb-3">
          <div
            className={cn(
              "text-sm border rounded-md px-4 py-3 flex items-center justify-center flex-1 transition-all duration-200",
              tfQuestion.correctAnswer
                ? "border-green-500/30 bg-green-100 dark:bg-green-900/30 shadow-sm"
                : "border-foreground/10"
            )}
          >
            <CheckCircle
              size={16}
              className={cn(
                "mr-2",
                tfQuestion.correctAnswer
                  ? "text-green-600"
                  : "text-muted-foreground"
              )}
            />
            <span className="font-medium">True</span>
          </div>
          <div
            className={cn(
              "text-sm border rounded-md px-4 py-3 flex items-center justify-center flex-1 transition-all duration-200",
              !tfQuestion.correctAnswer
                ? "border-green-500/30 bg-green-100 dark:bg-green-900/30 shadow-sm"
                : "border-foreground/10"
            )}
          >
            <XCircle
              size={16}
              className={cn(
                "mr-2",
                !tfQuestion.correctAnswer
                  ? "text-green-600"
                  : "text-muted-foreground"
              )}
            />
            <span className="font-medium">False</span>
          </div>
        </div>

        <div className="flex flex-wrap gap-2 items-center justify-between text-xs text-muted-foreground border-foreground/30 mt-2 border-t pt-2">
          <div className="flex items-center gap-2">
            <Badge
              variant="outline"
              className="flex items-center gap-1 px-2 py-0 h-5 text-xs"
            >
              <Tag size={10} />
              {tfQuestion.category.name}
            </Badge>
          </div>

          <Badge
            variant="outline"
            className={cn(
              "flex items-center gap-1 px-2 py-0 h-5 text-xs border"
            )}
          >
            <span>{question.difficulty.level}</span>
          </Badge>
        </div>
      </CardContent>
    </Card>
  );
};

// Type The Answer Question Card
const SmallTypeTheAnswerCard: React.FC<ExistingQuestionCardProps> = ({
  question,
  onRemove,
}) => {
  const { setDisplayQuestion, displayQuestion } = useQuiz();

  const ttaQuestion = question as TypeTheAnswerQuestion;
  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if ((e.target as HTMLElement).closest("button")) return;
    setDisplayQuestion(ttaQuestion);
  };

  const truncatedText = truncateText(ttaQuestion.text, 50);
  const isPrivate = ttaQuestion.visibility === "private";

  return (
    <Card
      className={cn(
        "font-header rounded-lg border border-orange-500 border-dashed p-0 mb-3 cursor-pointer transition-all duration-200 overflow-hidden shadow-sm hover:shadow-md hover:bg-muted/50",
        displayQuestion?.id === ttaQuestion.id &&
          "bg-gradient-to-r from-background to-orange-500/30"
      )}
      onClick={handleClick}
    >
      <div
        className={cn(
          "px-4 py-2 flex justify-between items-center bg-gradient-to-r from-background to-muted",
          displayQuestion?.id === ttaQuestion.id &&
            "bg-gradient-to-r from-background to-orange-500/30"
        )}
      >
        <div className="flex items-center gap-2">
          <div className="flex items-center justify-center w-6 h-6 rounded-full bg-orange-100 text-orange-600 font-bold text-xs">
            <Edit3 size={12} />
          </div>
          <Badge variant="outline" className="h-5 px-2 gap-1">
            {isPrivate ? <Lock size={10} /> : <Globe size={10} />}
            <span className="text-xs">{isPrivate ? "Private" : "Public"}</span>
          </Badge>
          <Badge
            variant="secondary"
            className="h-5 px-2 text-xs bg-orange-100 text-orange-800 hover:bg-orange-200"
          >
            Type Answer
          </Badge>
        </div>

        {onRemove && (
          <Button
            type="button"
            variant="ghost"
            size="icon"
            className="h-6 w-6 flex items-center justify-center rounded-full hover:bg-destructive/10 hover:text-red-500"
            onClick={onRemove}
            title="Remove question"
          >
            <Trash2 size={14} />
          </Button>
        )}
      </div>

      <CardContent className="p-3">
        <div className="mt-1 mb-3 border border-foreground/30 rounded-lg px-3 py-2 text-sm bg-background relative shadow-inner">
          <div className="absolute -top-2 left-3 w-4 h-4 bg-background border-t border-foreground/30 border-l rotate-45 transform"></div>
          {truncatedText || "Empty question"}
        </div>

        <div className="mt-1 mb-3">
          <div className="border-2 border-dashed border-green-300 bg-green-50 dark:bg-green-900/20 rounded-lg px-4 py-3 text-center">
            <div className="flex items-center justify-center gap-2 mb-1">
              <Edit3 size={14} className="text-green-600" />
              <span className="text-xs font-medium text-green-700 dark:text-green-400">
                Correct Answer
              </span>
            </div>
            <div className="text-sm font-mono bg-white dark:bg-gray-800 rounded px-2 py-1 border">
              {truncateText(ttaQuestion.correctAnswer, 30) || "Answer not set"}
            </div>
          </div>

          {ttaQuestion.acceptableAnswers &&
            ttaQuestion.acceptableAnswers.length > 0 && (
              <div className="mt-2 text-xs text-muted-foreground">
                <span className="font-medium">
                  + {ttaQuestion.acceptableAnswers.length} alternative answers
                </span>
              </div>
            )}
        </div>

        <div className="flex flex-wrap gap-2 items-center justify-between text-xs text-muted-foreground mt-2 border-t pt-2">
          <div className="flex items-center gap-2">
            <div className="flex gap-1">
              {ttaQuestion.isCaseSensitive && (
                <Badge variant="outline" className="h-5 px-1 text-xs">
                  Case
                </Badge>
              )}
              {ttaQuestion.allowPartialMatch && (
                <Badge variant="outline" className="h-5 px-1 text-xs">
                  Partial
                </Badge>
              )}
            </div>
            <Badge
              variant="outline"
              className="flex items-center gap-1 px-2 py-0 h-5 text-xs"
            >
              <Tag size={10} />
              {ttaQuestion.category.name}
            </Badge>
          </div>

          <Badge
            variant="outline"
            className={cn(
              "flex items-center gap-1 px-2 py-0 h-5 text-xs border"
            )}
          >
            <span>{question.difficulty.level}</span>
          </Badge>
        </div>
      </CardContent>
    </Card>
  );
};

// Main Question Card Component
export const SmallQuestionCard: React.FC<ExistingQuestionCardProps> = (
  props
) => {
  switch (props.question.type) {
    case QuestionType.MultipleChoice:
      return <SmallMultipleChoiceCard {...props} />;
    case QuestionType.TrueFalse:
      return <SmallTrueFalseCard {...props} />;
    case QuestionType.TypeTheAnswer:
      return <SmallTypeTheAnswerCard {...props} />;
    default:
      return null;
  }
};
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Questions/QuestionsController.cs">
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using QuizAPI.Data;
using QuizAPI.DTOs.Question;
using QuizAPI.DTOs.Shared;
using QuizAPI.DTOs.User;
using QuizAPI.Helpers;
using QuizAPI.Models;
using QuizAPI.Services;
using System.Security.Claims;
using QuizAPI.Controllers.Questions.Services;
using QuizAPI.Controllers.Questions.Services.AnswerOptions;
using System.Text.Json;

namespace QuizAPI.Controllers.Questions
{

    public static class HttpExtensions
    {
        public static void AddPaginationHeader(this HttpResponse response, int currentPage,
            int itemsPerPage, int totalItems, int totalPages, bool hasNextPage, bool hasPreviousPage)
        {
            var paginationHeader = new
            {
                currentPage,
                itemsPerPage,
                totalItems,
                totalPages,
                hasNextPage,
                hasPreviousPage
            };

            var options = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            };

            response.Headers.Append("Pagination", JsonSerializer.Serialize(paginationHeader, options));
            // To allow the client to access the header
            /*response.Headers.Add("Access-Control-Expose-Headers", "Pagination");*/ // REMOVED THIS BECAUSE IT IS REDUNDANT AND WE'RE ALREADY USING CORS
        }
    }

    [ApiController]
    [Route("api/[controller]")]
    public class QuestionsController : ControllerBase
    {
        private readonly IQuestionService _questionService;

        public QuestionsController(IQuestionService questionService)
        {
            _questionService = questionService;
        }

        // GET: api/questions
        [HttpGet]
        public async Task<ActionResult<List<QuestionBaseDTO>>> GetQuestions([FromQuery] QuestionFilterParams filterParams)
        {
            var pagedQuestions = await _questionService.GetPaginatedQuestionsAsync(filterParams);

            Response.AddPaginationHeader(
                 pagedQuestions.PageNumber,
                 pagedQuestions.PageSize,
                 pagedQuestions.TotalCount,
                 pagedQuestions.TotalPages,
                 pagedQuestions.HasNextPage,
                 pagedQuestions.HasPreviousPage
                 );

            return Ok(pagedQuestions.Items);
        }

        // GET: api/questions/5
        [HttpGet("{id}")]
        public async Task<ActionResult<QuestionBaseDTO>> GetQuestion(int id)
        {
            var question = await _questionService.GetQuestionByIdAsync(id);

            if (question == null)
            {
                return NotFound();
            }

            return Ok(question);
        }

        // GET: api/questions/multiplechoice
        [HttpGet("multiplechoice")]
        public async Task<ActionResult<List<MultipleChoiceQuestionDTO>>> GetMultipleChoiceQuestions([FromQuery] QuestionFilterParams filterParams)
        {
            var pagedQuestions = await _questionService.GetPaginatedMultipleChoiceQuestionsAsync(filterParams);

            Response.AddPaginationHeader(
                 pagedQuestions.PageNumber,
                 pagedQuestions.PageSize,
                 pagedQuestions.TotalCount,
                 pagedQuestions.TotalPages,
                 pagedQuestions.HasNextPage,
                 pagedQuestions.HasPreviousPage
                 );

            return Ok(pagedQuestions.Items);
        }

        // GET: api/questions/truefalse
        [HttpGet("trueFalse")]
        public async Task<ActionResult<List<TrueFalseQuestionDTO>>> GetTrueFalseQuestions([FromQuery] QuestionFilterParams filterParams)
        {
            var pagedQuestions = await _questionService.GetPaginatedTrueFalseQuestionsAsync(filterParams);

            Response.AddPaginationHeader(
                            pagedQuestions.PageNumber,
                            pagedQuestions.PageSize,
                            pagedQuestions.TotalCount,
                            pagedQuestions.TotalPages,
                            pagedQuestions.HasNextPage,
                            pagedQuestions.HasPreviousPage
                            );

            return Ok(pagedQuestions.Items);
        }

        // GET: api/questions/typeanswer
        [HttpGet("typeTheAnswer")]
        public async Task<ActionResult<List<TypeTheAnswerQuestionDTO>>> GetTypeTheAnswerQuestions([FromQuery] QuestionFilterParams filterParams)
        {
            var pagedQuestions = await _questionService.GetPaginatedTypeTheAnswerQuestionsAsync(filterParams);

            Response.AddPaginationHeader(
                pagedQuestions.PageNumber,
                pagedQuestions.PageSize,
                pagedQuestions.TotalCount,
                pagedQuestions.TotalPages,
                pagedQuestions.HasNextPage,
                pagedQuestions.HasPreviousPage
                );

            return Ok(pagedQuestions.Items);
        }

        // POST: api/questions/multiplechoice
        [HttpPost("multiplechoice")]
      /*  [Authorize]*/
        public async Task<ActionResult<MultipleChoiceQuestionDTO>> CreateMultipleChoiceQuestion(MultipleChoiceQuestionCM questionCM)
        {
            var userId = Guid.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));

            var createdQuestion = await _questionService.CreateMultipleChoiceQuestionAsync(questionCM, userId);

            return CreatedAtAction(
                nameof(GetQuestion),
                new { id = createdQuestion.Id },
                createdQuestion
            );
        }

        // POST: api/questions/truefalse
        [HttpPost("truefalse")]
        [Authorize]
        public async Task<ActionResult<TrueFalseQuestionDTO>> CreateTrueFalseQuestion(TrueFalseQuestionCM questionCM)
        {
            var userId = Guid.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));

            var createdQuestion = await _questionService.CreateTrueFalseQuestionAsync(questionCM, userId);

            return CreatedAtAction(
                nameof(GetQuestion),
                new { id = createdQuestion.Id },
                createdQuestion
            );
        }

        // POST: api/questions/typeanswer
        [HttpPost("typetheanswer")]
        [Authorize]
        public async Task<ActionResult<TypeTheAnswerQuestionDTO>> CreateTypeTheAnswerQuestion(TypeTheAnswerQuestionCM questionCM)
        {
            var userId = Guid.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));

            var createdQuestion = await _questionService.CreateTypeTheAnswerQuestionAsync(questionCM, userId);

            return CreatedAtAction(
                nameof(GetQuestion),
                new { id = createdQuestion.Id },
                createdQuestion
            );
        }

        // PUT: api/questions/multiplechoice
        [HttpPut("multiplechoice/{id}")]
        [Authorize]
        public async Task<IActionResult> UpdateMultipleChoiceQuestion(int id, [FromBody] MultipleChoiceQuestionUM questionUM)
        {
            if (id != questionUM.Id)
                return BadRequest("ID mismatch between URL and request body.");

            var userId = Guid.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
            var updatedQuestion = await _questionService.UpdateMultipleChoiceQuestionAsync(questionUM, userId);

            if (updatedQuestion == null)
                return NotFound();

            return NoContent();
        }

        // PUT: api/questions/truefalse
        [HttpPut("truefalse/{id}")]
        [Authorize]
        public async Task<IActionResult> UpdateTrueFalseQuestion(int id, [FromBody] TrueFalseQuestionUM questionUM)
        {
            if (id != questionUM.Id)
                return BadRequest("ID mismatch between URL and request body.");

            var userId = Guid.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
            var updatedQuestion = await _questionService.UpdateTrueFalseQuestionAsync(questionUM, userId);

            if (updatedQuestion == null)
            {
                return NotFound();
            }

            return NoContent();
        }

        // PUT: api/questions/typeanswer
        [HttpPut("typetheanswer/{id}")]
        [Authorize]
        public async Task<IActionResult> UpdateTypeTheAnswerQuestion(int id, [FromBody] TypeTheAnswerQuestionUM questionUM)
        {
            if (id != questionUM.Id)
                return BadRequest("ID mismatch between URL and request body.");


            var userId = Guid.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
            var updatedQuestion = await _questionService.UpdateTypeTheAnswerQuestionAsync(questionUM, userId);

            if (updatedQuestion == null)
            {
                return NotFound();
            }

            return NoContent();
        }

        // DELETE: api/questions/5
        [HttpDelete("{id}")]
        [Authorize]
        public async Task<IActionResult> DeleteQuestion(int id)
        {
            var userId = Guid.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));

            var result = await _questionService.DeleteQuestionAsync(id, userId);

            if (!result)
            {
                return NotFound();
            }

            return NoContent();
        }

        // GET: api/questions/category/5
        [HttpGet("category/{categoryId}")]
        public async Task<ActionResult<IEnumerable<QuestionBaseDTO>>> GetQuestionsByCategory(int categoryId)
        {
            var questions = await _questionService.GetQuestionsByCategoryAsync(categoryId);
            return Ok(questions);
        }

        // GET: api/questions/difficulty/5
        [HttpGet("difficulty/{difficultyId}")]
        public async Task<ActionResult<IEnumerable<QuestionBaseDTO>>> GetQuestionsByDifficulty(int difficultyId)
        {
            var questions = await _questionService.GetQuestionsByDifficultyAsync(difficultyId);
            return Ok(questions);
        }

        // GET: api/questions/user
        [HttpGet("user")]
        [Authorize]
        public async Task<ActionResult<IEnumerable<QuestionBaseDTO>>> GetMyQuestions()
        {
            var userId = Guid.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
            var questions = await _questionService.GetQuestionsByUserAsync(userId);
            return Ok(questions);
        }

        [Authorize]
        [HttpGet("myQuestions")]
        public async Task<ActionResult<List<QuestionBaseDTO>>> GetMyQuestions([FromQuery] QuestionFilterParams filterParams)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
                return Unauthorized();

            filterParams.UserId = Guid.Parse(userId);

            var pagedQuestions = await _questionService.GetPaginatedQuestionsAsync(filterParams);

            Response.AddPaginationHeader(
                 pagedQuestions.PageNumber,
                 pagedQuestions.PageSize,
                 pagedQuestions.TotalCount,
                 pagedQuestions.TotalPages,
                 pagedQuestions.HasNextPage,
                 pagedQuestions.HasPreviousPage
                 );

            return Ok(pagedQuestions.Items);
        }
    }
}
</file>

<file path="OxygenBackend/QuizAPI/Controllers/Questions/Services/QuestionService.cs">
using Microsoft.EntityFrameworkCore;
using QuizAPI.Data;
using QuizAPI.DTOs.Question;
using QuizAPI.Models;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using QuizAPI.Controllers.Questions.Services.AnswerOptions;
using QuizAPI.Controllers.Image.Services;

namespace QuizAPI.Controllers.Questions.Services
{
    public class QuestionService : IQuestionService
    {
        private readonly ApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IAnswerOptionService _answerOptionService;
        private readonly IImageService _imageService;

        public QuestionService(ApplicationDbContext context, IMapper mapper, IAnswerOptionService answerOptionService, IImageService imageService)
        {
            _context = context;
            _mapper = mapper;
            _answerOptionService = answerOptionService;
            _imageService = imageService;
        }

        public async Task<List<QuestionBaseDTO>> GetAllQuestionsAsync(string visibility = null)
        {
            IQueryable<QuestionBase> query = _context.Questions
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User);

            if (!string.IsNullOrEmpty(visibility))
            {
                QuestionVisibility visibilityEnum;
                if (Enum.TryParse(visibility, true, out visibilityEnum))
                {
                    query = query.Where(q => q.Visibility == visibilityEnum);
                }
            }

            var questions = await query.ToListAsync();
            return _mapper.Map<List<QuestionBaseDTO>>(questions);
        }

        public async Task<PagedList<QuestionBaseDTO>> GetPaginatedQuestionsAsync(QuestionFilterParams filterParams)
        {
            IQueryable<QuestionBase> query = _context.Questions
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User);

            // Apply filters
            query = ApplyFilters(query, filterParams);

            // Map to DTOs before pagination for better performance
            var projectedQuery = query.ProjectTo<QuestionBaseDTO>(_mapper.ConfigurationProvider);

            // Create and return the paged list
            return await PagedList<QuestionBaseDTO>.CreateAsync(
                projectedQuery,
                filterParams.PageNumber,
                filterParams.PageSize);
        }

        public async Task<QuestionBaseDTO> GetQuestionByIdAsync(int id)
        {
            var question = await _context.Questions
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User)
                .FirstOrDefaultAsync(q => q.Id == id);

            if (question == null)
                return null;

            // Map to the correct DTO type based on question type
            switch (question.Type)
            {
                case QuestionType.MultipleChoice:
                    var mcQuestion = await _context.MultipleChoiceQuestions
                        .Include(q => q.AnswerOptions)
                        .FirstOrDefaultAsync(q => q.Id == id);
                    return _mapper.Map<MultipleChoiceQuestionDTO>(mcQuestion);

                case QuestionType.TrueFalse:
                    var tfQuestion = await _context.TrueFalseQuestions
                        .FirstOrDefaultAsync(q => q.Id == id);
                    return _mapper.Map<TrueFalseQuestionDTO>(tfQuestion);

                case QuestionType.TypeTheAnswer:
                    var taQuestion = await _context.TypeTheAnswerQuestions
                        .FirstOrDefaultAsync(q => q.Id == id);
                    return _mapper.Map<TypeTheAnswerQuestionDTO>(taQuestion);

                default:
                    return _mapper.Map<QuestionBaseDTO>(question);
            }
        }

        public async Task<List<MultipleChoiceQuestionDTO>> GetMultipleChoiceQuestionsAsync()
        {
            var questions = await _context.MultipleChoiceQuestions
                .Include(q => q.AnswerOptions)
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User)
                .ToListAsync();

            return _mapper.Map<List<MultipleChoiceQuestionDTO>>(questions);
        }

/*NEW PAGINATED METHOD*/
        public async Task<PagedList<MultipleChoiceQuestionDTO>> GetPaginatedMultipleChoiceQuestionsAsync(QuestionFilterParams filterParams)
        {
            IQueryable<MultipleChoiceQuestion> query = _context.MultipleChoiceQuestions
                .Include(q => q.AnswerOptions)
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User);

            // Apply common filters
            query = ApplyFilters(query, filterParams);

            // Map to DTOs
            var projectedQuery = query.ProjectTo<MultipleChoiceQuestionDTO>(_mapper.ConfigurationProvider);

            return await PagedList<MultipleChoiceQuestionDTO>.CreateAsync(
                projectedQuery,
                filterParams.PageNumber,
                filterParams.PageSize);
        }

        public async Task<List<TrueFalseQuestionDTO>> GetTrueFalseQuestionsAsync()
        {
            var questions = await _context.TrueFalseQuestions
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User)
                .ToListAsync();

            return _mapper.Map<List<TrueFalseQuestionDTO>>(questions);
        }

        /*NEW PAGINATED METHOD*/

        public async Task<PagedList<TrueFalseQuestionDTO>> GetPaginatedTrueFalseQuestionsAsync(QuestionFilterParams filterParams)
        {
            IQueryable<TrueFalseQuestion> query = _context.TrueFalseQuestions
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User);

            // Apply common filters
            query = ApplyFilters(query, filterParams);

            // Map to DTOs
            var projectedQuery = query.ProjectTo<TrueFalseQuestionDTO>(_mapper.ConfigurationProvider);

            return await PagedList<TrueFalseQuestionDTO>.CreateAsync(
                projectedQuery,
                filterParams.PageNumber,
                filterParams.PageSize);
        }

        public async Task<List<TypeTheAnswerQuestionDTO>> GetTypeTheAnswerQuestionsAsync()
        {
            var questions = await _context.TypeTheAnswerQuestions
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User)
                .ToListAsync();

            return _mapper.Map<List<TypeTheAnswerQuestionDTO>>(questions);
        }
        /*NEW PAGINATED METHOD*/

        public async Task<PagedList<TypeTheAnswerQuestionDTO>> GetPaginatedTypeTheAnswerQuestionsAsync(QuestionFilterParams filterParams)
        {
            IQueryable<TypeTheAnswerQuestion> query = _context.TypeTheAnswerQuestions
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User);

            // Apply common filters
            query = ApplyFilters(query, filterParams);

            // Map to DTOs
            var projectedQuery = query.ProjectTo<TypeTheAnswerQuestionDTO>(_mapper.ConfigurationProvider);

            return await PagedList<TypeTheAnswerQuestionDTO>.CreateAsync(
                projectedQuery,
                filterParams.PageNumber,
                filterParams.PageSize);
        }

        public async Task<MultipleChoiceQuestionDTO> CreateMultipleChoiceQuestionAsync(MultipleChoiceQuestionCM questionCM, Guid userId)
        {
            // Create the question entity from CM
            var question = _mapper.Map<MultipleChoiceQuestion>(questionCM);

            foreach (var answerOption in question.AnswerOptions)
            {
                answerOption.Question = question;
            }

            // Set additional properties
            question.UserId = userId;
            question.CreatedAt = DateTime.UtcNow;
            question.Type = QuestionType.MultipleChoice;

            // Parse visibility
            if (Enum.TryParse(questionCM.Visibility, true, out QuestionVisibility visibility))
            {
                question.Visibility = visibility;
            }
            else
            {
                question.Visibility = QuestionVisibility.Global;
            }

            _context.MultipleChoiceQuestions.Add(question);
            await _context.SaveChangesAsync();

            if (!string.IsNullOrEmpty(questionCM.ImageUrl))
            {
                await _imageService.AssociateImageWithEntityAsync(
                    questionCM.ImageUrl, "Question", question.Id);
            }

            // Fetch the complete entity with relations for DTO mapping
            var createdQuestion = await _context.MultipleChoiceQuestions
                .Include(q => q.AnswerOptions)
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User)
                .FirstOrDefaultAsync(q => q.Id == question.Id);

            return _mapper.Map<MultipleChoiceQuestionDTO>(createdQuestion);
        }

        public async Task<TrueFalseQuestionDTO> CreateTrueFalseQuestionAsync(TrueFalseQuestionCM questionCM, Guid userId)
        {
            var question = _mapper.Map<TrueFalseQuestion>(questionCM);

            question.UserId = userId;
            question.CreatedAt = DateTime.UtcNow;
            question.Type = QuestionType.TrueFalse;

            if (Enum.TryParse(questionCM.Visibility, true, out QuestionVisibility visibility))
            {
                question.Visibility = visibility;
            }
            else
            {
                question.Visibility = QuestionVisibility.Global;
            }

            _context.TrueFalseQuestions.Add(question);
            await _context.SaveChangesAsync();


            if (!string.IsNullOrEmpty(questionCM.ImageUrl))
            {
                await _imageService.AssociateImageWithEntityAsync(
                    questionCM.ImageUrl, "Question", question.Id);
            }

            var createdQuestion = await _context.TrueFalseQuestions
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User)
                .FirstOrDefaultAsync(q => q.Id == question.Id);

            return _mapper.Map<TrueFalseQuestionDTO>(createdQuestion);
        }

        public async Task<TypeTheAnswerQuestionDTO> CreateTypeTheAnswerQuestionAsync(TypeTheAnswerQuestionCM questionCM, Guid userId)
        {
            var question = _mapper.Map<TypeTheAnswerQuestion>(questionCM);

            question.UserId = userId;
            question.CreatedAt = DateTime.UtcNow;
            question.Type = QuestionType.TypeTheAnswer;

            if (Enum.TryParse(questionCM.Visibility, true, out QuestionVisibility visibility))
            {
                question.Visibility = visibility;
            }
            else
            {
                question.Visibility = QuestionVisibility.Global;
            }


            _context.TypeTheAnswerQuestions.Add(question);
            await _context.SaveChangesAsync();


            if (!string.IsNullOrEmpty(questionCM.ImageUrl))
            {
                await _imageService.AssociateImageWithEntityAsync(
                    questionCM.ImageUrl, "Question", question.Id);
            }

            var createdQuestion = await _context.TypeTheAnswerQuestions
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User)
                .FirstOrDefaultAsync(q => q.Id == question.Id);

            return _mapper.Map<TypeTheAnswerQuestionDTO>(createdQuestion);
        }

        public async Task<MultipleChoiceQuestionDTO> UpdateMultipleChoiceQuestionAsync(
    MultipleChoiceQuestionUM questionUM,
    Guid userId)
        {
            // Permission & load
            var userRole = await GetUserRoleAsync(userId);
            bool isSuperAdmin = userRole == "superadmin";
            var query = _context.MultipleChoiceQuestions
                .Include(q => q.AnswerOptions)
                .Where(q => q.Id == questionUM.Id);
            if (!isSuperAdmin) query = query.Where(q => q.UserId == userId);

            var existingQuestion = await query.FirstOrDefaultAsync();
            if (existingQuestion == null) return null;

            // Map fields
            _mapper.Map(questionUM, existingQuestion);
            if (Enum.TryParse(questionUM.Visibility, true, out QuestionVisibility vis))
                existingQuestion.Visibility = vis;

            // Delegate options sync
            await _answerOptionService.SyncAnswerOptionsAsync(existingQuestion, questionUM.AnswerOptions);

            if (!string.IsNullOrEmpty(questionUM.ImageUrl))
            {
                await _imageService.AssociateImageWithEntityAsync(
                    questionUM.ImageUrl, "Question", existingQuestion.Id);
            }

            // Persist
            await _context.SaveChangesAsync();

            // Reload & return DTO
            var updated = await _context.MultipleChoiceQuestions
                .Include(q => q.AnswerOptions)
                .Include(q => q.Category)
                .Include(q => q.Difficulty)
                .Include(q => q.Language)
                .Include(q => q.User)
                .FirstOrDefaultAsync(q => q.Id == existingQuestion.Id);

            return _mapper.Map<MultipleChoiceQuestionDTO>(updated);
        }

        public async Task<TrueFalseQuestionDTO> UpdateTrueFalseQuestionAsync(
    TrueFalseQuestionUM questionUM, Guid userId)
        {
            var userRole = await GetUserRoleAsync(userId);
            bool isSuperAdmin = userRole == "superadmin";

            var query = _context.TrueFalseQuestions
                .Where(q => q.Id == questionUM.Id);

            if (!isSuperAdmin)
                query = query.Where(q => q.UserId == userId);

            var existingQuestion = await query.FirstOrDefaultAsync();

            if (existingQuestion == null)
                return null;

            _mapper.Map(questionUM, existingQuestion);

            if (Enum.TryParse(questionUM.Visibility, true, out QuestionVisibility visibility))
            {
                existingQuestion.Visibility = visibility;
            }

            if (!string.IsNullOrEmpty(questionUM.ImageUrl))
            {
                await _imageService.AssociateImageWithEntityAsync(
                    questionUM.ImageUrl, "Question", existingQuestion.Id);
            }

            await _context.SaveChangesAsync();

            var updatedQuestion = await _context.TrueFalseQuestions
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User)
                .FirstOrDefaultAsync(q => q.Id == existingQuestion.Id);

            return _mapper.Map<TrueFalseQuestionDTO>(updatedQuestion);
        }

        public async Task<TypeTheAnswerQuestionDTO> UpdateTypeTheAnswerQuestionAsync(
     TypeTheAnswerQuestionUM questionUM, Guid userId)
        {
            var userRole = await GetUserRoleAsync(userId);
            bool isSuperAdmin = userRole == "superadmin";

            var query = _context.TypeTheAnswerQuestions
                .Where(q => q.Id == questionUM.Id);

            if (!isSuperAdmin)
                query = query.Where(q => q.UserId == userId);

            var existingQuestion = await query.FirstOrDefaultAsync();

            if (existingQuestion == null)
                return null;

            _mapper.Map(questionUM, existingQuestion);

            if (Enum.TryParse(questionUM.Visibility, true, out QuestionVisibility visibility))
            {
                existingQuestion.Visibility = visibility;
            }

            if (!string.IsNullOrEmpty(questionUM.ImageUrl))
            {
                await _imageService.AssociateImageWithEntityAsync(
                    questionUM.ImageUrl, "Question", existingQuestion.Id);
            }

            await _context.SaveChangesAsync();

            var updatedQuestion = await _context.TypeTheAnswerQuestions
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User)
                .FirstOrDefaultAsync(q => q.Id == existingQuestion.Id);

            return _mapper.Map<TypeTheAnswerQuestionDTO>(updatedQuestion);
        }

        public async Task<bool> DeleteQuestionAsync(int id, Guid userId)
        {
            var question = await _context.Questions
                .FirstOrDefaultAsync(q => q.Id == id && q.UserId == userId);

            if (question == null)
                return false;

            if (!string.IsNullOrEmpty(question.ImageUrl))
            {
                await _imageService.DeleteAssociatedImageAsync(question.ImageUrl, "Question", question.Id);
            }

            _context.Questions.Remove(question);
            await _context.SaveChangesAsync();
            return true;
        }

        public async Task<List<QuestionBaseDTO>> GetQuestionsByCategoryAsync(int categoryId)
        {
            var questions = await _context.Questions
                .Where(q => q.CategoryId == categoryId)
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User)
                .ToListAsync();

            return _mapper.Map<List<QuestionBaseDTO>>(questions);
        }

        public async Task<List<QuestionBaseDTO>> GetQuestionsByDifficultyAsync(int difficultyId)
        {
            var questions = await _context.Questions
                .Where(q => q.DifficultyId == difficultyId)
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User)
                .ToListAsync();

            return _mapper.Map<List<QuestionBaseDTO>>(questions);
        }

        public async Task<List<QuestionBaseDTO>> GetQuestionsByUserAsync(Guid userId)
        {
            var questions = await _context.Questions
                .Where(q => q.UserId == userId)
                .Include(q => q.Difficulty)
                .Include(q => q.Category)
                .Include(q => q.Language)
                .Include(q => q.User)
                .ToListAsync();

            return _mapper.Map<List<QuestionBaseDTO>>(questions);
        }

        private static IQueryable<T> ApplyFilters<T>(IQueryable<T> query, QuestionFilterParams filterParams) where T : QuestionBase
        {
            if (!string.IsNullOrEmpty(filterParams.SearchTerm))
            {
                var searchTerm = filterParams.SearchTerm.ToLower();
                query = query.Where(q => q.Text.ToLower().Contains(searchTerm));
            }

            if (filterParams.CategoryId.HasValue)
            {
                query = query.Where(q => q.CategoryId == filterParams.CategoryId.Value);
            }

            if (filterParams.DifficultyId.HasValue)
            {
                query = query.Where(q => q.DifficultyId == filterParams.DifficultyId.Value);
            }

            if (filterParams.LanguageId.HasValue)
            {
                query = query.Where(q => q.LanguageId == filterParams.LanguageId.Value);
            }

            if (!string.IsNullOrEmpty(filterParams.Visibility))
            {
                if (Enum.TryParse(filterParams.Visibility, true, out QuestionVisibility visibilityEnum))
                {
                    query = query.Where(q => q.Visibility == visibilityEnum);
                }
            }

            if (filterParams.Type.HasValue)
            {
                query = query.Where(q => q.Type == filterParams.Type.Value);
            }

            if (filterParams.UserId.HasValue)
            {
                query = query.Where(q => q.UserId == filterParams.UserId.Value);
            }

            return query;
        }

        public async Task<string?> GetUserRoleAsync(Guid userId)
        {
            if (_context.Users == null)
            {
                return null;
            }

            var user = await _context.Users
                .FirstOrDefaultAsync(u => u.Id == userId);

            if (user == null)
            {
                return null;
            }

            return MapRoleIdToRole(user.RoleId);
        }


        ///REMOVE THESE TOO AFTER THE USERS SERVICE IS CREATED
        private static string MapRoleIdToRole(int roleId)
        {
            return roleId switch
            {
                1 => "admin",
                2 => "user",
                3 => "superadmin",
                _ => "user"
            };
        }

        private static int MapRoleToRoleId(string role)
        {
            return role.ToLower() switch
            {
                "admin" => 1,
                "user" => 2,
                "superadmin" => 3,
                _ => 2 // default to user if role is unknown
            };
        }
    }
}
</file>

<file path="src/components/ui/form/input.tsx">
import * as React from "react";
import type { UseFormRegisterReturn } from "react-hook-form";

import { cn } from "@/utils/cn";

import {
  FieldWrapper,
  type FieldWrapperPassThroughProps,
} from "./field-wrapper";

export type InputProps = React.InputHTMLAttributes<HTMLInputElement> &
  FieldWrapperPassThroughProps & {
    className?: string;
    registration?: Partial<UseFormRegisterReturn>;
    variant?:
      | "default"
      | "quiz"
      | "isCorrect"
      | "isIncorrect"
      | "display"
      | "fullColor";
    questionType?: "multiple-choice" | "type-answer" | "true-false";
  };

const variantStyles: Record<NonNullable<InputProps["variant"]>, string> = {
  default: "",
  quiz: "bg-gradient-to-r from-primary/10 to-primary/5 border-2 dark:border-primary/60 border-primary/60 text-foreground font-medium rounded-xl h-12 shadow-[0_4px_0_0_hsl(var(--primary)/0.7)] hover:shadow-[0_2px_0_0_hsl(var(--primary)/0.5)] hover:translate-y-1 active:translate-y-2 active:shadow-none transform transition-all duration-200 focus-visible:ring-primary focus-visible:ring-offset-background dark:bg-gradient-to-r dark:from-primary/30 dark:to-primary/10 placeholder:text-center placeholder:text-lg focus:placeholder:opacity-0 text-center text-lg sm:text-xl md:text-xl px-4 py-2",
  fullColor:
    "bg-primary text-white !placeholder-gray-300 font-semibold rounded-xl h-12 shadow-[0_4px_0_0_hsl(var(--primary)/0.5)] hover:shadow-[0_2px_0_0_hsl(var(--primary)/0.5)] hover:translate-y-1 active:translate-y-2 active:shadow-none transform transition-all duration-200 focus-visible:ring-primary focus:placeholder:opacity-0 focus-visible:ring-offset-background px-4 py-2 text-center text-lg sm:text-xl md:text-xl",
  isCorrect:
    "bg-gradient-to-r from-green-500/10 to-green-500/5 border-2 border-green-500 text-foreground font-medium rounded-xl h-12 shadow-[0_4px_0_0_rgba(0,200,80,0.7)] dark:shadow-[0_4px_0_0_rgba(0,200,80,0.5)] hover:shadow-[0_2px_0_0_hsl(var(--green-500)/0.5)] hover:translate-y-1 active:translate-y-2 active:shadow-none transform transition-all duration-200 focus-visible:ring-green-500 focus-visible:ring-offset-background dark:bg-gradient-to-r dark:from-green-500/40 dark:to-green-500/10 placeholder:text-center placeholder:text-lg focus:placeholder:opacity-0 text-center text-lg sm:text-xl md:text-xl px-4 py-2",
  isIncorrect:
    "bg-gradient-to-r from-red-500/10 to-red-500/5 border-2 border-red-500/30 text-foreground font-medium rounded-xl h-12 shadow-[0_4px_0_0_rgba(220,38,38,0.5)] hover:shadow-[0_2px_0_0_rgba(220,38,38,0.5)] hover:translate-y-1 active:translate-y-2 active:shadow-none transform transition-all duration-200 focus-visible:ring-red-500/50 focus-visible:ring-offset-background dark:bg-gradient-to-r dark:from-red-500/20 dark:to-red-500/10 placeholder:text-center placeholder:text-lg focus:placeholder:opacity-0 text-center text-lg sm:text-xl md:text-xl px-4 py-2",
  display:
    "bg-gradient-to-r from-primary/10 to-primary/5 border-2 border-primary/40 dark:border-primary/80 text-foreground font-medium rounded-xl h-12 shadow-[0_4px_0_0_hsl(var(--primary)/0.7)] dark:bg-gradient-to-r dark:from-primary/40 dark:to-primary/10 text-center text-lg sm:text-xl md:text-xl px-4 py-4 cursor-default",
};

// Question type color overrides for quiz and display variants
const questionTypeColors = {
  "type-answer": {
    // Orange theme
    quiz: "bg-gradient-to-r from-orange-500/10 to-orange-500/5 border-2 border-orange-500/30 shadow-[0_4px_0_0_rgba(249,115,22,0.7)] hover:shadow-[0_2px_0_0_rgba(249,115,22,0.5)] focus-visible:ring-orange-500 dark:from-orange-500/30 dark:to-orange-500/10",
    display:
      "bg-gradient-to-r from-orange-500/10 to-orange-500/5 border-2 border-orange-500/40 dark:border-orange-500/80 shadow-[0_4px_0_0_rgba(249,115,22,0.7)] dark:from-orange-500/40 dark:to-orange-500/10",
  },
  "true-false": {
    // Purple theme
    quiz: "bg-gradient-to-r from-purple-500/10 to-purple-500/5 border-2 border-purple-500/30 shadow-[0_4px_0_0_rgba(168,85,247,0.7)] hover:shadow-[0_2px_0_0_rgba(168,85,247,0.5)] focus-visible:ring-purple-500 dark:from-purple-500/30 dark:to-purple-500/10",
    display:
      "bg-gradient-to-r from-purple-500/10 to-purple-500/5 border-2 border-purple-500/40 dark:border-purple-500/80 shadow-[0_4px_0_0_rgba(168,85,247,0.7)] dark:from-purple-500/40 dark:to-purple-500/10",
  },
};

const getVariantStyles = (
  variant: NonNullable<InputProps["variant"]>,
  questionType?: InputProps["questionType"]
): string => {
  const baseStyle = variantStyles[variant];

  // Only apply question type colors for quiz and display variants
  if (
    (variant === "quiz" || variant === "display") &&
    questionType &&
    questionType !== "multiple-choice"
  ) {
    const colorOverride = questionTypeColors[questionType]?.[variant];
    if (colorOverride) {
      // Replace the color-related classes while keeping other styling
      const baseWithoutColors = baseStyle
        .replace(/bg-gradient-to-r from-primary\/\d+ to-primary\/\d+/g, "")
        .replace(/border-\d+ border-primary\/\d+/g, "")
        .replace(/shadow-\[[^\]]+\]/g, "")
        .replace(/hover:shadow-\[[^\]]+\]/g, "")
        .replace(/focus-visible:ring-primary/g, "")
        .replace(/dark:border-primary\/\d+/g, "")
        .replace(/dark:from-primary\/\d+ dark:to-primary\/\d+/g, "")
        .replace(/\s+/g, " ")
        .trim();

      return `${baseWithoutColors} ${colorOverride}`;
    }
  }

  return baseStyle;
};

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  (
    {
      className,
      type,
      label,
      error,
      registration,
      variant = "default",
      questionType,
      ...props
    },
    ref
  ) => {
    const baseClasses =
      "flex h-9 w-full rounded-md bg-background px-3 py-1 text-sm shadow-md border dark:border-foreground/40 transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50";

    return (
      <FieldWrapper label={label} error={error}>
        <input
          type={type}
          className={cn(
            baseClasses,
            getVariantStyles(variant, questionType),
            className
          )}
          ref={ref}
          {...props}
          {...(variant === "display" ? { readOnly: true, tabIndex: -1 } : {})}
          {...registration}
        />
      </FieldWrapper>
    );
  }
);
Input.displayName = "Input";

export { Input };
</file>

<file path="OxygenBackend/QuizAPI/Data/Migrations/ApplicationDbContextModelSnapshot.cs">
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("OrderInQuiz")
                        .HasColumnType("int");

                    b.Property<int>("PointSystem")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpdatedAtId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpdatedAtId");

                    b.HasIndex("UpdatedAtId");

                    b.ToTable("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversitetiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversitetiId");

                    b.ToTable("Drejtimet");
                });

            modelBuilder.Entity("QuizAPI.Models.ImageAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ImageAssets");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionLanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowFeedbackImmediately")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredCorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesAnsweredIncorrectly")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsedInQuizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionStatistics");
                });

            modelBuilder.Entity("QuizAPI.Models.Universiteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universitetet");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmutableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("AllowMultipleSelections")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("QuizAPI.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("QuizAPI.Models.TypeTheAnswerQuestion", b =>
                {
                    b.HasBaseType("QuizAPI.Models.QuestionBase");

                    b.Property<string>("AcceptableAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowPartialMatch")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("CorrectAnswer")
                                .HasColumnName("TypeTheAnswerQuestion_CorrectAnswer");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.PermissionUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Permission", "Permission")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("PermissionUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.QuizQuestion", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.RoleUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("RoleUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.ManyToManyTables.UserUpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.UpdatedAt", "UpdatedAt")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UpdatedAtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("UserUpdatedAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UpdatedAt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizAPI.Models.MultipleChoiceQuestion", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Drejtimi", b =>
                {
                    b.HasOne("QuizAPI.Models.Universiteti", "Universiteti")
                        .WithMany()
                        .HasForeignKey("UniversitetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universiteti");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLanguageId");

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionDifficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.QuestionLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.HasOne("QuizAPI.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("QuizAPI.Models.Statistics.Questions.QuestionStatistics", b =>
                {
                    b.HasOne("QuizAPI.Models.QuestionBase", "Question")
                        .WithOne("Statistics")
                        .HasForeignKey("QuizAPI.Models.Statistics.Questions.QuestionStatistics", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.HasOne("QuizAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.HasOne("QuizAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizAPI.Models.Permission", b =>
                {
                    b.Navigation("PermissionUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionBase", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Statistics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.QuestionLanguage", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizAPI.Models.Role", b =>
                {
                    b.Navigation("RoleUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.UpdatedAt", b =>
                {
                    b.Navigation("PermissionUpdatedAt");

                    b.Navigation("RoleUpdatedAt");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("UserUpdatedAt");
                });

            modelBuilder.Entity("QuizAPI.Models.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("AnswerOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="src/types/ApiTypes.ts">
export type BaseEntity<TId = number> = {
    id: TId;
    concurrencyStamp: string;
  };
  
  export type Entity<T, TId = number> = {
    [K in keyof T]: T[K];
  } & BaseEntity<TId>;
  
  export type AuthResponse = {
    token: string;
    user: User;
  };

  export type User = Entity<{
    // concurrencyStamp: string;
    immutableName: string;  
    username: string;
    email: string;
    passwordHash: string;
    dateRegistered: string;
    userUpdatedAt: string | null;
    isDeleted: boolean;
    lastLogin: string;
    profileImageUrl: string;
    role : string;
  },string>;
  
  export type UserBasic = {
    id: string;
    username: string;
    profileImageUrl: string;
  };
  
  
  export type Role = Entity<{
    name: string;
    isActive: boolean;
    description: string;
    createdById: string; // Foreign key to User
    createdBy?: User; // Optional navigation property to User
    roleUpdatedAt?: string[]; 
  }>;

  export type AnswerOption = {
    id : number;
    text: string;
    isCorrect: boolean;
  };

  export type QuizSummaryDTO = {
    id: number;
    title: string;
    description?: string;
    language: string;
    difficulty :string;
    category:string;
    createdAt: string;
    isPublished: boolean;
    isActive : boolean;
    user: string;
    questionCount:number;
  }

  export enum QuestionType {
    MultipleChoice   = "MultipleChoice",
    TrueFalse        = "TrueFalse",
    TypeTheAnswer    = "TypeTheAnswer",
  }

  export interface QuestionBase {
    id: number;
    text: string;
    visibility: string;
    difficulty: QuestionDifficulty;
    category: QuestionCategory;
    language: QuestionLanguage;
    imageUrl: string;
    createdAt: string;     
    user: UserBasic;
    // statistics?: QuestionStatisticsDTO;
    type: QuestionType;
  }

  export interface MultipleChoiceQuestion extends QuestionBase {
    type: QuestionType.MultipleChoice;
    answerOptions: AnswerOption[];
    allowMultipleSelections: boolean;
  }
  export interface TrueFalseQuestion extends QuestionBase {
    type: QuestionType.TrueFalse;
    correctAnswer: boolean;
  }
  export interface TypeTheAnswerQuestion extends QuestionBase {
    type: QuestionType.TypeTheAnswer;
    correctAnswer: string;
    isCaseSensitive: boolean;
    allowPartialMatch: boolean;
    acceptableAnswers: string[] ;
  }

  export type AnyQuestion =
  | MultipleChoiceQuestion
  | TrueFalseQuestion
  | TypeTheAnswerQuestion;
  
  export type IndividualQuestion = {
    id: number;
    text: string;
    createdAt: string;
    userId : string;
    user: UserBasic;
    difficulty: string;
    language :string;
    languageId: number;
    difficultyId: number;
    category: string;
    visibility:string;
    categoryId: number;
    answerOptions: AnswerOption[];
  }

  export type CategoryDTO = {
    id: number;
    category: string;
    emoji: string;
  }

  export type DifficultyDTO = {
    id: number;
    level: string;
    weight :number;
  }
  export type LanguageDTO = {
    id: number;
    language: string;
  }

  export type QuestionCategory = {
    id: number;
    createdAt: string;
    username: string;
    name: string;
  };

  export type QuestionDifficulty = {
    id: number;
    level: string;
    username: string;
    weight: number;
    createdAt: string;
  };

  export type QuestionLanguage = {
    id: number;
    language: string;
    username: string;
    createdAt: string;
  };

  export interface Pagination {
    currentPage: number;
    itemsPerPage: number;
    totalItems: number;
    totalPages: number;
    hasNextPage?: boolean;
    hasPreviousPage?: boolean;
  }
  
  export interface PaginatedResponse<T> {
    data: T[];
    pagination?: Pagination;
  }

  export type PaginatedQuizSummaryResponse = PaginatedResponse<QuizSummaryDTO>;
  // export type PaginatedUserResponse = PaginatedResponse<User>;

  export type PaginatedQuestionResponse = PaginatedResponse<QuestionBase>;
  export type PaginatedMultipleChoiceQuestionResponse = PaginatedResponse<MultipleChoiceQuestion>;
  export type PaginatedTrueFalseQuestionResponse = PaginatedResponse<TrueFalseQuestion>;
  export type PaginatedTypeTheAnswerQuestionResponse = PaginatedResponse<TypeTheAnswerQuestion>;
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/components/questions-panel.tsx">
// import React from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { useDisclosure } from "@/hooks/use-disclosure";
// import { ScrollArea } from "@/components/ui/scroll-area";
import { PlusCircle } from "lucide-react";
import { useQuiz } from "../Quiz-questions-context";
import { SmallQuestionCard } from "./small-question-card";
import { LiftedButton } from "@/common/LiftedButton";
import SelectQuestionComponent from "./question-select/question-select";
import { AnyQuestion } from "@/types/ApiTypes";
import { NewAnyQuestion } from "../types";

export function isAnyQuestion(
  question: AnyQuestion | NewAnyQuestion
): question is AnyQuestion {
  return typeof question.id === "number";
}

export const CreatedQuestionsPanel = ({}) => {
  const { isOpen, open, close } = useDisclosure();

  const handleOpenChange = () => {
    if (!isOpen) {
      open();
    } else {
      close();
    }
  };

  const { addedQuestions } = useQuiz();

  return (
    <>
      <Card className="w-full shadow-none border-2 border-primary/30 bg-background py-0">
        <CardHeader className=" rounded-t border-primary/30 border-b p-4 bg-primary/10">
          <CardTitle className="flex justify-between items-center text-sm ">
            <span>Quiz Questions ({addedQuestions.length})</span>
            <Popover modal={true} open={isOpen} onOpenChange={handleOpenChange}>
              <PopoverTrigger asChild onClick={open}>
                <Button type="button" variant="ghost" size="sm">
                  <PlusCircle size={16} />
                </Button>
              </PopoverTrigger>
              <PopoverContent
                side="left"
                className="w-auto p-4 flex flex-col gap-2"
              >
                <SelectQuestionComponent />
                <LiftedButton>+ Create New</LiftedButton>
              </PopoverContent>
            </Popover>
          </CardTitle>
        </CardHeader>
        <CardContent className="px-3 py-4">
          {addedQuestions.length === 0 ? (
            <p className="text-center text-muted-foreground py-4">
              No questions added yet
            </p>
          ) : (
            <div className="space-y-3">
              {addedQuestions.map((question, index) => {
                if (!isAnyQuestion(question)) return null;

                return (
                  <SmallQuestionCard
                    key={question.id ?? `new-${index}`}
                    question={question}
                  />
                );
              })}
            </div>
          )}
        </CardContent>
      </Card>
      {isOpen && (
        <div
          className="fixed inset-0 z-40 bg-black/30 backdrop-blur-sm"
          onClick={close}
        />
      )}
    </>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Question/Questions.tsx">
import { useState, useEffect } from "react";
import { useQuestionCategoryData } from "./Entities/Categories/api/get-question-categories";
import { useQuestionDifficultyData } from "./Entities/Difficulty/api/get-question-difficulties";
import { useQuestionLanguageData } from "./Entities/Language/api/get-question-language";

import { Card, Spinner } from "@/components/ui";
import { useDebounce } from "@/hooks/use-debounce";
import { useDisclosure } from "@/hooks/use-disclosure";

// Imports for "Add Question" Dialog
import { LiftedButton } from "@/common/LiftedButton";
import CreateQuestionForm from "./Components/Multiple_Choice_Question/Create-Multiple-Choice-Question-Components/create-multiple-choice-question";
import CreateTrueFalseQuestionForm from "./Components/True_Flase-Question/create-true_false-questions";
import {
  Dialog,
  DialogHeader,
  DialogTrigger,
  DialogContent,
  DialogTitle,
} from "@/components/ui/dialog";
import CreateTypeAnswerQuestionForm from "./Components/Type_The_Answer-Question/create-type-the-answer-question";
import { Separator } from "@/components/ui/separator";
import { QuestionFilters } from "./Components/Re-Usable-Components/question-filters";
import { CategoryView } from "./Entities/Categories/Components/category-view";
import { DifficultyView } from "./Entities/Difficulty/Components/difficulty-view";
import { LanguagesView } from "./Entities/Language/components/language-view";
import { QuestionType } from "@/types/ApiTypes";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { QuestionTabContent } from "./Components/QuestionsTabContent";

export const Questions = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [debouncedSearchTerm] = useDebounce(searchTerm, 500);
  const [selectedCategoryId, setSelectedCategoryId] = useState<
    number | undefined
  >();
  const [selectedDifficultyId, setSelectedDifficultyId] = useState<
    number | undefined
  >();
  const [selectedLanguageId, setSelectedLanguageId] = useState<
    number | undefined
  >();
  const [pageNumber, setPageNumber] = useState(1);
  const [pageSize] = useState(10);

  const [activeTab, setActiveTab] = useState<QuestionType>(
    QuestionType.MultipleChoice
  );

  const {
    isOpen: isAddQuestionDialogOpen,
    open: openAddQuestionDialog,
    close: closeAddQuestionDialog,
  } = useDisclosure();

  const categoriesQuery = useQuestionCategoryData({});
  const difficultiesQuery = useQuestionDifficultyData({});
  const languagesQuery = useQuestionLanguageData({});

  const queryParams = {
    pageNumber: pageNumber,
    pageSize: pageSize,
    searchTerm: debouncedSearchTerm || undefined,
    categoryId: selectedCategoryId,
    difficultyId: selectedDifficultyId,
    languageId: selectedLanguageId,
    // visibility: "Public"
  };

  useEffect(() => {
    setPageNumber(1);
  }, [
    debouncedSearchTerm,
    selectedCategoryId,
    selectedDifficultyId,
    selectedLanguageId,
    activeTab,
  ]);

  const handlePageChange = (newPage: number) => {
    setPageNumber(newPage);
    window.scrollTo(0, 0);
  };

  // Check if filter data is still loading
  const isFilterDataLoading =
    categoriesQuery.isLoading ||
    difficultiesQuery.isLoading ||
    languagesQuery.isLoading;

  if (isFilterDataLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Spinner size="lg" />
      </div>
    );
  }

  return (
    <div className="container mx-auto py-8 px-4 md:px-0">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Questions Management</h1>
        <Dialog
          open={isAddQuestionDialogOpen}
          onOpenChange={(open) =>
            open ? openAddQuestionDialog() : closeAddQuestionDialog()
          }
        >
          <DialogTrigger asChild>
            <LiftedButton className="flex items-center gap-2">
              Add Question +
            </LiftedButton>
          </DialogTrigger>
          <DialogContent className="bg-background p-4 rounded-md w-fit pt-8 dark:border border-foreground/30">
            <DialogHeader>
              <DialogTitle className="flex items-center justify-center">
                Choose the type of question
              </DialogTitle>
            </DialogHeader>
            <div className="flex flex-col gap-4 mt-4">
              <CreateQuestionForm
                languages={languagesQuery.data || []}
                categories={categoriesQuery.data || []}
                difficulties={difficultiesQuery.data || []}
                onSuccess={closeAddQuestionDialog}
              />
              <CreateTrueFalseQuestionForm
                languages={languagesQuery.data || []}
                categories={categoriesQuery.data || []}
                difficulties={difficultiesQuery.data || []}
                onSuccess={closeAddQuestionDialog}
              />
              <CreateTypeAnswerQuestionForm
                languages={languagesQuery.data || []}
                categories={categoriesQuery.data || []}
                difficulties={difficultiesQuery.data || []}
                onSuccess={closeAddQuestionDialog}
              />
            </div>
          </DialogContent>
        </Dialog>
      </div>

      <Card className="p-6 bg-card border dark:border-foreground/30">
        {/* Filters section - shared across all question types */}
        <QuestionFilters
          searchTerm={searchTerm}
          onSearchTermChange={setSearchTerm}
          categories={categoriesQuery.data || []}
          selectedCategoryId={selectedCategoryId}
          onCategoryChange={(value) => setSelectedCategoryId(value)}
          difficulties={difficultiesQuery.data || []}
          selectedDifficultyId={selectedDifficultyId}
          onDifficultyChange={(value) => setSelectedDifficultyId(value)}
          languages={languagesQuery.data || []}
          selectedLanguageId={selectedLanguageId}
          onLanguageChange={(value) => setSelectedLanguageId(value)}
        />

        <Separator className="my-6" />

        {/* Tabs for switching between question types */}
        <Tabs
          value={activeTab}
          onValueChange={(value) => setActiveTab(value as QuestionType)}
          className="w-full"
        >
          <TabsList className="grid grid-cols-3 mb-6">
            <TabsTrigger value={QuestionType.MultipleChoice}>
              Multiple Choice
            </TabsTrigger>
            <TabsTrigger value={QuestionType.TrueFalse}>True/False</TabsTrigger>
            <TabsTrigger value={QuestionType.TypeTheAnswer}>
              Type Answer
            </TabsTrigger>
          </TabsList>

          {/* Always render all tab content but conditionally show based on active tab */}
          <TabsContent value={QuestionType.MultipleChoice}>
            <QuestionTabContent
              questionType={QuestionType.MultipleChoice}
              queryParams={queryParams}
              onPageChange={handlePageChange}
            />
          </TabsContent>

          <TabsContent value={QuestionType.TrueFalse}>
            <QuestionTabContent
              questionType={QuestionType.TrueFalse}
              queryParams={queryParams}
              onPageChange={handlePageChange}
            />
          </TabsContent>

          <TabsContent value={QuestionType.TypeTheAnswer}>
            <QuestionTabContent
              questionType={QuestionType.TypeTheAnswer}
              queryParams={queryParams}
              onPageChange={handlePageChange}
            />
          </TabsContent>
        </Tabs>
      </Card>

      <div className="flex flex-col gap-6 mt-6">
        <CategoryView />
        <DifficultyView />
        <LanguagesView />
      </div>
    </div>
  );
};
</file>

<file path="src/pages/Dashboard/Pages/Quiz/components/Create-Quiz-Form/create-quiz.tsx">
import { Form, Input, Label, Textarea } from "@/components/ui/form";
import { Separator } from "@/components/ui/separator";
import { useQuizForm } from "./use-quiz-form";
import {
  Brain,
  Trophy,
  PlusCircle,
  Clock,
  Eye,
  Shuffle,
  Upload,
} from "lucide-react";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import SelectQuestionComponent from "./components/question-select/question-select";
import { useQuiz } from "./Quiz-questions-context";
import { AnyQuestion } from "@/types/ApiTypes";
import { LiftedButton } from "@/common/LiftedButton";
// import { CreatedQuestionsPanel } from "./components/questions-panel";
import { CategorySelect } from "../../../Question/Entities/Categories/Components/select-question-category";
import { createQuizInputSchema, useCreateQuiz } from "../../api/create-quiz";
import { DifficultySelect } from "../../../Question/Entities/Difficulty/Components/select-question-difficulty";
import { LanguageSelect } from "../../../Question/Entities/Language/components/select-question-language";
import { Spinner, Switch } from "@/components/ui";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useEffect, useState } from "react";
import { BsPatchQuestionFill } from "react-icons/bs";
import { useNotifications } from "@/common/Notifications";
import { useNavigate } from "react-router";
import { ExistingQuestionCard } from "./components/quiz-question-card/existing-quiz-question-card";
import { QuestionSettingsCard } from "./components/quiz-question-settings";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useDisclosure } from "@/hooks/use-disclosure";
import { NewAnyQuestion, QuizQuestion } from "./types";
import { DEFAULT_NEW_MULTIPLE_CHOICE } from "../../../Question/Components/Re-Usable-Components/constants";
import { NewQuestionCard } from "./components/create-question/new-quiz-question-card";

const CreateQuizForm = () => {
  const { queryData } = useQuizForm();
  const {
    addedQuestions,
    displayQuestion,
    getQuestionsWithSettings,
    addQuestionToQuiz,
  } = useQuiz();
  const { addNotification } = useNotifications();
  const navigate = useNavigate();

  const [artificialIdCounter, setArtificialIdCounter] = useState(-1);

  const getNextArtificialId = () => {
    const nextId = artificialIdCounter - 1;
    setArtificialIdCounter(nextId);
    return nextId;
  };

  const {
    isOpen: isAddQuestionDialogOpen,
    open: openAddQuestionDialog,
    close: closeAddQuestionDialog,
  } = useDisclosure();

  function isAnyQuestion(q: any): q is AnyQuestion {
    return (
      q && typeof q.id === "number" && "difficulty" in q && "category" in q
    );
  }

  function isNewAnyQuestion(q: any): q is NewAnyQuestion {
    return q && !("difficulty" in q) && !("category" in q);
  }

  const createQuizMutation = useCreateQuiz({
    mutationConfig: {
      onSuccess: () => {
        addNotification({
          type: "success",
          title: "Success",
          message: "Your quiz was created successfully!",
        });
        navigate("/dashboard/quizzes");
      },
    },
  });

  const [activeTab, setActiveTab] = useState("quiz");

  if (queryData.isLoading) {
    return (
      <div className="w-full h-64 flex items-center justify-center">
        <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (queryData.error) {
    return (
      <div className="w-full p-8 text-center text-destructive">
        <Brain className="mx-auto h-16 w-16 mb-4 opacity-70" />
        <h3 className="text-xl font-bold">Oops! Brain freeze!</h3>
        <p>Error loading quiz data. Please try again.</p>
      </div>
    );
  }

  return (
    <Form
      id="create-quiz"
      className="mt-0 w-full"
      onSubmit={(values) => {
        // Use the context method to get questions with their settings
        const questionsWithSettings = getQuestionsWithSettings();

        const questions = questionsWithSettings.map(
          ({ question, settings }) => ({
            questionId: question.id,
            timeLimitInSeconds: settings.timeLimitInSeconds,
            pointSystem: settings.pointSystem,
            orderInQuiz: settings.orderInQuiz,
          })
        );

        if (questions.length === 0) {
          addNotification({
            type: "error",
            title: "No questions selected",
          });
          return;
        }

        createQuizMutation.mutate({
          data: {
            ...values,
            questions: questions,
          },
        });
      }}
      schema={createQuizInputSchema}
      options={{ mode: "onSubmit" }}
    >
      {({ register, formState, setValue, watch, clearErrors }) => {
        useEffect(() => {
          const questions = addedQuestions.map(
            (q: QuizQuestion, index: number) => ({
              questionId: q.id,
              timeLimitInSeconds: 10,
              pointSystem: "Standard",
              orderInQuiz: index,
            })
          );
          setValue("questions", questions);
        }, [addedQuestions, setValue]);
        const { errors } = formState;
        console.log("Form errors:", errors);
        return (
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4 p-4 items-start">
            <Card className="md:text-xs lg:text-sm h-fit md:col-span-1 bg-background border-2 border-primary/30">
              <Tabs value={activeTab} onValueChange={setActiveTab}>
                <CardHeader className="w-full relative bg-primary/10 text-center border-b border-primary/30 px-2 py-4">
                  <TabsList className="w-full border-none bg-none shadow-none">
                    <TabsTrigger value="quiz">
                      <p className="flex gap-2 px-4 items-center">
                        <Brain
                          className={`h-5 w-5  ${
                            activeTab === "quiz" ? "text-white" : "text-primary"
                          }`}
                        />
                        Quiz Details
                      </p>
                    </TabsTrigger>
                    <TabsTrigger value="questions">
                      <p className="flex gap-2 px-4 items-center">
                        <BsPatchQuestionFill
                          className={`h-5 w-5  ${
                            activeTab === "questions"
                              ? "text-white"
                              : "text-primary"
                          }`}
                        />
                        Question Details
                      </p>
                    </TabsTrigger>
                  </TabsList>
                </CardHeader>
                <TabsContent value="questions" className="flex items-center">
                  <section className=" flex flex-col gap-4 p-4">
                    {displayQuestion && (
                      <QuestionSettingsCard
                        question={displayQuestion}
                        showCopyActions={addedQuestions.length > 1}
                      />
                    )}
                  </section>
                </TabsContent>
                <TabsContent value="quiz">
                  <CardContent className="bg-background space-y-4">
                    {/* Basic Information */}
                    <div className="space-y-2">
                      <div>
                        <Label
                          htmlFor="title"
                          className="text-sm font-medium flex items-center gap-1"
                        >
                          Quiz Title <span className="text-destructive">*</span>
                        </Label>
                        <Input
                          variant="quiz"
                          id="title"
                          placeholder="Enter quiz title..."
                          className="mt-1"
                          {...register("title")}
                          error={errors.title}
                        />
                      </div>

                      <div>
                        <Label
                          htmlFor="description"
                          className="text-sm font-medium"
                        >
                          Description
                        </Label>
                        <Textarea
                          variant="quiz"
                          id="description"
                          placeholder="Describe your quiz..."
                          className="mt-1 min-h-[80px] resize-none"
                          {...register("description")}
                          error={errors.description}
                        />
                      </div>
                    </div>

                    <Separator className="bg-primary/20" />

                    <div className="space-y-3">
                      <div>
                        <CategorySelect
                          categories={queryData.categories}
                          value={watch("categoryId")?.toString() || ""}
                          onChange={(selectedValue: string) =>
                            setValue("categoryId", parseInt(selectedValue, 10))
                          }
                          includeAllOption={false}
                          error={formState.errors["categoryId"]?.message}
                          clearErrors={() => clearErrors("categoryId")}
                        />
                      </div>

                      <div>
                        <DifficultySelect
                          difficulties={queryData.difficulties}
                          value={watch("difficultyId")?.toString() || ""}
                          onChange={(selectedValue: string) =>
                            setValue(
                              "difficultyId",
                              parseInt(selectedValue, 10)
                            )
                          }
                          includeAllOption={false}
                          error={formState.errors["difficultyId"]?.message}
                          clearErrors={() => clearErrors("difficultyId")}
                        />
                      </div>

                      <div>
                        <LanguageSelect
                          languages={queryData.languages}
                          value={watch("languageId")?.toString() || ""}
                          includeAllOption={false}
                          onChange={(selectedValue: string) =>
                            setValue("languageId", parseInt(selectedValue, 10))
                          }
                          error={formState.errors["languageId"]?.message}
                          clearErrors={() => clearErrors("languageId")}
                        />
                      </div>
                    </div>

                    <Separator className="bg-primary/20" />

                    {/* Quiz Settings */}
                    <div className="space-y-4">
                      <h4 className="text-sm font-semibold text-primary flex items-center gap-1">
                        <Clock className="h-4 w-4" />
                        Quiz Settings
                      </h4>

                      <div>
                        <Label className="text-sm font-medium flex items-center gap-2 mb-2">
                          <Eye className="h-3 w-3" />
                          Visibility
                        </Label>
                        <Select
                          value={watch("visibility") || ""}
                          onValueChange={(value) =>
                            setValue("visibility", value)
                          }
                        >
                          <SelectTrigger className="w-full">
                            <SelectValue placeholder="Select visibility..." />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Public">Public</SelectItem>
                            <SelectItem value="Private">Private</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    <Separator className="bg-primary/20" />

                    {/* Toggle Options */}
                    <div className="space-y-3">
                      <h4 className="text-sm font-semibold text-primary">
                        Options
                      </h4>

                      <div className="flex items-center justify-between">
                        <Label
                          htmlFor="showFeedback"
                          className="text-sm font-medium flex items-center gap-2"
                        >
                          💬 Instant Feedback
                        </Label>
                        <Switch
                          id="showFeedback"
                          checked={watch("showFeedbackImmediately") || false}
                          onCheckedChange={(checked) =>
                            setValue("showFeedbackImmediately", checked)
                          }
                        />
                      </div>

                      <div className="flex items-center justify-between">
                        <Label
                          htmlFor="shuffleQuestions"
                          className="text-sm font-medium flex items-center gap-2"
                        >
                          <Shuffle className="h-3 w-3" />
                          Shuffle Questions
                        </Label>
                        <Switch
                          id="shuffleQuestions"
                          checked={watch("shuffleQuestions") || false}
                          onCheckedChange={(checked) =>
                            setValue("shuffleQuestions", checked)
                          }
                        />
                      </div>

                      <div className="flex items-center justify-between">
                        <Label
                          htmlFor="isPublished"
                          className="text-sm font-medium flex items-center gap-2"
                        >
                          <Upload className="h-3 w-3" />
                          Publish Quiz
                        </Label>
                        <Switch
                          id="isPublished"
                          checked={watch("isPublished") || false}
                          onCheckedChange={(checked) =>
                            setValue("isPublished", checked)
                          }
                        />
                      </div>
                    </div>
                  </CardContent>
                </TabsContent>
              </Tabs>
            </Card>

            <Card className="bg-background justify-center border-2 border-primary/30 rounded-xl shadow-lg flex flex-col items-center w-full overflow-hidden md:col-span-3">
              <CardHeader className="w-full relative bg-primary/10 p-4 text-center border-b border-primary/30">
                <h2 className="text-2xl font-bold flex items-center justify-center gap-2">
                  <Trophy className="h-6 w-6 text-primary" />
                  Quiz Creator
                  <Trophy className="h-6 w-6 text-primary" />
                </h2>
                <p className="text-muted-foreground">
                  Craft your perfect quiz challenge!
                </p>
                <section className="flex absolute top-0 right-0 justify-center gap-4 p-4 rounded-lg">
                  <SelectQuestionComponent />
                  <Dialog
                    open={isAddQuestionDialogOpen}
                    onOpenChange={(open) =>
                      open ? openAddQuestionDialog() : closeAddQuestionDialog()
                    }
                  >
                    <DialogTrigger asChild>
                      <LiftedButton className="flex items-center gap-2">
                        + Create New
                      </LiftedButton>
                    </DialogTrigger>
                    <DialogContent className="bg-background p-4 rounded-md w-fit pt-8 dark:border border-foreground/30 max-w-4xl">
                      <DialogHeader>
                        <DialogTitle className="flex items-center justify-center">
                          Choose the type of question
                        </DialogTitle>
                      </DialogHeader>
                      <div className="flex flex-col gap-4 mt-4">
                        <div className="flex gap-4">
                          <LiftedButton
                            className="flex items-center gap-2"
                            onClick={() => {
                              const newId = getNextArtificialId();
                              const newQuestion = {
                                ...DEFAULT_NEW_MULTIPLE_CHOICE,
                                id: newId,
                              };
                              addQuestionToQuiz(newQuestion);
                              closeAddQuestionDialog();
                            }}
                          >
                            Multiple Choice
                          </LiftedButton>
                        </div>
                      </div>
                    </DialogContent>
                  </Dialog>
                </section>
              </CardHeader>

              <CardContent className="flex flex-col w-full p-4">
                {displayQuestion !== null ? (
                  isAnyQuestion(displayQuestion) ? (
                    <ExistingQuestionCard question={displayQuestion} />
                  ) : isNewAnyQuestion(displayQuestion) ? (
                    <NewQuestionCard question={displayQuestion} />
                  ) : (
                    <div>Unknown question type</div>
                  )
                ) : (
                  <div className="flex flex-col items-center justify-center py-16 text-center text-muted-foreground border-2 border-dashed border-primary/20 rounded-lg w-full">
                    <Brain className="h-16 w-16 mb-4 text-primary/50" />
                    <p className="mb-4 text-lg">Your quiz is feeling empty!</p>
                    <SelectQuestionComponent
                      triggerButton={
                        <Button
                          variant="outline"
                          type="button"
                          className="group hover:bg-primary hover:text-primary-foreground transition-all duration-300"
                        >
                          <PlusCircle className="mr-2 h-4 w-4 group-hover:rotate-90 transition-transform" />
                          Add Your First Question
                        </Button>
                      }
                    />
                  </div>
                )}
                <Separator className="my-6 bg-primary/20" />
                <LiftedButton
                  type="submit"
                  disabled={createQuizMutation?.isPending}
                  className="w-fit self-center relative"
                  variant="default"
                >
                  <div className="flex items-center justify-center">
                    <Spinner
                      size="sm"
                      className={`absolute ${
                        createQuizMutation.isPending ? "visible" : "invisible"
                      }`}
                    />
                    <span
                      className={
                        createQuizMutation.isPending ? "invisible" : "visible"
                      }
                    >
                      Finish
                    </span>
                  </div>
                </LiftedButton>
              </CardContent>
            </Card>

            <div className="md:col-span-1">
              {/* <CreatedQuestionsPanel /> */}
            </div>
          </div>
        );
      }}
    </Form>
  );
};

export default CreateQuizForm;
</file>

</files>
